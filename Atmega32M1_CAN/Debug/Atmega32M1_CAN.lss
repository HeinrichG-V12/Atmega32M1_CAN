
Atmega32M1_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000221c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800100  00800100  0000221c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001534  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e34  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001132  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00005828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e4  00000000  00000000  00005b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060a  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00006a26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_18>
      4c:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_19>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	2c 02       	muls	r18, r28
      7e:	22 03       	mulsu	r18, r18
      80:	0c 04       	cpc	r0, r12
      82:	da 04       	cpc	r13, r10
      84:	5d 05       	cpc	r21, r13
      86:	ed 05       	cpc	r30, r13
      88:	87 06       	cpc	r8, r23
      8a:	ad 07       	cpc	r26, r29
      8c:	e0 08       	sbc	r14, r0
      8e:	1d 0a       	sbc	r1, r29
      90:	d3 0a       	sbc	r13, r19

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 37       	cpi	r26, 0x71	; 113
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <main>
      b2:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <can_clear_all_mob+0x6>
      c0:	1f 92       	push	r1
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	19 82       	std	Y+1, r1	; 0x01
      c8:	1d c0       	rjmp	.+58     	; 0x104 <can_clear_all_mob+0x4a>
      ca:	8d ee       	ldi	r24, 0xED	; 237
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	22 95       	swap	r18
      d2:	20 7f       	andi	r18, 0xF0	; 240
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
      d8:	8e ee       	ldi	r24, 0xEE	; 238
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9b 83       	std	Y+3, r25	; 0x03
      de:	8a 83       	std	Y+2, r24	; 0x02
      e0:	09 c0       	rjmp	.+18     	; 0xf4 <can_clear_all_mob+0x3a>
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	fc 01       	movw	r30, r24
      e8:	10 82       	st	Z, r1
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	9b 81       	ldd	r25, Y+3	; 0x03
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	9b 83       	std	Y+3, r25	; 0x03
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	88 3f       	cpi	r24, 0xF8	; 248
      fa:	91 05       	cpc	r25, r1
      fc:	90 f3       	brcs	.-28     	; 0xe2 <can_clear_all_mob+0x28>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	00 f3       	brcs	.-64     	; 0xca <can_clear_all_mob+0x10>
     10a:	00 00       	nop
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <can_get_mob_free>:
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <can_get_mob_free+0x6>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	8d ee       	ldi	r24, 0xED	; 237
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	80 81       	ld	r24, Z
     12a:	8a 83       	std	Y+2, r24	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	1b c0       	rjmp	.+54     	; 0x166 <can_get_mob_free+0x4e>
     130:	8d ee       	ldi	r24, 0xED	; 237
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	29 81       	ldd	r18, Y+1	; 0x01
     136:	22 95       	swap	r18
     138:	20 7f       	andi	r18, 0xF0	; 240
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	8f ee       	ldi	r24, 0xEF	; 239
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	80 81       	ld	r24, Z
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	80 7c       	andi	r24, 0xC0	; 192
     14c:	99 27       	eor	r25, r25
     14e:	89 2b       	or	r24, r25
     150:	39 f4       	brne	.+14     	; 0x160 <can_get_mob_free+0x48>
     152:	8d ee       	ldi	r24, 0xED	; 237
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	2a 81       	ldd	r18, Y+2	; 0x02
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	0c c0       	rjmp	.+24     	; 0x178 <can_get_mob_free+0x60>
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	86 30       	cpi	r24, 0x06	; 6
     16a:	10 f3       	brcs	.-60     	; 0x130 <can_get_mob_free+0x18>
     16c:	8d ee       	ldi	r24, 0xED	; 237
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2a 81       	ldd	r18, Y+2	; 0x02
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	8f ef       	ldi	r24, 0xFF	; 255
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <can_get_mob_status>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <can_get_mob_status+0x6>
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	8f ee       	ldi	r24, 0xEF	; 239
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	80 81       	ld	r24, Z
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	80 7c       	andi	r24, 0xC0	; 192
     19a:	99 27       	eor	r25, r25
     19c:	89 2b       	or	r24, r25
     19e:	11 f4       	brne	.+4      	; 0x1a4 <can_get_mob_status+0x22>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	1c c0       	rjmp	.+56     	; 0x1dc <can_get_mob_status+0x5a>
     1a4:	8e ee       	ldi	r24, 0xEE	; 238
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	80 7e       	andi	r24, 0xE0	; 224
     1b2:	8a 83       	std	Y+2, r24	; 0x02
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <can_get_mob_status+0x44>
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	80 34       	cpi	r24, 0x40	; 64
     1be:	19 f0       	breq	.+6      	; 0x1c6 <can_get_mob_status+0x44>
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	80 3a       	cpi	r24, 0xA0	; 160
     1c4:	11 f4       	brne	.+4      	; 0x1ca <can_get_mob_status+0x48>
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <can_get_mob_status+0x5a>
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	8f 71       	andi	r24, 0x1F	; 31
     1ce:	8a 83       	std	Y+2, r24	; 0x02
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	88 23       	and	r24, r24
     1d4:	11 f0       	breq	.+4      	; 0x1da <can_get_mob_status+0x58>
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <can_get_mob_status+0x5a>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <can_get_data>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <can_get_data+0x6>
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9b 83       	std	Y+3, r25	; 0x03
     1f4:	8a 83       	std	Y+2, r24	; 0x02
     1f6:	19 82       	std	Y+1, r1	; 0x01
     1f8:	10 c0       	rjmp	.+32     	; 0x21a <can_get_data+0x34>
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	2a 81       	ldd	r18, Y+2	; 0x02
     202:	3b 81       	ldd	r19, Y+3	; 0x03
     204:	82 0f       	add	r24, r18
     206:	93 1f       	adc	r25, r19
     208:	2a ef       	ldi	r18, 0xFA	; 250
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	8f ee       	ldi	r24, 0xEF	; 239
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	99 27       	eor	r25, r25
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	14 f3       	brlt	.-60     	; 0x1fa <can_get_data+0x14>
     236:	00 00       	nop
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	1f 92       	push	r1
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     250:	88 ed       	ldi	r24, 0xD8	; 216
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
    Can_conf_bt();
     25a:	82 ee       	ldi	r24, 0xE2	; 226
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	26 e0       	ldi	r18, 0x06	; 6
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	83 ee       	ldi	r24, 0xE3	; 227
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
     26e:	84 ee       	ldi	r24, 0xE4	; 228
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	23 e1       	ldi	r18, 0x13	; 19
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
    return 1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{	
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	0e 94 22 01 	call	0x244	; 0x244 <can_fixed_baudrate>
     294:	88 23       	and	r24, r24
     296:	11 f4       	brne	.+4      	; 0x29c <can_init+0x1a>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	5b c0       	rjmp	.+182    	; 0x352 <can_init+0xd0>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     29c:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
	
	// we configure  MOB0 as receive mob
	CANPAGE = (0<<4);									/* pick mob0 */
     2a0:	8d ee       	ldi	r24, 0xED	; 237
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	10 82       	st	Z, r1
	CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));			/* disable mob */
     2a8:	8f ee       	ldi	r24, 0xEF	; 239
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2f ee       	ldi	r18, 0xEF	; 239
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	2f 73       	andi	r18, 0x3F	; 63
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	CANCDMOB |= (1 << CONMOB1);							/* enable reception */
     2ba:	8f ee       	ldi	r24, 0xEF	; 239
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	2f ee       	ldi	r18, 0xEF	; 239
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	20 68       	ori	r18, 0x80	; 128
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18
	
	// interrupts
	CANGIE = (1 << ENIT)|(1 << ENRX);					/* enable ENIT and ENRX */
     2cc:	8b ed       	ldi	r24, 0xDB	; 219
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	20 ea       	ldi	r18, 0xA0	; 160
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
	CANIE2 |= (1 << IEMOB0);   							/* Enable interrupts on mob0 */
     2d6:	8e ed       	ldi	r24, 0xDE	; 222
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	2e ed       	ldi	r18, 0xDE	; 222
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	21 60       	ori	r18, 0x01	; 1
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
	CANIE1 = 0;
     2e8:	8f ed       	ldi	r24, 0xDF	; 223
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	10 82       	st	Z, r1
	CANSIT1 = 0;
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	10 82       	st	Z, r1
	CANSIT2 = 0;
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	fc 01       	movw	r30, r24
     2fe:	10 82       	st	Z, r1
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
     300:	87 ef       	ldi	r24, 0xF7	; 247
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
	CANIDM2 = 0x00; 	//  " "
     308:	86 ef       	ldi	r24, 0xF6	; 246
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	10 82       	st	Z, r1
	CANIDM3 = 0x00; 	//  " "
     310:	85 ef       	ldi	r24, 0xF5	; 245
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	fc 01       	movw	r30, r24
     316:	10 82       	st	Z, r1
	CANIDM4 = 0x00; 	//  " "
     318:	84 ef       	ldi	r24, 0xF4	; 244
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	10 82       	st	Z, r1
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     320:	88 ed       	ldi	r24, 0xD8	; 216
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	28 ed       	ldi	r18, 0xD8	; 216
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	f9 01       	movw	r30, r18
     32a:	20 81       	ld	r18, Z
     32c:	22 60       	ori	r18, 0x02	; 2
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
	testVar = 0;
     332:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <testVar+0x1>
     336:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <testVar>
	
	
	while (!(CANGSTA & (1<<ENFG)));						/* wait until module ready */
     33a:	00 00       	nop
     33c:	89 ed       	ldi	r24, 0xD9	; 217
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	84 70       	andi	r24, 0x04	; 4
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	b1 f3       	breq	.-20     	; 0x33c <can_init+0xba>
	
    return (1);
     350:	81 e0       	ldi	r24, 0x01	; 1
}
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	2a 97       	sbiw	r28, 0x0a	; 10
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	9a 87       	std	Y+10, r25	; 0x0a
     370:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	9a 85       	ldd	r25, Y+10	; 0x0a
     376:	fc 01       	movw	r30, r24
     378:	81 81       	ldd	r24, Z+1	; 0x01
     37a:	8c 30       	cpi	r24, 0x0C	; 12
     37c:	39 f5       	brne	.+78     	; 0x3cc <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     37e:	89 85       	ldd	r24, Y+9	; 0x09
     380:	9a 85       	ldd	r25, Y+10	; 0x0a
     382:	fc 01       	movw	r30, r24
     384:	81 85       	ldd	r24, Z+9	; 0x09
     386:	80 36       	cpi	r24, 0x60	; 96
     388:	d9 f4       	brne	.+54     	; 0x3c0 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     38a:	8d ee       	ldi	r24, 0xED	; 237
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	29 85       	ldd	r18, Y+9	; 0x09
     390:	3a 85       	ldd	r19, Y+10	; 0x0a
     392:	f9 01       	movw	r30, r18
     394:	20 81       	ld	r18, Z
     396:	22 95       	swap	r18
     398:	20 7f       	andi	r18, 0xF0	; 240
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
      Can_mob_abort();
     39e:	8f ee       	ldi	r24, 0xEF	; 239
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2f ee       	ldi	r18, 0xEF	; 239
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	2f 73       	andi	r18, 0x3F	; 63
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     3b0:	8e ee       	ldi	r24, 0xEE	; 238
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	fc 01       	movw	r30, r24
     3b6:	10 82       	st	Z, r1
      cmd->handle = 0;
     3b8:	89 85       	ldd	r24, Y+9	; 0x09
     3ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     3bc:	fc 01       	movw	r30, r24
     3be:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     3c0:	89 85       	ldd	r24, Y+9	; 0x09
     3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c4:	fc 01       	movw	r30, r24
     3c6:	11 86       	std	Z+9, r1	; 0x09
     3c8:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__stack+0xf73>
  }
  else
  {
    mob_handle = can_get_mob_free();
     3cc:	0e 94 8c 00 	call	0x118	; 0x118 <can_get_mob_free>
     3d0:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     3d2:	8c 81       	ldd	r24, Y+4	; 0x04
     3d4:	8f 3f       	cpi	r24, 0xFF	; 255
     3d6:	11 f4       	brne	.+4      	; 0x3dc <can_cmd+0x82>
     3d8:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__stack+0xf65>
    {
      cmd->status = MOB_PENDING; 
     3dc:	89 85       	ldd	r24, Y+9	; 0x09
     3de:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e0:	20 e6       	ldi	r18, 0x60	; 96
     3e2:	fc 01       	movw	r30, r24
     3e4:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     3e6:	89 85       	ldd	r24, Y+9	; 0x09
     3e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ea:	2c 81       	ldd	r18, Y+4	; 0x04
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     3f0:	8d ee       	ldi	r24, 0xED	; 237
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	2c 81       	ldd	r18, Y+4	; 0x04
     3f6:	22 95       	swap	r18
     3f8:	20 7f       	andi	r18, 0xF0	; 240
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
      Can_clear_mob();
     3fe:	8e ee       	ldi	r24, 0xEE	; 238
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	9b 83       	std	Y+3, r25	; 0x03
     404:	8a 83       	std	Y+2, r24	; 0x02
     406:	09 c0       	rjmp	.+18     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	9b 81       	ldd	r25, Y+3	; 0x03
     40c:	fc 01       	movw	r30, r24
     40e:	10 82       	st	Z, r1
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	9b 81       	ldd	r25, Y+3	; 0x03
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	9b 83       	std	Y+3, r25	; 0x03
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	9b 81       	ldd	r25, Y+3	; 0x03
     41e:	88 3f       	cpi	r24, 0xF8	; 248
     420:	91 05       	cpc	r25, r1
     422:	90 f3       	brcs	.-28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
          
      switch (cmd->cmd)
     424:	89 85       	ldd	r24, Y+9	; 0x09
     426:	9a 85       	ldd	r25, Y+10	; 0x0a
     428:	fc 01       	movw	r30, r24
     42a:	81 81       	ldd	r24, Z+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	09 2e       	mov	r0, r25
     432:	00 0c       	add	r0, r0
     434:	aa 0b       	sbc	r26, r26
     436:	bb 0b       	sbc	r27, r27
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	2a e0       	ldi	r18, 0x0A	; 10
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	84 1b       	sub	r24, r20
     442:	95 0b       	sbc	r25, r21
     444:	28 17       	cp	r18, r24
     446:	39 07       	cpc	r19, r25
     448:	10 f4       	brcc	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__stack+0xf59>
     44e:	82 5c       	subi	r24, 0xC2	; 194
     450:	9f 4f       	sbci	r25, 0xFF	; 255
     452:	fc 01       	movw	r30, r24
     454:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	fc 01       	movw	r30, r24
     45e:	83 85       	ldd	r24, Z+11	; 0x0b
     460:	88 23       	and	r24, r24
     462:	09 f4       	brne	.+2      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     464:	69 c0       	rjmp	.+210    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     466:	83 ef       	ldi	r24, 0xF3	; 243
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	29 85       	ldd	r18, Y+9	; 0x09
     46c:	3a 85       	ldd	r19, Y+10	; 0x0a
     46e:	2e 5f       	subi	r18, 0xFE	; 254
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	2d 5f       	subi	r18, 0xFD	; 253
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	f9 01       	movw	r30, r18
     478:	20 81       	ld	r18, Z
     47a:	42 2f       	mov	r20, r18
     47c:	44 0f       	add	r20, r20
     47e:	44 0f       	add	r20, r20
     480:	44 0f       	add	r20, r20
     482:	29 85       	ldd	r18, Y+9	; 0x09
     484:	3a 85       	ldd	r19, Y+10	; 0x0a
     486:	2e 5f       	subi	r18, 0xFE	; 254
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	2e 5f       	subi	r18, 0xFE	; 254
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	f9 01       	movw	r30, r18
     490:	20 81       	ld	r18, Z
     492:	22 95       	swap	r18
     494:	26 95       	lsr	r18
     496:	27 70       	andi	r18, 0x07	; 7
     498:	24 0f       	add	r18, r20
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	82 ef       	ldi	r24, 0xF2	; 242
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	29 85       	ldd	r18, Y+9	; 0x09
     4a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     4a6:	2e 5f       	subi	r18, 0xFE	; 254
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	2e 5f       	subi	r18, 0xFE	; 254
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	42 2f       	mov	r20, r18
     4b4:	44 0f       	add	r20, r20
     4b6:	44 0f       	add	r20, r20
     4b8:	44 0f       	add	r20, r20
     4ba:	29 85       	ldd	r18, Y+9	; 0x09
     4bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     4be:	2e 5f       	subi	r18, 0xFE	; 254
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	f9 01       	movw	r30, r18
     4c8:	20 81       	ld	r18, Z
     4ca:	22 95       	swap	r18
     4cc:	26 95       	lsr	r18
     4ce:	27 70       	andi	r18, 0x07	; 7
     4d0:	24 0f       	add	r18, r20
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	81 ef       	ldi	r24, 0xF1	; 241
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	29 85       	ldd	r18, Y+9	; 0x09
     4dc:	3a 85       	ldd	r19, Y+10	; 0x0a
     4de:	2e 5f       	subi	r18, 0xFE	; 254
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	42 2f       	mov	r20, r18
     4ec:	44 0f       	add	r20, r20
     4ee:	44 0f       	add	r20, r20
     4f0:	44 0f       	add	r20, r20
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f6:	2e 5f       	subi	r18, 0xFE	; 254
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	f9 01       	movw	r30, r18
     4fc:	20 81       	ld	r18, Z
     4fe:	22 95       	swap	r18
     500:	26 95       	lsr	r18
     502:	27 70       	andi	r18, 0x07	; 7
     504:	24 0f       	add	r18, r20
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
     50a:	80 ef       	ldi	r24, 0xF0	; 240
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	29 85       	ldd	r18, Y+9	; 0x09
     510:	3a 85       	ldd	r19, Y+10	; 0x0a
     512:	2e 5f       	subi	r18, 0xFE	; 254
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	22 0f       	add	r18, r18
     51c:	22 0f       	add	r18, r18
     51e:	22 0f       	add	r18, r18
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18
     524:	8f ee       	ldi	r24, 0xEF	; 239
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	2f ee       	ldi	r18, 0xEF	; 239
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	f9 01       	movw	r30, r18
     52e:	20 81       	ld	r18, Z
     530:	20 61       	ori	r18, 0x10	; 16
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
     536:	30 c0       	rjmp	.+96     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
          else              { Can_set_std_id(cmd->id.std);}
     538:	83 ef       	ldi	r24, 0xF3	; 243
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	29 85       	ldd	r18, Y+9	; 0x09
     53e:	3a 85       	ldd	r19, Y+10	; 0x0a
     540:	2e 5f       	subi	r18, 0xFE	; 254
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	2f 5f       	subi	r18, 0xFF	; 255
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	42 2f       	mov	r20, r18
     54e:	42 95       	swap	r20
     550:	44 0f       	add	r20, r20
     552:	40 7e       	andi	r20, 0xE0	; 224
     554:	29 85       	ldd	r18, Y+9	; 0x09
     556:	3a 85       	ldd	r19, Y+10	; 0x0a
     558:	2e 5f       	subi	r18, 0xFE	; 254
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	f9 01       	movw	r30, r18
     55e:	20 81       	ld	r18, Z
     560:	26 95       	lsr	r18
     562:	26 95       	lsr	r18
     564:	26 95       	lsr	r18
     566:	24 0f       	add	r18, r20
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
     56c:	82 ef       	ldi	r24, 0xF2	; 242
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	29 85       	ldd	r18, Y+9	; 0x09
     572:	3a 85       	ldd	r19, Y+10	; 0x0a
     574:	2e 5f       	subi	r18, 0xFE	; 254
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	22 95       	swap	r18
     57e:	22 0f       	add	r18, r18
     580:	20 7e       	andi	r18, 0xE0	; 224
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
     586:	8f ee       	ldi	r24, 0xEF	; 239
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	2f ee       	ldi	r18, 0xEF	; 239
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	2f 7e       	andi	r18, 0xEF	; 239
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     598:	19 82       	std	Y+1, r1	; 0x01
     59a:	13 c0       	rjmp	.+38     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
     59c:	8a ef       	ldi	r24, 0xFA	; 250
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	29 85       	ldd	r18, Y+9	; 0x09
     5a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5a4:	f9 01       	movw	r30, r18
     5a6:	47 81       	ldd	r20, Z+7	; 0x07
     5a8:	50 85       	ldd	r21, Z+8	; 0x08
     5aa:	29 81       	ldd	r18, Y+1	; 0x01
     5ac:	22 2f       	mov	r18, r18
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	24 0f       	add	r18, r20
     5b2:	35 1f       	adc	r19, r21
     5b4:	f9 01       	movw	r30, r18
     5b6:	20 81       	ld	r18, Z
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	89 85       	ldd	r24, Y+9	; 0x09
     5c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c6:	fc 01       	movw	r30, r24
     5c8:	96 81       	ldd	r25, Z+6	; 0x06
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	89 17       	cp	r24, r25
     5ce:	30 f3       	brcs	.-52     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     5d0:	89 85       	ldd	r24, Y+9	; 0x09
     5d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d4:	fc 01       	movw	r30, r24
     5d6:	82 85       	ldd	r24, Z+10	; 0x0a
     5d8:	88 23       	and	r24, r24
     5da:	51 f0       	breq	.+20     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5dc:	80 ef       	ldi	r24, 0xF0	; 240
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	20 ef       	ldi	r18, 0xF0	; 240
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	24 60       	ori	r18, 0x04	; 4
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
            else Can_clear_rtr();    
     5f0:	80 ef       	ldi	r24, 0xF0	; 240
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	20 ef       	ldi	r18, 0xF0	; 240
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	2b 7f       	andi	r18, 0xFB	; 251
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     602:	8f ee       	ldi	r24, 0xEF	; 239
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2f ee       	ldi	r18, 0xEF	; 239
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	40 81       	ld	r20, Z
     60e:	29 85       	ldd	r18, Y+9	; 0x09
     610:	3a 85       	ldd	r19, Y+10	; 0x0a
     612:	f9 01       	movw	r30, r18
     614:	26 81       	ldd	r18, Z+6	; 0x06
     616:	24 2b       	or	r18, r20
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
          Can_config_tx();
     61c:	8f ee       	ldi	r24, 0xEF	; 239
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	2f ee       	ldi	r18, 0xEF	; 239
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	2f 73       	andi	r18, 0x3F	; 63
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
     62e:	8f ee       	ldi	r24, 0xEF	; 239
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	2f ee       	ldi	r18, 0xEF	; 239
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	20 81       	ld	r18, Z
     63a:	20 64       	ori	r18, 0x40	; 64
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
          break;
     640:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	9a 85       	ldd	r25, Y+10	; 0x0a
     648:	fc 01       	movw	r30, r24
     64a:	83 85       	ldd	r24, Z+11	; 0x0b
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     650:	69 c0       	rjmp	.+210    	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
     652:	83 ef       	ldi	r24, 0xF3	; 243
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	29 85       	ldd	r18, Y+9	; 0x09
     658:	3a 85       	ldd	r19, Y+10	; 0x0a
     65a:	2e 5f       	subi	r18, 0xFE	; 254
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	2d 5f       	subi	r18, 0xFD	; 253
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	42 2f       	mov	r20, r18
     668:	44 0f       	add	r20, r20
     66a:	44 0f       	add	r20, r20
     66c:	44 0f       	add	r20, r20
     66e:	29 85       	ldd	r18, Y+9	; 0x09
     670:	3a 85       	ldd	r19, Y+10	; 0x0a
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	2e 5f       	subi	r18, 0xFE	; 254
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	22 95       	swap	r18
     680:	26 95       	lsr	r18
     682:	27 70       	andi	r18, 0x07	; 7
     684:	24 0f       	add	r18, r20
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
     68a:	82 ef       	ldi	r24, 0xF2	; 242
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	29 85       	ldd	r18, Y+9	; 0x09
     690:	3a 85       	ldd	r19, Y+10	; 0x0a
     692:	2e 5f       	subi	r18, 0xFE	; 254
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	2e 5f       	subi	r18, 0xFE	; 254
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	42 2f       	mov	r20, r18
     6a0:	44 0f       	add	r20, r20
     6a2:	44 0f       	add	r20, r20
     6a4:	44 0f       	add	r20, r20
     6a6:	29 85       	ldd	r18, Y+9	; 0x09
     6a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6aa:	2e 5f       	subi	r18, 0xFE	; 254
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	22 95       	swap	r18
     6b8:	26 95       	lsr	r18
     6ba:	27 70       	andi	r18, 0x07	; 7
     6bc:	24 0f       	add	r18, r20
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
     6c2:	81 ef       	ldi	r24, 0xF1	; 241
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	29 85       	ldd	r18, Y+9	; 0x09
     6c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ca:	2e 5f       	subi	r18, 0xFE	; 254
     6cc:	3f 4f       	sbci	r19, 0xFF	; 255
     6ce:	2f 5f       	subi	r18, 0xFF	; 255
     6d0:	3f 4f       	sbci	r19, 0xFF	; 255
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	42 2f       	mov	r20, r18
     6d8:	44 0f       	add	r20, r20
     6da:	44 0f       	add	r20, r20
     6dc:	44 0f       	add	r20, r20
     6de:	29 85       	ldd	r18, Y+9	; 0x09
     6e0:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e2:	2e 5f       	subi	r18, 0xFE	; 254
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	22 95       	swap	r18
     6ec:	26 95       	lsr	r18
     6ee:	27 70       	andi	r18, 0x07	; 7
     6f0:	24 0f       	add	r18, r20
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	80 ef       	ldi	r24, 0xF0	; 240
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	29 85       	ldd	r18, Y+9	; 0x09
     6fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     6fe:	2e 5f       	subi	r18, 0xFE	; 254
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	22 0f       	add	r18, r18
     708:	22 0f       	add	r18, r18
     70a:	22 0f       	add	r18, r18
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
     710:	8f ee       	ldi	r24, 0xEF	; 239
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	2f ee       	ldi	r18, 0xEF	; 239
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	20 61       	ori	r18, 0x10	; 16
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
     722:	30 c0       	rjmp	.+96     	; 0x784 <__EEPROM_REGION_LENGTH__+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     724:	83 ef       	ldi	r24, 0xF3	; 243
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	29 85       	ldd	r18, Y+9	; 0x09
     72a:	3a 85       	ldd	r19, Y+10	; 0x0a
     72c:	2e 5f       	subi	r18, 0xFE	; 254
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	42 2f       	mov	r20, r18
     73a:	42 95       	swap	r20
     73c:	44 0f       	add	r20, r20
     73e:	40 7e       	andi	r20, 0xE0	; 224
     740:	29 85       	ldd	r18, Y+9	; 0x09
     742:	3a 85       	ldd	r19, Y+10	; 0x0a
     744:	2e 5f       	subi	r18, 0xFE	; 254
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	26 95       	lsr	r18
     74e:	26 95       	lsr	r18
     750:	26 95       	lsr	r18
     752:	24 0f       	add	r18, r20
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
     758:	82 ef       	ldi	r24, 0xF2	; 242
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	3a 85       	ldd	r19, Y+10	; 0x0a
     760:	2e 5f       	subi	r18, 0xFE	; 254
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	f9 01       	movw	r30, r18
     766:	20 81       	ld	r18, Z
     768:	22 95       	swap	r18
     76a:	22 0f       	add	r18, r18
     76c:	20 7e       	andi	r18, 0xE0	; 224
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
     772:	8f ee       	ldi	r24, 0xEF	; 239
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2f ee       	ldi	r18, 0xEF	; 239
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	2f 7e       	andi	r18, 0xEF	; 239
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     784:	19 82       	std	Y+1, r1	; 0x01
     786:	13 c0       	rjmp	.+38     	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
     788:	8a ef       	ldi	r24, 0xFA	; 250
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	29 85       	ldd	r18, Y+9	; 0x09
     78e:	3a 85       	ldd	r19, Y+10	; 0x0a
     790:	f9 01       	movw	r30, r18
     792:	47 81       	ldd	r20, Z+7	; 0x07
     794:	50 85       	ldd	r21, Z+8	; 0x08
     796:	29 81       	ldd	r18, Y+1	; 0x01
     798:	22 2f       	mov	r18, r18
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	24 0f       	add	r18, r20
     79e:	35 1f       	adc	r19, r21
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	89 85       	ldd	r24, Y+9	; 0x09
     7b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b2:	fc 01       	movw	r30, r24
     7b4:	96 81       	ldd	r25, Z+6	; 0x06
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	89 17       	cp	r24, r25
     7ba:	30 f3       	brcs	.-52     	; 0x788 <__EEPROM_REGION_LENGTH__+0x388>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	fc 01       	movw	r30, r24
     7c2:	12 86       	std	Z+10, r1	; 0x0a
     7c4:	80 ef       	ldi	r24, 0xF0	; 240
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	20 ef       	ldi	r18, 0xF0	; 240
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	2b 7f       	andi	r18, 0xFB	; 251
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     7d6:	8f ee       	ldi	r24, 0xEF	; 239
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	2f ee       	ldi	r18, 0xEF	; 239
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	40 81       	ld	r20, Z
     7e2:	29 85       	ldd	r18, Y+9	; 0x09
     7e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e6:	f9 01       	movw	r30, r18
     7e8:	26 81       	ldd	r18, Z+6	; 0x06
     7ea:	24 2b       	or	r18, r20
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
          Can_config_tx();
     7f0:	8f ee       	ldi	r24, 0xEF	; 239
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2f ee       	ldi	r18, 0xEF	; 239
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	2f 73       	andi	r18, 0x3F	; 63
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
     802:	8f ee       	ldi	r24, 0xEF	; 239
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	2f ee       	ldi	r18, 0xEF	; 239
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	20 64       	ori	r18, 0x40	; 64
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
          break;
     814:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     818:	89 85       	ldd	r24, Y+9	; 0x09
     81a:	9a 85       	ldd	r25, Y+10	; 0x0a
     81c:	fc 01       	movw	r30, r24
     81e:	83 85       	ldd	r24, Z+11	; 0x0b
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	69 c0       	rjmp	.+210    	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     826:	83 ef       	ldi	r24, 0xF3	; 243
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	3a 85       	ldd	r19, Y+10	; 0x0a
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	2d 5f       	subi	r18, 0xFD	; 253
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	f9 01       	movw	r30, r18
     838:	20 81       	ld	r18, Z
     83a:	42 2f       	mov	r20, r18
     83c:	44 0f       	add	r20, r20
     83e:	44 0f       	add	r20, r20
     840:	44 0f       	add	r20, r20
     842:	29 85       	ldd	r18, Y+9	; 0x09
     844:	3a 85       	ldd	r19, Y+10	; 0x0a
     846:	2e 5f       	subi	r18, 0xFE	; 254
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	2e 5f       	subi	r18, 0xFE	; 254
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	f9 01       	movw	r30, r18
     850:	20 81       	ld	r18, Z
     852:	22 95       	swap	r18
     854:	26 95       	lsr	r18
     856:	27 70       	andi	r18, 0x07	; 7
     858:	24 0f       	add	r18, r20
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	82 ef       	ldi	r24, 0xF2	; 242
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	29 85       	ldd	r18, Y+9	; 0x09
     864:	3a 85       	ldd	r19, Y+10	; 0x0a
     866:	2e 5f       	subi	r18, 0xFE	; 254
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	2e 5f       	subi	r18, 0xFE	; 254
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	42 2f       	mov	r20, r18
     874:	44 0f       	add	r20, r20
     876:	44 0f       	add	r20, r20
     878:	44 0f       	add	r20, r20
     87a:	29 85       	ldd	r18, Y+9	; 0x09
     87c:	3a 85       	ldd	r19, Y+10	; 0x0a
     87e:	2e 5f       	subi	r18, 0xFE	; 254
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	2f 5f       	subi	r18, 0xFF	; 255
     884:	3f 4f       	sbci	r19, 0xFF	; 255
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	22 95       	swap	r18
     88c:	26 95       	lsr	r18
     88e:	27 70       	andi	r18, 0x07	; 7
     890:	24 0f       	add	r18, r20
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
     896:	81 ef       	ldi	r24, 0xF1	; 241
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	29 85       	ldd	r18, Y+9	; 0x09
     89c:	3a 85       	ldd	r19, Y+10	; 0x0a
     89e:	2e 5f       	subi	r18, 0xFE	; 254
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	42 2f       	mov	r20, r18
     8ac:	44 0f       	add	r20, r20
     8ae:	44 0f       	add	r20, r20
     8b0:	44 0f       	add	r20, r20
     8b2:	29 85       	ldd	r18, Y+9	; 0x09
     8b4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b6:	2e 5f       	subi	r18, 0xFE	; 254
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	22 95       	swap	r18
     8c0:	26 95       	lsr	r18
     8c2:	27 70       	andi	r18, 0x07	; 7
     8c4:	24 0f       	add	r18, r20
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
     8ca:	80 ef       	ldi	r24, 0xF0	; 240
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	29 85       	ldd	r18, Y+9	; 0x09
     8d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d2:	2e 5f       	subi	r18, 0xFE	; 254
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	22 0f       	add	r18, r18
     8dc:	22 0f       	add	r18, r18
     8de:	22 0f       	add	r18, r18
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
     8e4:	8f ee       	ldi	r24, 0xEF	; 239
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	2f ee       	ldi	r18, 0xEF	; 239
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	20 81       	ld	r18, Z
     8f0:	20 61       	ori	r18, 0x10	; 16
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
     8f6:	30 c0       	rjmp	.+96     	; 0x958 <__stack+0x59>
          else              { Can_set_std_id(cmd->id.std);}
     8f8:	83 ef       	ldi	r24, 0xF3	; 243
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	2e 5f       	subi	r18, 0xFE	; 254
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	2f 5f       	subi	r18, 0xFF	; 255
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	42 2f       	mov	r20, r18
     90e:	42 95       	swap	r20
     910:	44 0f       	add	r20, r20
     912:	40 7e       	andi	r20, 0xE0	; 224
     914:	29 85       	ldd	r18, Y+9	; 0x09
     916:	3a 85       	ldd	r19, Y+10	; 0x0a
     918:	2e 5f       	subi	r18, 0xFE	; 254
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	f9 01       	movw	r30, r18
     91e:	20 81       	ld	r18, Z
     920:	26 95       	lsr	r18
     922:	26 95       	lsr	r18
     924:	26 95       	lsr	r18
     926:	24 0f       	add	r18, r20
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
     92c:	82 ef       	ldi	r24, 0xF2	; 242
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	2e 5f       	subi	r18, 0xFE	; 254
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	22 95       	swap	r18
     93e:	22 0f       	add	r18, r18
     940:	20 7e       	andi	r18, 0xE0	; 224
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18
     946:	8f ee       	ldi	r24, 0xEF	; 239
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	2f ee       	ldi	r18, 0xEF	; 239
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	2f 7e       	andi	r18, 0xEF	; 239
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     958:	89 85       	ldd	r24, Y+9	; 0x09
     95a:	9a 85       	ldd	r25, Y+10	; 0x0a
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	fc 01       	movw	r30, r24
     960:	22 87       	std	Z+10, r18	; 0x0a
     962:	80 ef       	ldi	r24, 0xF0	; 240
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	20 ef       	ldi	r18, 0xF0	; 240
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	f9 01       	movw	r30, r18
     96c:	20 81       	ld	r18, Z
     96e:	24 60       	ori	r18, 0x04	; 4
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     974:	8f ee       	ldi	r24, 0xEF	; 239
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	2f ee       	ldi	r18, 0xEF	; 239
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f9 01       	movw	r30, r18
     97e:	40 81       	ld	r20, Z
     980:	29 85       	ldd	r18, Y+9	; 0x09
     982:	3a 85       	ldd	r19, Y+10	; 0x0a
     984:	f9 01       	movw	r30, r18
     986:	26 81       	ldd	r18, Z+6	; 0x06
     988:	24 2b       	or	r18, r20
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
          Can_config_tx();
     98e:	8f ee       	ldi	r24, 0xEF	; 239
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	2f ee       	ldi	r18, 0xEF	; 239
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	2f 73       	andi	r18, 0x3F	; 63
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
     9a0:	8f ee       	ldi	r24, 0xEF	; 239
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	2f ee       	ldi	r18, 0xEF	; 239
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	f9 01       	movw	r30, r18
     9aa:	20 81       	ld	r18, Z
     9ac:	20 64       	ori	r18, 0x40	; 64
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
          break;
     9b2:	5f c7       	rjmp	.+3774   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     9b4:	1d 82       	std	Y+5, r1	; 0x05
     9b6:	1e 82       	std	Y+6, r1	; 0x06
     9b8:	1f 82       	std	Y+7, r1	; 0x07
     9ba:	18 86       	std	Y+8, r1	; 0x08
     9bc:	27 ef       	ldi	r18, 0xF7	; 247
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	ce 01       	movw	r24, r28
     9c2:	05 96       	adiw	r24, 0x05	; 5
     9c4:	03 96       	adiw	r24, 0x03	; 3
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	48 2f       	mov	r20, r24
     9cc:	44 0f       	add	r20, r20
     9ce:	44 0f       	add	r20, r20
     9d0:	44 0f       	add	r20, r20
     9d2:	ce 01       	movw	r24, r28
     9d4:	05 96       	adiw	r24, 0x05	; 5
     9d6:	02 96       	adiw	r24, 0x02	; 2
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	82 95       	swap	r24
     9de:	86 95       	lsr	r24
     9e0:	87 70       	andi	r24, 0x07	; 7
     9e2:	84 0f       	add	r24, r20
     9e4:	f9 01       	movw	r30, r18
     9e6:	80 83       	st	Z, r24
     9e8:	26 ef       	ldi	r18, 0xF6	; 246
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	ce 01       	movw	r24, r28
     9ee:	05 96       	adiw	r24, 0x05	; 5
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	48 2f       	mov	r20, r24
     9f8:	44 0f       	add	r20, r20
     9fa:	44 0f       	add	r20, r20
     9fc:	44 0f       	add	r20, r20
     9fe:	ce 01       	movw	r24, r28
     a00:	05 96       	adiw	r24, 0x05	; 5
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	fc 01       	movw	r30, r24
     a06:	80 81       	ld	r24, Z
     a08:	82 95       	swap	r24
     a0a:	86 95       	lsr	r24
     a0c:	87 70       	andi	r24, 0x07	; 7
     a0e:	84 0f       	add	r24, r20
     a10:	f9 01       	movw	r30, r18
     a12:	80 83       	st	Z, r24
     a14:	25 ef       	ldi	r18, 0xF5	; 245
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	ce 01       	movw	r24, r28
     a1a:	05 96       	adiw	r24, 0x05	; 5
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
     a22:	48 2f       	mov	r20, r24
     a24:	44 0f       	add	r20, r20
     a26:	44 0f       	add	r20, r20
     a28:	44 0f       	add	r20, r20
     a2a:	ce 01       	movw	r24, r28
     a2c:	05 96       	adiw	r24, 0x05	; 5
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	82 95       	swap	r24
     a34:	86 95       	lsr	r24
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	84 0f       	add	r24, r20
     a3a:	f9 01       	movw	r30, r18
     a3c:	80 83       	st	Z, r24
     a3e:	84 ef       	ldi	r24, 0xF4	; 244
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9e 01       	movw	r18, r28
     a44:	2b 5f       	subi	r18, 0xFB	; 251
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	22 0f       	add	r18, r18
     a4e:	22 0f       	add	r18, r18
     a50:	22 0f       	add	r18, r18
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a56:	8f ee       	ldi	r24, 0xEF	; 239
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	2f ee       	ldi	r18, 0xEF	; 239
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	40 81       	ld	r20, Z
     a62:	29 85       	ldd	r18, Y+9	; 0x09
     a64:	3a 85       	ldd	r19, Y+10	; 0x0a
     a66:	f9 01       	movw	r30, r18
     a68:	26 81       	ldd	r18, Z+6	; 0x06
     a6a:	24 2b       	or	r18, r20
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     a70:	84 ef       	ldi	r24, 0xF4	; 244
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	24 ef       	ldi	r18, 0xF4	; 244
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	f9 01       	movw	r30, r18
     a7a:	20 81       	ld	r18, Z
     a7c:	2b 7f       	andi	r18, 0xFB	; 251
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a82:	84 ef       	ldi	r24, 0xF4	; 244
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	24 ef       	ldi	r18, 0xF4	; 244
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	2e 7f       	andi	r18, 0xFE	; 254
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
          Can_config_rx();       
     a94:	8f ee       	ldi	r24, 0xEF	; 239
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	2f ee       	ldi	r18, 0xEF	; 239
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	2f 73       	andi	r18, 0x3F	; 63
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
     aa6:	8f ee       	ldi	r24, 0xEF	; 239
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	2f ee       	ldi	r18, 0xEF	; 239
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	f9 01       	movw	r30, r18
     ab0:	20 81       	ld	r18, Z
     ab2:	20 68       	ori	r18, 0x80	; 128
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
          break;
     ab8:	dc c6       	rjmp	.+3512   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     aba:	1d 82       	std	Y+5, r1	; 0x05
     abc:	1e 82       	std	Y+6, r1	; 0x06
     abe:	1f 82       	std	Y+7, r1	; 0x07
     ac0:	18 86       	std	Y+8, r1	; 0x08
     ac2:	27 ef       	ldi	r18, 0xF7	; 247
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	ce 01       	movw	r24, r28
     ac8:	05 96       	adiw	r24, 0x05	; 5
     aca:	03 96       	adiw	r24, 0x03	; 3
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	48 2f       	mov	r20, r24
     ad2:	44 0f       	add	r20, r20
     ad4:	44 0f       	add	r20, r20
     ad6:	44 0f       	add	r20, r20
     ad8:	ce 01       	movw	r24, r28
     ada:	05 96       	adiw	r24, 0x05	; 5
     adc:	02 96       	adiw	r24, 0x02	; 2
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	82 95       	swap	r24
     ae4:	86 95       	lsr	r24
     ae6:	87 70       	andi	r24, 0x07	; 7
     ae8:	84 0f       	add	r24, r20
     aea:	f9 01       	movw	r30, r18
     aec:	80 83       	st	Z, r24
     aee:	26 ef       	ldi	r18, 0xF6	; 246
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	ce 01       	movw	r24, r28
     af4:	05 96       	adiw	r24, 0x05	; 5
     af6:	02 96       	adiw	r24, 0x02	; 2
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	48 2f       	mov	r20, r24
     afe:	44 0f       	add	r20, r20
     b00:	44 0f       	add	r20, r20
     b02:	44 0f       	add	r20, r20
     b04:	ce 01       	movw	r24, r28
     b06:	05 96       	adiw	r24, 0x05	; 5
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	82 95       	swap	r24
     b10:	86 95       	lsr	r24
     b12:	87 70       	andi	r24, 0x07	; 7
     b14:	84 0f       	add	r24, r20
     b16:	f9 01       	movw	r30, r18
     b18:	80 83       	st	Z, r24
     b1a:	25 ef       	ldi	r18, 0xF5	; 245
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	ce 01       	movw	r24, r28
     b20:	05 96       	adiw	r24, 0x05	; 5
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	48 2f       	mov	r20, r24
     b2a:	44 0f       	add	r20, r20
     b2c:	44 0f       	add	r20, r20
     b2e:	44 0f       	add	r20, r20
     b30:	ce 01       	movw	r24, r28
     b32:	05 96       	adiw	r24, 0x05	; 5
     b34:	fc 01       	movw	r30, r24
     b36:	80 81       	ld	r24, Z
     b38:	82 95       	swap	r24
     b3a:	86 95       	lsr	r24
     b3c:	87 70       	andi	r24, 0x07	; 7
     b3e:	84 0f       	add	r24, r20
     b40:	f9 01       	movw	r30, r18
     b42:	80 83       	st	Z, r24
     b44:	84 ef       	ldi	r24, 0xF4	; 244
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	9e 01       	movw	r18, r28
     b4a:	2b 5f       	subi	r18, 0xFB	; 251
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	22 0f       	add	r18, r18
     b54:	22 0f       	add	r18, r18
     b56:	22 0f       	add	r18, r18
     b58:	fc 01       	movw	r30, r24
     b5a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b5c:	8f ee       	ldi	r24, 0xEF	; 239
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	2f ee       	ldi	r18, 0xEF	; 239
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	f9 01       	movw	r30, r18
     b66:	40 81       	ld	r20, Z
     b68:	29 85       	ldd	r18, Y+9	; 0x09
     b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b6c:	f9 01       	movw	r30, r18
     b6e:	26 81       	ldd	r18, Z+6	; 0x06
     b70:	24 2b       	or	r18, r20
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     b76:	89 85       	ldd	r24, Y+9	; 0x09
     b78:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7a:	fc 01       	movw	r30, r24
     b7c:	12 86       	std	Z+10, r1	; 0x0a
     b7e:	84 ef       	ldi	r24, 0xF4	; 244
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	24 ef       	ldi	r18, 0xF4	; 244
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	f9 01       	movw	r30, r18
     b88:	20 81       	ld	r18, Z
     b8a:	24 60       	ori	r18, 0x04	; 4
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
     b90:	80 ef       	ldi	r24, 0xF0	; 240
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	20 ef       	ldi	r18, 0xF0	; 240
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	2b 7f       	andi	r18, 0xFB	; 251
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ba2:	84 ef       	ldi	r24, 0xF4	; 244
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	24 ef       	ldi	r18, 0xF4	; 244
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	20 81       	ld	r18, Z
     bae:	2e 7f       	andi	r18, 0xFE	; 254
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
          Can_config_rx();       
     bb4:	8f ee       	ldi	r24, 0xEF	; 239
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	2f ee       	ldi	r18, 0xEF	; 239
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	20 81       	ld	r18, Z
     bc0:	2f 73       	andi	r18, 0x3F	; 63
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	8f ee       	ldi	r24, 0xEF	; 239
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	2f ee       	ldi	r18, 0xEF	; 239
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	f9 01       	movw	r30, r18
     bd0:	20 81       	ld	r18, Z
     bd2:	20 68       	ori	r18, 0x80	; 128
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18
          break;
     bd8:	4c c6       	rjmp	.+3224   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     bda:	1d 82       	std	Y+5, r1	; 0x05
     bdc:	1e 82       	std	Y+6, r1	; 0x06
     bde:	1f 82       	std	Y+7, r1	; 0x07
     be0:	18 86       	std	Y+8, r1	; 0x08
     be2:	27 ef       	ldi	r18, 0xF7	; 247
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	ce 01       	movw	r24, r28
     be8:	05 96       	adiw	r24, 0x05	; 5
     bea:	03 96       	adiw	r24, 0x03	; 3
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	44 0f       	add	r20, r20
     bf4:	44 0f       	add	r20, r20
     bf6:	44 0f       	add	r20, r20
     bf8:	ce 01       	movw	r24, r28
     bfa:	05 96       	adiw	r24, 0x05	; 5
     bfc:	02 96       	adiw	r24, 0x02	; 2
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	82 95       	swap	r24
     c04:	86 95       	lsr	r24
     c06:	87 70       	andi	r24, 0x07	; 7
     c08:	84 0f       	add	r24, r20
     c0a:	f9 01       	movw	r30, r18
     c0c:	80 83       	st	Z, r24
     c0e:	26 ef       	ldi	r18, 0xF6	; 246
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	ce 01       	movw	r24, r28
     c14:	05 96       	adiw	r24, 0x05	; 5
     c16:	02 96       	adiw	r24, 0x02	; 2
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	44 0f       	add	r20, r20
     c20:	44 0f       	add	r20, r20
     c22:	44 0f       	add	r20, r20
     c24:	ce 01       	movw	r24, r28
     c26:	05 96       	adiw	r24, 0x05	; 5
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	82 95       	swap	r24
     c30:	86 95       	lsr	r24
     c32:	87 70       	andi	r24, 0x07	; 7
     c34:	84 0f       	add	r24, r20
     c36:	f9 01       	movw	r30, r18
     c38:	80 83       	st	Z, r24
     c3a:	25 ef       	ldi	r18, 0xF5	; 245
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	ce 01       	movw	r24, r28
     c40:	05 96       	adiw	r24, 0x05	; 5
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	44 0f       	add	r20, r20
     c4c:	44 0f       	add	r20, r20
     c4e:	44 0f       	add	r20, r20
     c50:	ce 01       	movw	r24, r28
     c52:	05 96       	adiw	r24, 0x05	; 5
     c54:	fc 01       	movw	r30, r24
     c56:	80 81       	ld	r24, Z
     c58:	82 95       	swap	r24
     c5a:	86 95       	lsr	r24
     c5c:	87 70       	andi	r24, 0x07	; 7
     c5e:	84 0f       	add	r24, r20
     c60:	f9 01       	movw	r30, r18
     c62:	80 83       	st	Z, r24
     c64:	84 ef       	ldi	r24, 0xF4	; 244
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9e 01       	movw	r18, r28
     c6a:	2b 5f       	subi	r18, 0xFB	; 251
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	f9 01       	movw	r30, r18
     c70:	20 81       	ld	r18, Z
     c72:	22 0f       	add	r18, r18
     c74:	22 0f       	add	r18, r18
     c76:	22 0f       	add	r18, r18
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c7c:	8f ee       	ldi	r24, 0xEF	; 239
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	2f ee       	ldi	r18, 0xEF	; 239
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	f9 01       	movw	r30, r18
     c86:	40 81       	ld	r20, Z
     c88:	29 85       	ldd	r18, Y+9	; 0x09
     c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8c:	f9 01       	movw	r30, r18
     c8e:	26 81       	ldd	r18, Z+6	; 0x06
     c90:	24 2b       	or	r18, r20
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	fc 01       	movw	r30, r24
     c9e:	22 87       	std	Z+10, r18	; 0x0a
     ca0:	84 ef       	ldi	r24, 0xF4	; 244
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	24 ef       	ldi	r18, 0xF4	; 244
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	f9 01       	movw	r30, r18
     caa:	20 81       	ld	r18, Z
     cac:	24 60       	ori	r18, 0x04	; 4
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
     cb2:	80 ef       	ldi	r24, 0xF0	; 240
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	20 ef       	ldi	r18, 0xF0	; 240
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	f9 01       	movw	r30, r18
     cbc:	20 81       	ld	r18, Z
     cbe:	24 60       	ori	r18, 0x04	; 4
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
          Can_clear_rplv();
     cc4:	8f ee       	ldi	r24, 0xEF	; 239
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	2f ee       	ldi	r18, 0xEF	; 239
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	f9 01       	movw	r30, r18
     cce:	20 81       	ld	r18, Z
     cd0:	2f 7d       	andi	r18, 0xDF	; 223
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
          Can_clear_idemsk();
     cd6:	84 ef       	ldi	r24, 0xF4	; 244
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	24 ef       	ldi	r18, 0xF4	; 244
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	2e 7f       	andi	r18, 0xFE	; 254
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
          Can_config_rx();       
     ce8:	8f ee       	ldi	r24, 0xEF	; 239
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2f ee       	ldi	r18, 0xEF	; 239
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	2f 73       	andi	r18, 0x3F	; 63
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
     cfa:	8f ee       	ldi	r24, 0xEF	; 239
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	2f ee       	ldi	r18, 0xEF	; 239
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	f9 01       	movw	r30, r18
     d04:	20 81       	ld	r18, Z
     d06:	20 68       	ori	r18, 0x80	; 128
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18
          break;
     d0c:	b2 c5       	rjmp	.+2916   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	fc 01       	movw	r30, r24
     d14:	83 85       	ldd	r24, Z+11	; 0x0b
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <__stack+0x41d>
     d1a:	69 c0       	rjmp	.+210    	; 0xdee <__stack+0x4ef>
     d1c:	83 ef       	ldi	r24, 0xF3	; 243
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	29 85       	ldd	r18, Y+9	; 0x09
     d22:	3a 85       	ldd	r19, Y+10	; 0x0a
     d24:	2e 5f       	subi	r18, 0xFE	; 254
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	2d 5f       	subi	r18, 0xFD	; 253
     d2a:	3f 4f       	sbci	r19, 0xFF	; 255
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	42 2f       	mov	r20, r18
     d32:	44 0f       	add	r20, r20
     d34:	44 0f       	add	r20, r20
     d36:	44 0f       	add	r20, r20
     d38:	29 85       	ldd	r18, Y+9	; 0x09
     d3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d3c:	2e 5f       	subi	r18, 0xFE	; 254
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	2e 5f       	subi	r18, 0xFE	; 254
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	22 95       	swap	r18
     d4a:	26 95       	lsr	r18
     d4c:	27 70       	andi	r18, 0x07	; 7
     d4e:	24 0f       	add	r18, r20
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
     d54:	82 ef       	ldi	r24, 0xF2	; 242
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	29 85       	ldd	r18, Y+9	; 0x09
     d5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5c:	2e 5f       	subi	r18, 0xFE	; 254
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	2e 5f       	subi	r18, 0xFE	; 254
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	42 2f       	mov	r20, r18
     d6a:	44 0f       	add	r20, r20
     d6c:	44 0f       	add	r20, r20
     d6e:	44 0f       	add	r20, r20
     d70:	29 85       	ldd	r18, Y+9	; 0x09
     d72:	3a 85       	ldd	r19, Y+10	; 0x0a
     d74:	2e 5f       	subi	r18, 0xFE	; 254
     d76:	3f 4f       	sbci	r19, 0xFF	; 255
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	f9 01       	movw	r30, r18
     d7e:	20 81       	ld	r18, Z
     d80:	22 95       	swap	r18
     d82:	26 95       	lsr	r18
     d84:	27 70       	andi	r18, 0x07	; 7
     d86:	24 0f       	add	r18, r20
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
     d8c:	81 ef       	ldi	r24, 0xF1	; 241
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	29 85       	ldd	r18, Y+9	; 0x09
     d92:	3a 85       	ldd	r19, Y+10	; 0x0a
     d94:	2e 5f       	subi	r18, 0xFE	; 254
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	f9 01       	movw	r30, r18
     d9e:	20 81       	ld	r18, Z
     da0:	42 2f       	mov	r20, r18
     da2:	44 0f       	add	r20, r20
     da4:	44 0f       	add	r20, r20
     da6:	44 0f       	add	r20, r20
     da8:	29 85       	ldd	r18, Y+9	; 0x09
     daa:	3a 85       	ldd	r19, Y+10	; 0x0a
     dac:	2e 5f       	subi	r18, 0xFE	; 254
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	f9 01       	movw	r30, r18
     db2:	20 81       	ld	r18, Z
     db4:	22 95       	swap	r18
     db6:	26 95       	lsr	r18
     db8:	27 70       	andi	r18, 0x07	; 7
     dba:	24 0f       	add	r18, r20
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
     dc0:	80 ef       	ldi	r24, 0xF0	; 240
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	29 85       	ldd	r18, Y+9	; 0x09
     dc6:	3a 85       	ldd	r19, Y+10	; 0x0a
     dc8:	2e 5f       	subi	r18, 0xFE	; 254
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	22 0f       	add	r18, r18
     dd2:	22 0f       	add	r18, r18
     dd4:	22 0f       	add	r18, r18
     dd6:	fc 01       	movw	r30, r24
     dd8:	20 83       	st	Z, r18
     dda:	8f ee       	ldi	r24, 0xEF	; 239
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	2f ee       	ldi	r18, 0xEF	; 239
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	f9 01       	movw	r30, r18
     de4:	20 81       	ld	r18, Z
     de6:	20 61       	ori	r18, 0x10	; 16
     de8:	fc 01       	movw	r30, r24
     dea:	20 83       	st	Z, r18
     dec:	30 c0       	rjmp	.+96     	; 0xe4e <__stack+0x54f>
          else              { Can_set_std_id(cmd->id.std);}
     dee:	83 ef       	ldi	r24, 0xF3	; 243
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	29 85       	ldd	r18, Y+9	; 0x09
     df4:	3a 85       	ldd	r19, Y+10	; 0x0a
     df6:	2e 5f       	subi	r18, 0xFE	; 254
     df8:	3f 4f       	sbci	r19, 0xFF	; 255
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	f9 01       	movw	r30, r18
     e00:	20 81       	ld	r18, Z
     e02:	42 2f       	mov	r20, r18
     e04:	42 95       	swap	r20
     e06:	44 0f       	add	r20, r20
     e08:	40 7e       	andi	r20, 0xE0	; 224
     e0a:	29 85       	ldd	r18, Y+9	; 0x09
     e0c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e0e:	2e 5f       	subi	r18, 0xFE	; 254
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	26 95       	lsr	r18
     e18:	26 95       	lsr	r18
     e1a:	26 95       	lsr	r18
     e1c:	24 0f       	add	r18, r20
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
     e22:	82 ef       	ldi	r24, 0xF2	; 242
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	29 85       	ldd	r18, Y+9	; 0x09
     e28:	3a 85       	ldd	r19, Y+10	; 0x0a
     e2a:	2e 5f       	subi	r18, 0xFE	; 254
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	22 95       	swap	r18
     e34:	22 0f       	add	r18, r18
     e36:	20 7e       	andi	r18, 0xE0	; 224
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
     e3c:	8f ee       	ldi	r24, 0xEF	; 239
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	2f ee       	ldi	r18, 0xEF	; 239
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	f9 01       	movw	r30, r18
     e46:	20 81       	ld	r18, Z
     e48:	2f 7e       	andi	r18, 0xEF	; 239
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	dc 01       	movw	r26, r24
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	af 83       	std	Y+7, r26	; 0x07
     e5a:	b8 87       	std	Y+8, r27	; 0x08
     e5c:	27 ef       	ldi	r18, 0xF7	; 247
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	ce 01       	movw	r24, r28
     e62:	05 96       	adiw	r24, 0x05	; 5
     e64:	03 96       	adiw	r24, 0x03	; 3
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	44 0f       	add	r20, r20
     e6e:	44 0f       	add	r20, r20
     e70:	44 0f       	add	r20, r20
     e72:	ce 01       	movw	r24, r28
     e74:	05 96       	adiw	r24, 0x05	; 5
     e76:	02 96       	adiw	r24, 0x02	; 2
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	82 95       	swap	r24
     e7e:	86 95       	lsr	r24
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	84 0f       	add	r24, r20
     e84:	f9 01       	movw	r30, r18
     e86:	80 83       	st	Z, r24
     e88:	26 ef       	ldi	r18, 0xF6	; 246
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	ce 01       	movw	r24, r28
     e8e:	05 96       	adiw	r24, 0x05	; 5
     e90:	02 96       	adiw	r24, 0x02	; 2
     e92:	fc 01       	movw	r30, r24
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	44 0f       	add	r20, r20
     e9a:	44 0f       	add	r20, r20
     e9c:	44 0f       	add	r20, r20
     e9e:	ce 01       	movw	r24, r28
     ea0:	05 96       	adiw	r24, 0x05	; 5
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	82 95       	swap	r24
     eaa:	86 95       	lsr	r24
     eac:	87 70       	andi	r24, 0x07	; 7
     eae:	84 0f       	add	r24, r20
     eb0:	f9 01       	movw	r30, r18
     eb2:	80 83       	st	Z, r24
     eb4:	25 ef       	ldi	r18, 0xF5	; 245
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	ce 01       	movw	r24, r28
     eba:	05 96       	adiw	r24, 0x05	; 5
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	44 0f       	add	r20, r20
     ec6:	44 0f       	add	r20, r20
     ec8:	44 0f       	add	r20, r20
     eca:	ce 01       	movw	r24, r28
     ecc:	05 96       	adiw	r24, 0x05	; 5
     ece:	fc 01       	movw	r30, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	82 95       	swap	r24
     ed4:	86 95       	lsr	r24
     ed6:	87 70       	andi	r24, 0x07	; 7
     ed8:	84 0f       	add	r24, r20
     eda:	f9 01       	movw	r30, r18
     edc:	80 83       	st	Z, r24
     ede:	84 ef       	ldi	r24, 0xF4	; 244
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9e 01       	movw	r18, r28
     ee4:	2b 5f       	subi	r18, 0xFB	; 251
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	22 0f       	add	r18, r18
     eee:	22 0f       	add	r18, r18
     ef0:	22 0f       	add	r18, r18
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ef6:	8f ee       	ldi	r24, 0xEF	; 239
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2f ee       	ldi	r18, 0xEF	; 239
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	f9 01       	movw	r30, r18
     f00:	40 81       	ld	r20, Z
     f02:	29 85       	ldd	r18, Y+9	; 0x09
     f04:	3a 85       	ldd	r19, Y+10	; 0x0a
     f06:	f9 01       	movw	r30, r18
     f08:	26 81       	ldd	r18, Z+6	; 0x06
     f0a:	24 2b       	or	r18, r20
     f0c:	fc 01       	movw	r30, r24
     f0e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     f10:	84 ef       	ldi	r24, 0xF4	; 244
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	24 ef       	ldi	r18, 0xF4	; 244
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	2b 7f       	andi	r18, 0xFB	; 251
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
          Can_set_idemsk();
     f22:	84 ef       	ldi	r24, 0xF4	; 244
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	24 ef       	ldi	r18, 0xF4	; 244
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	21 60       	ori	r18, 0x01	; 1
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
          Can_config_rx();       
     f34:	8f ee       	ldi	r24, 0xEF	; 239
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	2f ee       	ldi	r18, 0xEF	; 239
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	2f 73       	andi	r18, 0x3F	; 63
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
     f46:	8f ee       	ldi	r24, 0xEF	; 239
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2f ee       	ldi	r18, 0xEF	; 239
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	20 81       	ld	r18, Z
     f52:	20 68       	ori	r18, 0x80	; 128
     f54:	fc 01       	movw	r30, r24
     f56:	20 83       	st	Z, r18
          break;
     f58:	8c c4       	rjmp	.+2328   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	fc 01       	movw	r30, r24
     f60:	83 85       	ldd	r24, Z+11	; 0x0b
     f62:	88 23       	and	r24, r24
     f64:	09 f4       	brne	.+2      	; 0xf68 <__stack+0x669>
     f66:	69 c0       	rjmp	.+210    	; 0x103a <__stack+0x73b>
     f68:	83 ef       	ldi	r24, 0xF3	; 243
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	29 85       	ldd	r18, Y+9	; 0x09
     f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f70:	2e 5f       	subi	r18, 0xFE	; 254
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	2d 5f       	subi	r18, 0xFD	; 253
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	f9 01       	movw	r30, r18
     f7a:	20 81       	ld	r18, Z
     f7c:	42 2f       	mov	r20, r18
     f7e:	44 0f       	add	r20, r20
     f80:	44 0f       	add	r20, r20
     f82:	44 0f       	add	r20, r20
     f84:	29 85       	ldd	r18, Y+9	; 0x09
     f86:	3a 85       	ldd	r19, Y+10	; 0x0a
     f88:	2e 5f       	subi	r18, 0xFE	; 254
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	2e 5f       	subi	r18, 0xFE	; 254
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	22 95       	swap	r18
     f96:	26 95       	lsr	r18
     f98:	27 70       	andi	r18, 0x07	; 7
     f9a:	24 0f       	add	r18, r20
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	82 ef       	ldi	r24, 0xF2	; 242
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	29 85       	ldd	r18, Y+9	; 0x09
     fa6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa8:	2e 5f       	subi	r18, 0xFE	; 254
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	2e 5f       	subi	r18, 0xFE	; 254
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	42 2f       	mov	r20, r18
     fb6:	44 0f       	add	r20, r20
     fb8:	44 0f       	add	r20, r20
     fba:	44 0f       	add	r20, r20
     fbc:	29 85       	ldd	r18, Y+9	; 0x09
     fbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc0:	2e 5f       	subi	r18, 0xFE	; 254
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	f9 01       	movw	r30, r18
     fca:	20 81       	ld	r18, Z
     fcc:	22 95       	swap	r18
     fce:	26 95       	lsr	r18
     fd0:	27 70       	andi	r18, 0x07	; 7
     fd2:	24 0f       	add	r18, r20
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	81 ef       	ldi	r24, 0xF1	; 241
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	29 85       	ldd	r18, Y+9	; 0x09
     fde:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe0:	2e 5f       	subi	r18, 0xFE	; 254
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	42 2f       	mov	r20, r18
     fee:	44 0f       	add	r20, r20
     ff0:	44 0f       	add	r20, r20
     ff2:	44 0f       	add	r20, r20
     ff4:	29 85       	ldd	r18, Y+9	; 0x09
     ff6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ff8:	2e 5f       	subi	r18, 0xFE	; 254
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	f9 01       	movw	r30, r18
     ffe:	20 81       	ld	r18, Z
    1000:	22 95       	swap	r18
    1002:	26 95       	lsr	r18
    1004:	27 70       	andi	r18, 0x07	; 7
    1006:	24 0f       	add	r18, r20
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    100c:	80 ef       	ldi	r24, 0xF0	; 240
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	29 85       	ldd	r18, Y+9	; 0x09
    1012:	3a 85       	ldd	r19, Y+10	; 0x0a
    1014:	2e 5f       	subi	r18, 0xFE	; 254
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	22 0f       	add	r18, r18
    101e:	22 0f       	add	r18, r18
    1020:	22 0f       	add	r18, r18
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	8f ee       	ldi	r24, 0xEF	; 239
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	2f ee       	ldi	r18, 0xEF	; 239
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	f9 01       	movw	r30, r18
    1030:	20 81       	ld	r18, Z
    1032:	20 61       	ori	r18, 0x10	; 16
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18
    1038:	30 c0       	rjmp	.+96     	; 0x109a <__stack+0x79b>
          else              { Can_set_std_id(cmd->id.std);}
    103a:	83 ef       	ldi	r24, 0xF3	; 243
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	29 85       	ldd	r18, Y+9	; 0x09
    1040:	3a 85       	ldd	r19, Y+10	; 0x0a
    1042:	2e 5f       	subi	r18, 0xFE	; 254
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	42 2f       	mov	r20, r18
    1050:	42 95       	swap	r20
    1052:	44 0f       	add	r20, r20
    1054:	40 7e       	andi	r20, 0xE0	; 224
    1056:	29 85       	ldd	r18, Y+9	; 0x09
    1058:	3a 85       	ldd	r19, Y+10	; 0x0a
    105a:	2e 5f       	subi	r18, 0xFE	; 254
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	f9 01       	movw	r30, r18
    1060:	20 81       	ld	r18, Z
    1062:	26 95       	lsr	r18
    1064:	26 95       	lsr	r18
    1066:	26 95       	lsr	r18
    1068:	24 0f       	add	r18, r20
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
    106e:	82 ef       	ldi	r24, 0xF2	; 242
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	29 85       	ldd	r18, Y+9	; 0x09
    1074:	3a 85       	ldd	r19, Y+10	; 0x0a
    1076:	2e 5f       	subi	r18, 0xFE	; 254
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	22 95       	swap	r18
    1080:	22 0f       	add	r18, r18
    1082:	20 7e       	andi	r18, 0xE0	; 224
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18
    1088:	8f ee       	ldi	r24, 0xEF	; 239
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2f ee       	ldi	r18, 0xEF	; 239
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	f9 01       	movw	r30, r18
    1092:	20 81       	ld	r18, Z
    1094:	2f 7e       	andi	r18, 0xEF	; 239
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	dc 01       	movw	r26, r24
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	af 83       	std	Y+7, r26	; 0x07
    10a6:	b8 87       	std	Y+8, r27	; 0x08
    10a8:	27 ef       	ldi	r18, 0xF7	; 247
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	05 96       	adiw	r24, 0x05	; 5
    10b0:	03 96       	adiw	r24, 0x03	; 3
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	44 0f       	add	r20, r20
    10ba:	44 0f       	add	r20, r20
    10bc:	44 0f       	add	r20, r20
    10be:	ce 01       	movw	r24, r28
    10c0:	05 96       	adiw	r24, 0x05	; 5
    10c2:	02 96       	adiw	r24, 0x02	; 2
    10c4:	fc 01       	movw	r30, r24
    10c6:	80 81       	ld	r24, Z
    10c8:	82 95       	swap	r24
    10ca:	86 95       	lsr	r24
    10cc:	87 70       	andi	r24, 0x07	; 7
    10ce:	84 0f       	add	r24, r20
    10d0:	f9 01       	movw	r30, r18
    10d2:	80 83       	st	Z, r24
    10d4:	26 ef       	ldi	r18, 0xF6	; 246
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	ce 01       	movw	r24, r28
    10da:	05 96       	adiw	r24, 0x05	; 5
    10dc:	02 96       	adiw	r24, 0x02	; 2
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	44 0f       	add	r20, r20
    10e6:	44 0f       	add	r20, r20
    10e8:	44 0f       	add	r20, r20
    10ea:	ce 01       	movw	r24, r28
    10ec:	05 96       	adiw	r24, 0x05	; 5
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	82 95       	swap	r24
    10f6:	86 95       	lsr	r24
    10f8:	87 70       	andi	r24, 0x07	; 7
    10fa:	84 0f       	add	r24, r20
    10fc:	f9 01       	movw	r30, r18
    10fe:	80 83       	st	Z, r24
    1100:	25 ef       	ldi	r18, 0xF5	; 245
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	ce 01       	movw	r24, r28
    1106:	05 96       	adiw	r24, 0x05	; 5
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	fc 01       	movw	r30, r24
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	44 0f       	add	r20, r20
    1112:	44 0f       	add	r20, r20
    1114:	44 0f       	add	r20, r20
    1116:	ce 01       	movw	r24, r28
    1118:	05 96       	adiw	r24, 0x05	; 5
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	82 95       	swap	r24
    1120:	86 95       	lsr	r24
    1122:	87 70       	andi	r24, 0x07	; 7
    1124:	84 0f       	add	r24, r20
    1126:	f9 01       	movw	r30, r18
    1128:	80 83       	st	Z, r24
    112a:	84 ef       	ldi	r24, 0xF4	; 244
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e 01       	movw	r18, r28
    1130:	2b 5f       	subi	r18, 0xFB	; 251
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	f9 01       	movw	r30, r18
    1136:	20 81       	ld	r18, Z
    1138:	22 0f       	add	r18, r18
    113a:	22 0f       	add	r18, r18
    113c:	22 0f       	add	r18, r18
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1142:	8f ee       	ldi	r24, 0xEF	; 239
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	2f ee       	ldi	r18, 0xEF	; 239
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	f9 01       	movw	r30, r18
    114c:	40 81       	ld	r20, Z
    114e:	29 85       	ldd	r18, Y+9	; 0x09
    1150:	3a 85       	ldd	r19, Y+10	; 0x0a
    1152:	f9 01       	movw	r30, r18
    1154:	26 81       	ldd	r18, Z+6	; 0x06
    1156:	24 2b       	or	r18, r20
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	fc 01       	movw	r30, r24
    1162:	12 86       	std	Z+10, r1	; 0x0a
    1164:	84 ef       	ldi	r24, 0xF4	; 244
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	24 ef       	ldi	r18, 0xF4	; 244
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	f9 01       	movw	r30, r18
    116e:	20 81       	ld	r18, Z
    1170:	24 60       	ori	r18, 0x04	; 4
    1172:	fc 01       	movw	r30, r24
    1174:	20 83       	st	Z, r18
    1176:	80 ef       	ldi	r24, 0xF0	; 240
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	20 ef       	ldi	r18, 0xF0	; 240
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	f9 01       	movw	r30, r18
    1180:	20 81       	ld	r18, Z
    1182:	2b 7f       	andi	r18, 0xFB	; 251
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
          Can_set_idemsk();
    1188:	84 ef       	ldi	r24, 0xF4	; 244
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	24 ef       	ldi	r18, 0xF4	; 244
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	f9 01       	movw	r30, r18
    1192:	20 81       	ld	r18, Z
    1194:	21 60       	ori	r18, 0x01	; 1
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
          Can_config_rx();       
    119a:	8f ee       	ldi	r24, 0xEF	; 239
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2f ee       	ldi	r18, 0xEF	; 239
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	2f 73       	andi	r18, 0x3F	; 63
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
    11ac:	8f ee       	ldi	r24, 0xEF	; 239
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	2f ee       	ldi	r18, 0xEF	; 239
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	f9 01       	movw	r30, r18
    11b6:	20 81       	ld	r18, Z
    11b8:	20 68       	ori	r18, 0x80	; 128
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
          break;
    11be:	59 c3       	rjmp	.+1714   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	fc 01       	movw	r30, r24
    11c6:	83 85       	ldd	r24, Z+11	; 0x0b
    11c8:	88 23       	and	r24, r24
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__stack+0x8cf>
    11cc:	69 c0       	rjmp	.+210    	; 0x12a0 <__stack+0x9a1>
    11ce:	83 ef       	ldi	r24, 0xF3	; 243
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	29 85       	ldd	r18, Y+9	; 0x09
    11d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d6:	2e 5f       	subi	r18, 0xFE	; 254
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	2d 5f       	subi	r18, 0xFD	; 253
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	f9 01       	movw	r30, r18
    11e0:	20 81       	ld	r18, Z
    11e2:	42 2f       	mov	r20, r18
    11e4:	44 0f       	add	r20, r20
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
    11ea:	29 85       	ldd	r18, Y+9	; 0x09
    11ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ee:	2e 5f       	subi	r18, 0xFE	; 254
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	2e 5f       	subi	r18, 0xFE	; 254
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	22 95       	swap	r18
    11fc:	26 95       	lsr	r18
    11fe:	27 70       	andi	r18, 0x07	; 7
    1200:	24 0f       	add	r18, r20
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	82 ef       	ldi	r24, 0xF2	; 242
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	29 85       	ldd	r18, Y+9	; 0x09
    120c:	3a 85       	ldd	r19, Y+10	; 0x0a
    120e:	2e 5f       	subi	r18, 0xFE	; 254
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	2e 5f       	subi	r18, 0xFE	; 254
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	f9 01       	movw	r30, r18
    1218:	20 81       	ld	r18, Z
    121a:	42 2f       	mov	r20, r18
    121c:	44 0f       	add	r20, r20
    121e:	44 0f       	add	r20, r20
    1220:	44 0f       	add	r20, r20
    1222:	29 85       	ldd	r18, Y+9	; 0x09
    1224:	3a 85       	ldd	r19, Y+10	; 0x0a
    1226:	2e 5f       	subi	r18, 0xFE	; 254
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	f9 01       	movw	r30, r18
    1230:	20 81       	ld	r18, Z
    1232:	22 95       	swap	r18
    1234:	26 95       	lsr	r18
    1236:	27 70       	andi	r18, 0x07	; 7
    1238:	24 0f       	add	r18, r20
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
    123e:	81 ef       	ldi	r24, 0xF1	; 241
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	29 85       	ldd	r18, Y+9	; 0x09
    1244:	3a 85       	ldd	r19, Y+10	; 0x0a
    1246:	2e 5f       	subi	r18, 0xFE	; 254
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	2f 5f       	subi	r18, 0xFF	; 255
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	f9 01       	movw	r30, r18
    1250:	20 81       	ld	r18, Z
    1252:	42 2f       	mov	r20, r18
    1254:	44 0f       	add	r20, r20
    1256:	44 0f       	add	r20, r20
    1258:	44 0f       	add	r20, r20
    125a:	29 85       	ldd	r18, Y+9	; 0x09
    125c:	3a 85       	ldd	r19, Y+10	; 0x0a
    125e:	2e 5f       	subi	r18, 0xFE	; 254
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	22 95       	swap	r18
    1268:	26 95       	lsr	r18
    126a:	27 70       	andi	r18, 0x07	; 7
    126c:	24 0f       	add	r18, r20
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
    1272:	80 ef       	ldi	r24, 0xF0	; 240
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	29 85       	ldd	r18, Y+9	; 0x09
    1278:	3a 85       	ldd	r19, Y+10	; 0x0a
    127a:	2e 5f       	subi	r18, 0xFE	; 254
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	22 0f       	add	r18, r18
    1284:	22 0f       	add	r18, r18
    1286:	22 0f       	add	r18, r18
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
    128c:	8f ee       	ldi	r24, 0xEF	; 239
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	2f ee       	ldi	r18, 0xEF	; 239
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	20 61       	ori	r18, 0x10	; 16
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
    129e:	30 c0       	rjmp	.+96     	; 0x1300 <__stack+0xa01>
          else              { Can_set_std_id(cmd->id.std);}
    12a0:	83 ef       	ldi	r24, 0xF3	; 243
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	29 85       	ldd	r18, Y+9	; 0x09
    12a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a8:	2e 5f       	subi	r18, 0xFE	; 254
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	2f 5f       	subi	r18, 0xFF	; 255
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	42 2f       	mov	r20, r18
    12b6:	42 95       	swap	r20
    12b8:	44 0f       	add	r20, r20
    12ba:	40 7e       	andi	r20, 0xE0	; 224
    12bc:	29 85       	ldd	r18, Y+9	; 0x09
    12be:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c0:	2e 5f       	subi	r18, 0xFE	; 254
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	f9 01       	movw	r30, r18
    12c6:	20 81       	ld	r18, Z
    12c8:	26 95       	lsr	r18
    12ca:	26 95       	lsr	r18
    12cc:	26 95       	lsr	r18
    12ce:	24 0f       	add	r18, r20
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 83       	st	Z, r18
    12d4:	82 ef       	ldi	r24, 0xF2	; 242
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	29 85       	ldd	r18, Y+9	; 0x09
    12da:	3a 85       	ldd	r19, Y+10	; 0x0a
    12dc:	2e 5f       	subi	r18, 0xFE	; 254
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	f9 01       	movw	r30, r18
    12e2:	20 81       	ld	r18, Z
    12e4:	22 95       	swap	r18
    12e6:	22 0f       	add	r18, r18
    12e8:	20 7e       	andi	r18, 0xE0	; 224
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	8f ee       	ldi	r24, 0xEF	; 239
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	2f ee       	ldi	r18, 0xEF	; 239
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	f9 01       	movw	r30, r18
    12f8:	20 81       	ld	r18, Z
    12fa:	2f 7e       	andi	r18, 0xEF	; 239
    12fc:	fc 01       	movw	r30, r24
    12fe:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	dc 01       	movw	r26, r24
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	af 83       	std	Y+7, r26	; 0x07
    130c:	b8 87       	std	Y+8, r27	; 0x08
    130e:	27 ef       	ldi	r18, 0xF7	; 247
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	ce 01       	movw	r24, r28
    1314:	05 96       	adiw	r24, 0x05	; 5
    1316:	03 96       	adiw	r24, 0x03	; 3
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	44 0f       	add	r20, r20
    1320:	44 0f       	add	r20, r20
    1322:	44 0f       	add	r20, r20
    1324:	ce 01       	movw	r24, r28
    1326:	05 96       	adiw	r24, 0x05	; 5
    1328:	02 96       	adiw	r24, 0x02	; 2
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	82 95       	swap	r24
    1330:	86 95       	lsr	r24
    1332:	87 70       	andi	r24, 0x07	; 7
    1334:	84 0f       	add	r24, r20
    1336:	f9 01       	movw	r30, r18
    1338:	80 83       	st	Z, r24
    133a:	26 ef       	ldi	r18, 0xF6	; 246
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	ce 01       	movw	r24, r28
    1340:	05 96       	adiw	r24, 0x05	; 5
    1342:	02 96       	adiw	r24, 0x02	; 2
    1344:	fc 01       	movw	r30, r24
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	44 0f       	add	r20, r20
    134c:	44 0f       	add	r20, r20
    134e:	44 0f       	add	r20, r20
    1350:	ce 01       	movw	r24, r28
    1352:	05 96       	adiw	r24, 0x05	; 5
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	82 95       	swap	r24
    135c:	86 95       	lsr	r24
    135e:	87 70       	andi	r24, 0x07	; 7
    1360:	84 0f       	add	r24, r20
    1362:	f9 01       	movw	r30, r18
    1364:	80 83       	st	Z, r24
    1366:	25 ef       	ldi	r18, 0xF5	; 245
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	ce 01       	movw	r24, r28
    136c:	05 96       	adiw	r24, 0x05	; 5
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	fc 01       	movw	r30, r24
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	44 0f       	add	r20, r20
    1378:	44 0f       	add	r20, r20
    137a:	44 0f       	add	r20, r20
    137c:	ce 01       	movw	r24, r28
    137e:	05 96       	adiw	r24, 0x05	; 5
    1380:	fc 01       	movw	r30, r24
    1382:	80 81       	ld	r24, Z
    1384:	82 95       	swap	r24
    1386:	86 95       	lsr	r24
    1388:	87 70       	andi	r24, 0x07	; 7
    138a:	84 0f       	add	r24, r20
    138c:	f9 01       	movw	r30, r18
    138e:	80 83       	st	Z, r24
    1390:	84 ef       	ldi	r24, 0xF4	; 244
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9e 01       	movw	r18, r28
    1396:	2b 5f       	subi	r18, 0xFB	; 251
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	f9 01       	movw	r30, r18
    139c:	20 81       	ld	r18, Z
    139e:	22 0f       	add	r18, r18
    13a0:	22 0f       	add	r18, r18
    13a2:	22 0f       	add	r18, r18
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    13a8:	8f ee       	ldi	r24, 0xEF	; 239
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	2f ee       	ldi	r18, 0xEF	; 239
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	f9 01       	movw	r30, r18
    13b2:	40 81       	ld	r20, Z
    13b4:	29 85       	ldd	r18, Y+9	; 0x09
    13b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b8:	f9 01       	movw	r30, r18
    13ba:	26 81       	ldd	r18, Z+6	; 0x06
    13bc:	24 2b       	or	r18, r20
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	fc 01       	movw	r30, r24
    13ca:	22 87       	std	Z+10, r18	; 0x0a
    13cc:	84 ef       	ldi	r24, 0xF4	; 244
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	24 ef       	ldi	r18, 0xF4	; 244
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	f9 01       	movw	r30, r18
    13d6:	20 81       	ld	r18, Z
    13d8:	24 60       	ori	r18, 0x04	; 4
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
    13de:	80 ef       	ldi	r24, 0xF0	; 240
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	20 ef       	ldi	r18, 0xF0	; 240
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	24 60       	ori	r18, 0x04	; 4
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
          Can_clear_rplv();
    13f0:	8f ee       	ldi	r24, 0xEF	; 239
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	2f ee       	ldi	r18, 0xEF	; 239
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	f9 01       	movw	r30, r18
    13fa:	20 81       	ld	r18, Z
    13fc:	2f 7d       	andi	r18, 0xDF	; 223
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
          Can_set_idemsk();
    1402:	84 ef       	ldi	r24, 0xF4	; 244
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	24 ef       	ldi	r18, 0xF4	; 244
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	21 60       	ori	r18, 0x01	; 1
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18
          Can_config_rx();       
    1414:	8f ee       	ldi	r24, 0xEF	; 239
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	2f ee       	ldi	r18, 0xEF	; 239
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	2f 73       	andi	r18, 0x3F	; 63
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
    1426:	8f ee       	ldi	r24, 0xEF	; 239
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	2f ee       	ldi	r18, 0xEF	; 239
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	20 68       	ori	r18, 0x80	; 128
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
          break;
    1438:	1c c2       	rjmp	.+1080   	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <__stack+0xb65>
    143e:	8a ef       	ldi	r24, 0xFA	; 250
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	29 85       	ldd	r18, Y+9	; 0x09
    1444:	3a 85       	ldd	r19, Y+10	; 0x0a
    1446:	f9 01       	movw	r30, r18
    1448:	47 81       	ldd	r20, Z+7	; 0x07
    144a:	50 85       	ldd	r21, Z+8	; 0x08
    144c:	29 81       	ldd	r18, Y+1	; 0x01
    144e:	22 2f       	mov	r18, r18
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	24 0f       	add	r18, r20
    1454:	35 1f       	adc	r19, r21
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	89 85       	ldd	r24, Y+9	; 0x09
    1466:	9a 85       	ldd	r25, Y+10	; 0x0a
    1468:	fc 01       	movw	r30, r24
    146a:	96 81       	ldd	r25, Z+6	; 0x06
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	89 17       	cp	r24, r25
    1470:	30 f3       	brcs	.-52     	; 0x143e <__stack+0xb3f>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1472:	1d 82       	std	Y+5, r1	; 0x05
    1474:	1e 82       	std	Y+6, r1	; 0x06
    1476:	1f 82       	std	Y+7, r1	; 0x07
    1478:	18 86       	std	Y+8, r1	; 0x08
    147a:	27 ef       	ldi	r18, 0xF7	; 247
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	ce 01       	movw	r24, r28
    1480:	05 96       	adiw	r24, 0x05	; 5
    1482:	03 96       	adiw	r24, 0x03	; 3
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	44 0f       	add	r20, r20
    148c:	44 0f       	add	r20, r20
    148e:	44 0f       	add	r20, r20
    1490:	ce 01       	movw	r24, r28
    1492:	05 96       	adiw	r24, 0x05	; 5
    1494:	02 96       	adiw	r24, 0x02	; 2
    1496:	fc 01       	movw	r30, r24
    1498:	80 81       	ld	r24, Z
    149a:	82 95       	swap	r24
    149c:	86 95       	lsr	r24
    149e:	87 70       	andi	r24, 0x07	; 7
    14a0:	84 0f       	add	r24, r20
    14a2:	f9 01       	movw	r30, r18
    14a4:	80 83       	st	Z, r24
    14a6:	26 ef       	ldi	r18, 0xF6	; 246
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ce 01       	movw	r24, r28
    14ac:	05 96       	adiw	r24, 0x05	; 5
    14ae:	02 96       	adiw	r24, 0x02	; 2
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	44 0f       	add	r20, r20
    14b8:	44 0f       	add	r20, r20
    14ba:	44 0f       	add	r20, r20
    14bc:	ce 01       	movw	r24, r28
    14be:	05 96       	adiw	r24, 0x05	; 5
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	fc 01       	movw	r30, r24
    14c4:	80 81       	ld	r24, Z
    14c6:	82 95       	swap	r24
    14c8:	86 95       	lsr	r24
    14ca:	87 70       	andi	r24, 0x07	; 7
    14cc:	84 0f       	add	r24, r20
    14ce:	f9 01       	movw	r30, r18
    14d0:	80 83       	st	Z, r24
    14d2:	25 ef       	ldi	r18, 0xF5	; 245
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	ce 01       	movw	r24, r28
    14d8:	05 96       	adiw	r24, 0x05	; 5
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	fc 01       	movw	r30, r24
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	44 0f       	add	r20, r20
    14e4:	44 0f       	add	r20, r20
    14e6:	44 0f       	add	r20, r20
    14e8:	ce 01       	movw	r24, r28
    14ea:	05 96       	adiw	r24, 0x05	; 5
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	82 95       	swap	r24
    14f2:	86 95       	lsr	r24
    14f4:	87 70       	andi	r24, 0x07	; 7
    14f6:	84 0f       	add	r24, r20
    14f8:	f9 01       	movw	r30, r18
    14fa:	80 83       	st	Z, r24
    14fc:	84 ef       	ldi	r24, 0xF4	; 244
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9e 01       	movw	r18, r28
    1502:	2b 5f       	subi	r18, 0xFB	; 251
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	f9 01       	movw	r30, r18
    1508:	20 81       	ld	r18, Z
    150a:	22 0f       	add	r18, r18
    150c:	22 0f       	add	r18, r18
    150e:	22 0f       	add	r18, r18
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1514:	8f ee       	ldi	r24, 0xEF	; 239
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	2f ee       	ldi	r18, 0xEF	; 239
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	40 81       	ld	r20, Z
    1520:	29 85       	ldd	r18, Y+9	; 0x09
    1522:	3a 85       	ldd	r19, Y+10	; 0x0a
    1524:	f9 01       	movw	r30, r18
    1526:	26 81       	ldd	r18, Z+6	; 0x06
    1528:	24 2b       	or	r18, r20
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	fc 01       	movw	r30, r24
    1536:	22 87       	std	Z+10, r18	; 0x0a
    1538:	84 ef       	ldi	r24, 0xF4	; 244
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	24 ef       	ldi	r18, 0xF4	; 244
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	f9 01       	movw	r30, r18
    1542:	20 81       	ld	r18, Z
    1544:	24 60       	ori	r18, 0x04	; 4
    1546:	fc 01       	movw	r30, r24
    1548:	20 83       	st	Z, r18
    154a:	80 ef       	ldi	r24, 0xF0	; 240
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	20 ef       	ldi	r18, 0xF0	; 240
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	f9 01       	movw	r30, r18
    1554:	20 81       	ld	r18, Z
    1556:	24 60       	ori	r18, 0x04	; 4
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
          Can_set_rplv();
    155c:	8f ee       	ldi	r24, 0xEF	; 239
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	2f ee       	ldi	r18, 0xEF	; 239
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	f9 01       	movw	r30, r18
    1566:	20 81       	ld	r18, Z
    1568:	20 62       	ori	r18, 0x20	; 32
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
          Can_clear_idemsk();
    156e:	84 ef       	ldi	r24, 0xF4	; 244
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	24 ef       	ldi	r18, 0xF4	; 244
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	20 81       	ld	r18, Z
    157a:	2e 7f       	andi	r18, 0xFE	; 254
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
          Can_config_rx();       
    1580:	8f ee       	ldi	r24, 0xEF	; 239
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	2f ee       	ldi	r18, 0xEF	; 239
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	f9 01       	movw	r30, r18
    158a:	20 81       	ld	r18, Z
    158c:	2f 73       	andi	r18, 0x3F	; 63
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
    1592:	8f ee       	ldi	r24, 0xEF	; 239
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	2f ee       	ldi	r18, 0xEF	; 239
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	20 68       	ori	r18, 0x80	; 128
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
          break;
    15a4:	66 c1       	rjmp	.+716    	; 0x1872 <__stack+0xf73>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	fc 01       	movw	r30, r24
    15ac:	83 85       	ldd	r24, Z+11	; 0x0b
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <__stack+0xcb5>
    15b2:	69 c0       	rjmp	.+210    	; 0x1686 <__stack+0xd87>
    15b4:	83 ef       	ldi	r24, 0xF3	; 243
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	29 85       	ldd	r18, Y+9	; 0x09
    15ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    15bc:	2e 5f       	subi	r18, 0xFE	; 254
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	2d 5f       	subi	r18, 0xFD	; 253
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	f9 01       	movw	r30, r18
    15c6:	20 81       	ld	r18, Z
    15c8:	42 2f       	mov	r20, r18
    15ca:	44 0f       	add	r20, r20
    15cc:	44 0f       	add	r20, r20
    15ce:	44 0f       	add	r20, r20
    15d0:	29 85       	ldd	r18, Y+9	; 0x09
    15d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15d4:	2e 5f       	subi	r18, 0xFE	; 254
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	2e 5f       	subi	r18, 0xFE	; 254
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	22 95       	swap	r18
    15e2:	26 95       	lsr	r18
    15e4:	27 70       	andi	r18, 0x07	; 7
    15e6:	24 0f       	add	r18, r20
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
    15ec:	82 ef       	ldi	r24, 0xF2	; 242
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	29 85       	ldd	r18, Y+9	; 0x09
    15f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f4:	2e 5f       	subi	r18, 0xFE	; 254
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	2e 5f       	subi	r18, 0xFE	; 254
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	f9 01       	movw	r30, r18
    15fe:	20 81       	ld	r18, Z
    1600:	42 2f       	mov	r20, r18
    1602:	44 0f       	add	r20, r20
    1604:	44 0f       	add	r20, r20
    1606:	44 0f       	add	r20, r20
    1608:	29 85       	ldd	r18, Y+9	; 0x09
    160a:	3a 85       	ldd	r19, Y+10	; 0x0a
    160c:	2e 5f       	subi	r18, 0xFE	; 254
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	2f 5f       	subi	r18, 0xFF	; 255
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	f9 01       	movw	r30, r18
    1616:	20 81       	ld	r18, Z
    1618:	22 95       	swap	r18
    161a:	26 95       	lsr	r18
    161c:	27 70       	andi	r18, 0x07	; 7
    161e:	24 0f       	add	r18, r20
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
    1624:	81 ef       	ldi	r24, 0xF1	; 241
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	29 85       	ldd	r18, Y+9	; 0x09
    162a:	3a 85       	ldd	r19, Y+10	; 0x0a
    162c:	2e 5f       	subi	r18, 0xFE	; 254
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	f9 01       	movw	r30, r18
    1636:	20 81       	ld	r18, Z
    1638:	42 2f       	mov	r20, r18
    163a:	44 0f       	add	r20, r20
    163c:	44 0f       	add	r20, r20
    163e:	44 0f       	add	r20, r20
    1640:	29 85       	ldd	r18, Y+9	; 0x09
    1642:	3a 85       	ldd	r19, Y+10	; 0x0a
    1644:	2e 5f       	subi	r18, 0xFE	; 254
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	f9 01       	movw	r30, r18
    164a:	20 81       	ld	r18, Z
    164c:	22 95       	swap	r18
    164e:	26 95       	lsr	r18
    1650:	27 70       	andi	r18, 0x07	; 7
    1652:	24 0f       	add	r18, r20
    1654:	fc 01       	movw	r30, r24
    1656:	20 83       	st	Z, r18
    1658:	80 ef       	ldi	r24, 0xF0	; 240
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	29 85       	ldd	r18, Y+9	; 0x09
    165e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1660:	2e 5f       	subi	r18, 0xFE	; 254
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	22 0f       	add	r18, r18
    166a:	22 0f       	add	r18, r18
    166c:	22 0f       	add	r18, r18
    166e:	fc 01       	movw	r30, r24
    1670:	20 83       	st	Z, r18
    1672:	8f ee       	ldi	r24, 0xEF	; 239
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	2f ee       	ldi	r18, 0xEF	; 239
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	20 61       	ori	r18, 0x10	; 16
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
    1684:	30 c0       	rjmp	.+96     	; 0x16e6 <__stack+0xde7>
          else              { Can_set_std_id(cmd->id.std);}
    1686:	83 ef       	ldi	r24, 0xF3	; 243
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	29 85       	ldd	r18, Y+9	; 0x09
    168c:	3a 85       	ldd	r19, Y+10	; 0x0a
    168e:	2e 5f       	subi	r18, 0xFE	; 254
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	2f 5f       	subi	r18, 0xFF	; 255
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	f9 01       	movw	r30, r18
    1698:	20 81       	ld	r18, Z
    169a:	42 2f       	mov	r20, r18
    169c:	42 95       	swap	r20
    169e:	44 0f       	add	r20, r20
    16a0:	40 7e       	andi	r20, 0xE0	; 224
    16a2:	29 85       	ldd	r18, Y+9	; 0x09
    16a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a6:	2e 5f       	subi	r18, 0xFE	; 254
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	f9 01       	movw	r30, r18
    16ac:	20 81       	ld	r18, Z
    16ae:	26 95       	lsr	r18
    16b0:	26 95       	lsr	r18
    16b2:	26 95       	lsr	r18
    16b4:	24 0f       	add	r18, r20
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
    16ba:	82 ef       	ldi	r24, 0xF2	; 242
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	29 85       	ldd	r18, Y+9	; 0x09
    16c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c2:	2e 5f       	subi	r18, 0xFE	; 254
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	f9 01       	movw	r30, r18
    16c8:	20 81       	ld	r18, Z
    16ca:	22 95       	swap	r18
    16cc:	22 0f       	add	r18, r18
    16ce:	20 7e       	andi	r18, 0xE0	; 224
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18
    16d4:	8f ee       	ldi	r24, 0xEF	; 239
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	2f ee       	ldi	r18, 0xEF	; 239
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	2f 7e       	andi	r18, 0xEF	; 239
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	13 c0       	rjmp	.+38     	; 0x1710 <__stack+0xe11>
    16ea:	8a ef       	ldi	r24, 0xFA	; 250
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	29 85       	ldd	r18, Y+9	; 0x09
    16f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16f2:	f9 01       	movw	r30, r18
    16f4:	47 81       	ldd	r20, Z+7	; 0x07
    16f6:	50 85       	ldd	r21, Z+8	; 0x08
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	22 2f       	mov	r18, r18
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	24 0f       	add	r18, r20
    1700:	35 1f       	adc	r19, r21
    1702:	f9 01       	movw	r30, r18
    1704:	20 81       	ld	r18, Z
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	fc 01       	movw	r30, r24
    1716:	96 81       	ldd	r25, Z+6	; 0x06
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	89 17       	cp	r24, r25
    171c:	30 f3       	brcs	.-52     	; 0x16ea <__stack+0xdeb>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	dc 01       	movw	r26, r24
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	af 83       	std	Y+7, r26	; 0x07
    172a:	b8 87       	std	Y+8, r27	; 0x08
    172c:	27 ef       	ldi	r18, 0xF7	; 247
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	ce 01       	movw	r24, r28
    1732:	05 96       	adiw	r24, 0x05	; 5
    1734:	03 96       	adiw	r24, 0x03	; 3
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	44 0f       	add	r20, r20
    173e:	44 0f       	add	r20, r20
    1740:	44 0f       	add	r20, r20
    1742:	ce 01       	movw	r24, r28
    1744:	05 96       	adiw	r24, 0x05	; 5
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	82 95       	swap	r24
    174e:	86 95       	lsr	r24
    1750:	87 70       	andi	r24, 0x07	; 7
    1752:	84 0f       	add	r24, r20
    1754:	f9 01       	movw	r30, r18
    1756:	80 83       	st	Z, r24
    1758:	26 ef       	ldi	r18, 0xF6	; 246
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	05 96       	adiw	r24, 0x05	; 5
    1760:	02 96       	adiw	r24, 0x02	; 2
    1762:	fc 01       	movw	r30, r24
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	44 0f       	add	r20, r20
    176a:	44 0f       	add	r20, r20
    176c:	44 0f       	add	r20, r20
    176e:	ce 01       	movw	r24, r28
    1770:	05 96       	adiw	r24, 0x05	; 5
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	fc 01       	movw	r30, r24
    1776:	80 81       	ld	r24, Z
    1778:	82 95       	swap	r24
    177a:	86 95       	lsr	r24
    177c:	87 70       	andi	r24, 0x07	; 7
    177e:	84 0f       	add	r24, r20
    1780:	f9 01       	movw	r30, r18
    1782:	80 83       	st	Z, r24
    1784:	25 ef       	ldi	r18, 0xF5	; 245
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	ce 01       	movw	r24, r28
    178a:	05 96       	adiw	r24, 0x05	; 5
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	44 0f       	add	r20, r20
    1796:	44 0f       	add	r20, r20
    1798:	44 0f       	add	r20, r20
    179a:	ce 01       	movw	r24, r28
    179c:	05 96       	adiw	r24, 0x05	; 5
    179e:	fc 01       	movw	r30, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	82 95       	swap	r24
    17a4:	86 95       	lsr	r24
    17a6:	87 70       	andi	r24, 0x07	; 7
    17a8:	84 0f       	add	r24, r20
    17aa:	f9 01       	movw	r30, r18
    17ac:	80 83       	st	Z, r24
    17ae:	84 ef       	ldi	r24, 0xF4	; 244
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9e 01       	movw	r18, r28
    17b4:	2b 5f       	subi	r18, 0xFB	; 251
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	f9 01       	movw	r30, r18
    17ba:	20 81       	ld	r18, Z
    17bc:	22 0f       	add	r18, r18
    17be:	22 0f       	add	r18, r18
    17c0:	22 0f       	add	r18, r18
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17c6:	8f ee       	ldi	r24, 0xEF	; 239
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	2f ee       	ldi	r18, 0xEF	; 239
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	f9 01       	movw	r30, r18
    17d0:	40 81       	ld	r20, Z
    17d2:	29 85       	ldd	r18, Y+9	; 0x09
    17d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d6:	f9 01       	movw	r30, r18
    17d8:	26 81       	ldd	r18, Z+6	; 0x06
    17da:	24 2b       	or	r18, r20
    17dc:	fc 01       	movw	r30, r24
    17de:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	fc 01       	movw	r30, r24
    17e8:	22 87       	std	Z+10, r18	; 0x0a
    17ea:	84 ef       	ldi	r24, 0xF4	; 244
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	24 ef       	ldi	r18, 0xF4	; 244
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	f9 01       	movw	r30, r18
    17f4:	20 81       	ld	r18, Z
    17f6:	24 60       	ori	r18, 0x04	; 4
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
    17fc:	80 ef       	ldi	r24, 0xF0	; 240
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	20 ef       	ldi	r18, 0xF0	; 240
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	f9 01       	movw	r30, r18
    1806:	20 81       	ld	r18, Z
    1808:	24 60       	ori	r18, 0x04	; 4
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
          Can_set_rplv();
    180e:	8f ee       	ldi	r24, 0xEF	; 239
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	2f ee       	ldi	r18, 0xEF	; 239
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	f9 01       	movw	r30, r18
    1818:	20 81       	ld	r18, Z
    181a:	20 62       	ori	r18, 0x20	; 32
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
          Can_set_idemsk();
    1820:	84 ef       	ldi	r24, 0xF4	; 244
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	24 ef       	ldi	r18, 0xF4	; 244
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	f9 01       	movw	r30, r18
    182a:	20 81       	ld	r18, Z
    182c:	21 60       	ori	r18, 0x01	; 1
    182e:	fc 01       	movw	r30, r24
    1830:	20 83       	st	Z, r18
          Can_config_rx();       
    1832:	8f ee       	ldi	r24, 0xEF	; 239
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	2f ee       	ldi	r18, 0xEF	; 239
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	f9 01       	movw	r30, r18
    183c:	20 81       	ld	r18, Z
    183e:	2f 73       	andi	r18, 0x3F	; 63
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
    1844:	8f ee       	ldi	r24, 0xEF	; 239
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	2f ee       	ldi	r18, 0xEF	; 239
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	20 68       	ori	r18, 0x80	; 128
    1852:	fc 01       	movw	r30, r24
    1854:	20 83       	st	Z, r18
          break;
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <__stack+0xf73>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	fc 01       	movw	r30, r24
    185e:	11 86       	std	Z+9, r1	; 0x09
          break;
    1860:	00 00       	nop
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <__stack+0xf73>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	2f e1       	ldi	r18, 0x1F	; 31
    186a:	fc 01       	movw	r30, r24
    186c:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <__stack+0xf75>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1872:	80 e0       	ldi	r24, 0x00	; 0
}
    1874:	2a 96       	adiw	r28, 0x0a	; 10
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	00 d0       	rcall	.+0      	; 0x188c <can_get_status+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <can_get_status+0x8>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	fc 01       	movw	r30, r24
    189c:	81 85       	ldd	r24, Z+9	; 0x09
    189e:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 23       	and	r24, r24
    18a4:	31 f0       	breq	.+12     	; 0x18b2 <can_get_status+0x2c>
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	8f 31       	cpi	r24, 0x1F	; 31
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <can_get_status+0x2c>
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	8f 3f       	cpi	r24, 0xFF	; 255
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	14 c1       	rjmp	.+552    	; 0x1ade <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    18b6:	8d ee       	ldi	r24, 0xED	; 237
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	f9 01       	movw	r30, r18
    18c0:	20 81       	ld	r18, Z
    18c2:	22 95       	swap	r18
    18c4:	20 7f       	andi	r18, 0xF0	; 240
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    18ca:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	80 32       	cpi	r24, 0x20	; 32
    18d8:	91 05       	cpc	r25, r1
    18da:	89 f0       	breq	.+34     	; 0x18fe <can_get_status+0x78>
    18dc:	81 32       	cpi	r24, 0x21	; 33
    18de:	91 05       	cpc	r25, r1
    18e0:	1c f4       	brge	.+6      	; 0x18e8 <can_get_status+0x62>
    18e2:	89 2b       	or	r24, r25
    18e4:	49 f0       	breq	.+18     	; 0x18f8 <can_get_status+0x72>
    18e6:	e5 c0       	rjmp	.+458    	; 0x1ab2 <can_get_status+0x22c>
    18e8:	80 34       	cpi	r24, 0x40	; 64
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <can_get_status+0x6a>
    18ee:	cd c0       	rjmp	.+410    	; 0x1a8a <can_get_status+0x204>
    18f0:	80 3a       	cpi	r24, 0xA0	; 160
    18f2:	91 05       	cpc	r25, r1
    18f4:	21 f0       	breq	.+8      	; 0x18fe <can_get_status+0x78>
    18f6:	dd c0       	rjmp	.+442    	; 0x1ab2 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
            break;
    18fc:	ef c0       	rjmp	.+478    	; 0x1adc <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    18fe:	8f ee       	ldi	r24, 0xEF	; 239
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fc 01       	movw	r30, r24
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	2f 70       	andi	r18, 0x0F	; 15
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	fc 01       	movw	r30, r24
    1910:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	87 81       	ldd	r24, Z+7	; 0x07
    191a:	90 85       	ldd	r25, Z+8	; 0x08
    191c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1920:	80 ef       	ldi	r24, 0xF0	; 240
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	80 81       	ld	r24, Z
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	84 70       	andi	r24, 0x04	; 4
    192e:	99 27       	eor	r25, r25
    1930:	95 95       	asr	r25
    1932:	87 95       	ror	r24
    1934:	95 95       	asr	r25
    1936:	87 95       	ror	r24
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	89 2b       	or	r24, r25
    193c:	09 f4       	brne	.+2      	; 0x1940 <can_get_status+0xba>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	fc 01       	movw	r30, r24
    1946:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1948:	8f ee       	ldi	r24, 0xEF	; 239
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	fc 01       	movw	r30, r24
    194e:	80 81       	ld	r24, Z
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	80 71       	andi	r24, 0x10	; 16
    1956:	99 27       	eor	r25, r25
    1958:	95 95       	asr	r25
    195a:	87 95       	ror	r24
    195c:	95 95       	asr	r25
    195e:	87 95       	ror	r24
    1960:	95 95       	asr	r25
    1962:	87 95       	ror	r24
    1964:	95 95       	asr	r25
    1966:	87 95       	ror	r24
    1968:	89 2b       	or	r24, r25
    196a:	09 f4       	brne	.+2      	; 0x196e <can_get_status+0xe8>
    196c:	54 c0       	rjmp	.+168    	; 0x1a16 <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	fc 01       	movw	r30, r24
    1976:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	02 96       	adiw	r24, 0x02	; 2
    197e:	03 96       	adiw	r24, 0x03	; 3
    1980:	23 ef       	ldi	r18, 0xF3	; 243
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	20 81       	ld	r18, Z
    1988:	26 95       	lsr	r18
    198a:	26 95       	lsr	r18
    198c:	26 95       	lsr	r18
    198e:	fc 01       	movw	r30, r24
    1990:	20 83       	st	Z, r18
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	02 96       	adiw	r24, 0x02	; 2
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	22 ef       	ldi	r18, 0xF2	; 242
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	42 2f       	mov	r20, r18
    19a4:	46 95       	lsr	r20
    19a6:	46 95       	lsr	r20
    19a8:	46 95       	lsr	r20
    19aa:	23 ef       	ldi	r18, 0xF3	; 243
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	f9 01       	movw	r30, r18
    19b0:	20 81       	ld	r18, Z
    19b2:	22 95       	swap	r18
    19b4:	22 0f       	add	r18, r18
    19b6:	20 7e       	andi	r18, 0xE0	; 224
    19b8:	24 0f       	add	r18, r20
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	21 ef       	ldi	r18, 0xF1	; 241
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	f9 01       	movw	r30, r18
    19cc:	20 81       	ld	r18, Z
    19ce:	42 2f       	mov	r20, r18
    19d0:	46 95       	lsr	r20
    19d2:	46 95       	lsr	r20
    19d4:	46 95       	lsr	r20
    19d6:	22 ef       	ldi	r18, 0xF2	; 242
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	f9 01       	movw	r30, r18
    19dc:	20 81       	ld	r18, Z
    19de:	22 95       	swap	r18
    19e0:	22 0f       	add	r18, r18
    19e2:	20 7e       	andi	r18, 0xE0	; 224
    19e4:	24 0f       	add	r18, r20
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	02 96       	adiw	r24, 0x02	; 2
    19f0:	20 ef       	ldi	r18, 0xF0	; 240
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	f9 01       	movw	r30, r18
    19f6:	20 81       	ld	r18, Z
    19f8:	42 2f       	mov	r20, r18
    19fa:	46 95       	lsr	r20
    19fc:	46 95       	lsr	r20
    19fe:	46 95       	lsr	r20
    1a00:	21 ef       	ldi	r18, 0xF1	; 241
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	f9 01       	movw	r30, r18
    1a06:	20 81       	ld	r18, Z
    1a08:	22 95       	swap	r18
    1a0a:	22 0f       	add	r18, r18
    1a0c:	20 7e       	andi	r18, 0xE0	; 224
    1a0e:	24 0f       	add	r18, r20
    1a10:	fc 01       	movw	r30, r24
    1a12:	20 83       	st	Z, r18
    1a14:	26 c0       	rjmp	.+76     	; 0x1a62 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	02 96       	adiw	r24, 0x02	; 2
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	23 ef       	ldi	r18, 0xF3	; 243
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	20 81       	ld	r18, Z
    1a2e:	22 95       	swap	r18
    1a30:	26 95       	lsr	r18
    1a32:	27 70       	andi	r18, 0x07	; 7
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	02 96       	adiw	r24, 0x02	; 2
    1a3e:	22 ef       	ldi	r18, 0xF2	; 242
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	f9 01       	movw	r30, r18
    1a44:	20 81       	ld	r18, Z
    1a46:	42 2f       	mov	r20, r18
    1a48:	42 95       	swap	r20
    1a4a:	46 95       	lsr	r20
    1a4c:	47 70       	andi	r20, 0x07	; 7
    1a4e:	23 ef       	ldi	r18, 0xF3	; 243
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	22 0f       	add	r18, r18
    1a58:	22 0f       	add	r18, r18
    1a5a:	22 0f       	add	r18, r18
    1a5c:	24 0f       	add	r18, r20
    1a5e:	fc 01       	movw	r30, r24
    1a60:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	2a 81       	ldd	r18, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a6c:	8f ee       	ldi	r24, 0xEF	; 239
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	2f ee       	ldi	r18, 0xEF	; 239
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	f9 01       	movw	r30, r18
    1a76:	20 81       	ld	r18, Z
    1a78:	2f 73       	andi	r18, 0x3F	; 63
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a7e:	8e ee       	ldi	r24, 0xEE	; 238
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	fc 01       	movw	r30, r24
    1a84:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a86:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a88:	29 c0       	rjmp	.+82     	; 0x1adc <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a90:	fc 01       	movw	r30, r24
    1a92:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a94:	8f ee       	ldi	r24, 0xEF	; 239
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	2f ee       	ldi	r18, 0xEF	; 239
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	2f 73       	andi	r18, 0x3F	; 63
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1aa6:	8e ee       	ldi	r24, 0xEE	; 238
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	fc 01       	movw	r30, r24
    1aac:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1aae:	19 82       	std	Y+1, r1	; 0x01
            break;
    1ab0:	15 c0       	rjmp	.+42     	; 0x1adc <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1abc:	8f ee       	ldi	r24, 0xEF	; 239
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	2f ee       	ldi	r18, 0xEF	; 239
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	20 81       	ld	r18, Z
    1ac8:	2f 73       	andi	r18, 0x3F	; 63
    1aca:	fc 01       	movw	r30, r24
    1acc:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ace:	8e ee       	ldi	r24, 0xEE	; 238
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	89 83       	std	Y+1, r24	; 0x01
            break;
    1ada:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <__vector_18>:

ISR (CAN_INT_vect)
{
    1aec:	1f 92       	push	r1
    1aee:	0f 92       	push	r0
    1af0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	1f 92       	push	r1
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
	uint8_t tmpPage = 0;
    1b1e:	19 82       	std	Y+1, r1	; 0x01
	
	// st_cmd_t cmd;
	
	tmpPage = CANPAGE;				/* save current mob */
    1b20:	8d ee       	ldi	r24, 0xED	; 237
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	fc 01       	movw	r30, r24
    1b26:	80 81       	ld	r24, Z
    1b28:	89 83       	std	Y+1, r24	; 0x01
	CANPAGE = CANHPMOB & 0xF0;		/* selects MOB with highest priority interrupt */
    1b2a:	8d ee       	ldi	r24, 0xED	; 237
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	2c ee       	ldi	r18, 0xEC	; 236
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	f9 01       	movw	r30, r18
    1b34:	20 81       	ld	r18, Z
    1b36:	20 7f       	andi	r18, 0xF0	; 240
    1b38:	fc 01       	movw	r30, r24
    1b3a:	20 83       	st	Z, r18

	if (CANSTMOB & (1 << RXOK))
    1b3c:	8e ee       	ldi	r24, 0xEE	; 238
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	80 72       	andi	r24, 0x20	; 32
    1b4a:	99 27       	eor	r25, r25
    1b4c:	89 2b       	or	r24, r25
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <__vector_18+0x66>
    1b50:	65 c1       	rjmp	.+714    	; 0x1e1c <__vector_18+0x330>
	{
		if (Can_get_ide()) // if extended frame
    1b52:	8f ee       	ldi	r24, 0xEF	; 239
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	80 71       	andi	r24, 0x10	; 16
    1b60:	99 27       	eor	r25, r25
    1b62:	95 95       	asr	r25
    1b64:	87 95       	ror	r24
    1b66:	95 95       	asr	r25
    1b68:	87 95       	ror	r24
    1b6a:	95 95       	asr	r25
    1b6c:	87 95       	ror	r24
    1b6e:	95 95       	asr	r25
    1b70:	87 95       	ror	r24
    1b72:	89 2b       	or	r24, r25
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <__vector_18+0x8c>
    1b76:	95 c0       	rjmp	.+298    	; 0x1ca2 <__vector_18+0x1b6>
		{
			can_receive_buffer[iPtr].ctrl.ide = 1;
    1b78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	c9 01       	movw	r24, r18
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	82 5f       	subi	r24, 0xF2	; 242
    1b94:	9e 4f       	sbci	r25, 0xFE	; 254
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
			Can_get_ext_id(can_receive_buffer[iPtr].id.ext);
    1b9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	82 0f       	add	r24, r18
    1bac:	93 1f       	adc	r25, r19
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	02 96       	adiw	r24, 0x02	; 2
    1bb8:	8d 5f       	subi	r24, 0xFD	; 253
    1bba:	9e 4f       	sbci	r25, 0xFE	; 254
    1bbc:	03 96       	adiw	r24, 0x03	; 3
    1bbe:	23 ef       	ldi	r18, 0xF3	; 243
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	20 81       	ld	r18, Z
    1bc6:	26 95       	lsr	r18
    1bc8:	26 95       	lsr	r18
    1bca:	26 95       	lsr	r18
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
    1bd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	c9 01       	movw	r24, r18
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	82 0f       	add	r24, r18
    1be0:	93 1f       	adc	r25, r19
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	02 96       	adiw	r24, 0x02	; 2
    1bec:	8d 5f       	subi	r24, 0xFD	; 253
    1bee:	9e 4f       	sbci	r25, 0xFE	; 254
    1bf0:	02 96       	adiw	r24, 0x02	; 2
    1bf2:	22 ef       	ldi	r18, 0xF2	; 242
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	42 2f       	mov	r20, r18
    1bfc:	46 95       	lsr	r20
    1bfe:	46 95       	lsr	r20
    1c00:	46 95       	lsr	r20
    1c02:	23 ef       	ldi	r18, 0xF3	; 243
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	22 95       	swap	r18
    1c0c:	22 0f       	add	r18, r18
    1c0e:	20 7e       	andi	r18, 0xE0	; 224
    1c10:	24 0f       	add	r18, r20
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
    1c16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	c9 01       	movw	r24, r18
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	82 0f       	add	r24, r18
    1c26:	93 1f       	adc	r25, r19
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	02 96       	adiw	r24, 0x02	; 2
    1c32:	8d 5f       	subi	r24, 0xFD	; 253
    1c34:	9e 4f       	sbci	r25, 0xFE	; 254
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	21 ef       	ldi	r18, 0xF1	; 241
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	f9 01       	movw	r30, r18
    1c3e:	20 81       	ld	r18, Z
    1c40:	42 2f       	mov	r20, r18
    1c42:	46 95       	lsr	r20
    1c44:	46 95       	lsr	r20
    1c46:	46 95       	lsr	r20
    1c48:	22 ef       	ldi	r18, 0xF2	; 242
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	20 81       	ld	r18, Z
    1c50:	22 95       	swap	r18
    1c52:	22 0f       	add	r18, r18
    1c54:	20 7e       	andi	r18, 0xE0	; 224
    1c56:	24 0f       	add	r18, r20
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18
    1c5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	c9 01       	movw	r24, r18
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	82 0f       	add	r24, r18
    1c6c:	93 1f       	adc	r25, r19
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	02 96       	adiw	r24, 0x02	; 2
    1c78:	8d 5f       	subi	r24, 0xFD	; 253
    1c7a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c7c:	20 ef       	ldi	r18, 0xF0	; 240
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	f9 01       	movw	r30, r18
    1c82:	20 81       	ld	r18, Z
    1c84:	42 2f       	mov	r20, r18
    1c86:	46 95       	lsr	r20
    1c88:	46 95       	lsr	r20
    1c8a:	46 95       	lsr	r20
    1c8c:	21 ef       	ldi	r18, 0xF1	; 241
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 81       	ld	r18, Z
    1c94:	22 95       	swap	r18
    1c96:	22 0f       	add	r18, r18
    1c98:	20 7e       	andi	r18, 0xE0	; 224
    1c9a:	24 0f       	add	r18, r20
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	4d c0       	rjmp	.+154    	; 0x1d3c <__vector_18+0x250>
		}
		else // else standard frame
		{
			can_receive_buffer[iPtr].ctrl.ide = 0;
    1ca2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	c9 01       	movw	r24, r18
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	82 0f       	add	r24, r18
    1cb2:	93 1f       	adc	r25, r19
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	82 5f       	subi	r24, 0xF2	; 242
    1cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	10 82       	st	Z, r1
			Can_get_std_id(can_receive_buffer[iPtr].id.std);
    1cc4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	c9 01       	movw	r24, r18
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	82 0f       	add	r24, r18
    1cd4:	93 1f       	adc	r25, r19
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	02 96       	adiw	r24, 0x02	; 2
    1ce0:	8d 5f       	subi	r24, 0xFD	; 253
    1ce2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	23 ef       	ldi	r18, 0xF3	; 243
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	f9 01       	movw	r30, r18
    1cec:	20 81       	ld	r18, Z
    1cee:	22 95       	swap	r18
    1cf0:	26 95       	lsr	r18
    1cf2:	27 70       	andi	r18, 0x07	; 7
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18
    1cf8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	c9 01       	movw	r24, r18
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	8d 5f       	subi	r24, 0xFD	; 253
    1d16:	9e 4f       	sbci	r25, 0xFE	; 254
    1d18:	22 ef       	ldi	r18, 0xF2	; 242
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	20 81       	ld	r18, Z
    1d20:	42 2f       	mov	r20, r18
    1d22:	42 95       	swap	r20
    1d24:	46 95       	lsr	r20
    1d26:	47 70       	andi	r20, 0x07	; 7
    1d28:	23 ef       	ldi	r18, 0xF3	; 243
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	20 81       	ld	r18, Z
    1d30:	22 0f       	add	r18, r18
    1d32:	22 0f       	add	r18, r18
    1d34:	22 0f       	add	r18, r18
    1d36:	24 0f       	add	r18, r20
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
		}
		
		can_receive_buffer[iPtr].status = can_get_mob_status();
    1d3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d40:	08 2f       	mov	r16, r24
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    1d48:	28 2f       	mov	r18, r24
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	80 0f       	add	r24, r16
    1d52:	91 1f       	adc	r25, r17
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	84 5f       	subi	r24, 0xF4	; 244
    1d5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1d60:	fc 01       	movw	r30, r24
    1d62:	20 83       	st	Z, r18
		can_receive_buffer[iPtr].dlc = Can_get_dlc();
    1d64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8f ee       	ldi	r24, 0xEF	; 239
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	fc 01       	movw	r30, r24
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	4f 70       	andi	r20, 0x0F	; 15
    1d78:	c9 01       	movw	r24, r18
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	82 0f       	add	r24, r18
    1d80:	93 1f       	adc	r25, r19
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	87 5f       	subi	r24, 0xF7	; 247
    1d8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d8e:	fc 01       	movw	r30, r24
    1d90:	40 83       	st	Z, r20
		can_receive_buffer[iPtr].ctrl.rtr = Can_get_rtr();
    1d92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	80 ef       	ldi	r24, 0xF0	; 240
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	fc 01       	movw	r30, r24
    1da0:	80 81       	ld	r24, Z
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	84 70       	andi	r24, 0x04	; 4
    1da8:	99 27       	eor	r25, r25
    1daa:	95 95       	asr	r25
    1dac:	87 95       	ror	r24
    1dae:	95 95       	asr	r25
    1db0:	87 95       	ror	r24
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	89 2b       	or	r24, r25
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__vector_18+0x2ce>
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	c9 01       	movw	r24, r18
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	82 0f       	add	r24, r18
    1dc2:	93 1f       	adc	r25, r19
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	83 5f       	subi	r24, 0xF3	; 243
    1dce:	9e 4f       	sbci	r25, 0xFE	; 254
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	40 83       	st	Z, r20
		can_get_data(can_receive_buffer[iPtr].pt_data);
    1dd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	c9 01       	movw	r24, r18
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	86 5f       	subi	r24, 0xF6	; 246
    1df0:	9e 4f       	sbci	r25, 0xFE	; 254
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
		
		iPtr++;
    1dfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (iPtr == CAN_RECEIVED_BUFFER_SIZE)
    1e06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <__vector_18+0x326>
		{
			iPtr = 0;
    1e0e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		CANCDMOB = (1 << CONMOB1);
    1e12:	8f ee       	ldi	r24, 0xEF	; 239
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	20 e8       	ldi	r18, 0x80	; 128
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18
	}
	
	CANSTMOB = 0x00;
    1e1c:	8e ee       	ldi	r24, 0xEE	; 238
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	10 82       	st	Z, r1
	CANPAGE = tmpPage;
    1e24:	8d ee       	ldi	r24, 0xED	; 237
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	29 81       	ldd	r18, Y+1	; 0x01
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	20 83       	st	Z, r18
}
    1e2e:	00 00       	nop
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	ff 91       	pop	r31
    1e38:	ef 91       	pop	r30
    1e3a:	bf 91       	pop	r27
    1e3c:	af 91       	pop	r26
    1e3e:	9f 91       	pop	r25
    1e40:	8f 91       	pop	r24
    1e42:	7f 91       	pop	r23
    1e44:	6f 91       	pop	r22
    1e46:	5f 91       	pop	r21
    1e48:	4f 91       	pop	r20
    1e4a:	3f 91       	pop	r19
    1e4c:	2f 91       	pop	r18
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	0f 90       	pop	r0
    1e54:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_19>:

    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	00 00       	nop
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	0f 90       	pop	r0
    1e7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <can_network_init>:
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	1f 92       	push	r1
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	can_init(mode);
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	0e 94 41 01 	call	0x282	; 0x282 <can_init>
}
    1e96:	00 00       	nop
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <can_send_message>:

void can_send_message (void)
{
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	60 97       	sbiw	r28, 0x10	; 16
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
	pt_data[1] = 0xFF;
	message.pt_data = &pt_data[0];
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1ebc:	0d b7       	in	r16, 0x3d	; 61
    1ebe:	1e b7       	in	r17, 0x3e	; 62
{
	can_init(mode);
}

void can_send_message (void)
{
    1ec0:	8d b7       	in	r24, 0x3d	; 61
    1ec2:	9e b7       	in	r25, 0x3e	; 62
    1ec4:	7c 01       	movw	r14, r24
	st_cmd_t message;
	message.id.ext = 0x1AC;
    1ec6:	8c ea       	ldi	r24, 0xAC	; 172
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	message.ctrl.ide = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	88 8b       	std	Y+16, r24	; 0x10
	message.ctrl.rtr = 0;
    1eda:	1f 86       	std	Y+15, r1	; 0x0f
	message.dlc = 2;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	8b 87       	std	Y+11, r24	; 0x0b
	message.cmd = CMD_TX_DATA;
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pt_data[message.dlc];
    1ee4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ee6:	82 2f       	mov	r24, r18
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	82 2f       	mov	r24, r18
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2d b7       	in	r18, 0x3d	; 61
    1ef6:	3e b7       	in	r19, 0x3e	; 62
    1ef8:	28 1b       	sub	r18, r24
    1efa:	39 0b       	sbc	r19, r25
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	3e bf       	out	0x3e, r19	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	2d bf       	out	0x3d, r18	; 61
    1f06:	8d b7       	in	r24, 0x3d	; 61
    1f08:	9e b7       	in	r25, 0x3e	; 62
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
	pt_data[0] = 0xEE;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	2e ee       	ldi	r18, 0xEE	; 238
    1f16:	fc 01       	movw	r30, r24
    1f18:	20 83       	st	Z, r18
	pt_data[1] = 0xFF;
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	2f ef       	ldi	r18, 0xFF	; 255
    1f20:	fc 01       	movw	r30, r24
    1f22:	21 83       	std	Z+1, r18	; 0x01
	message.pt_data = &pt_data[0];
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	9d 87       	std	Y+13, r25	; 0x0d
    1f2a:	8c 87       	std	Y+12, r24	; 0x0c
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1f2c:	00 00       	nop
    1f2e:	ce 01       	movw	r24, r28
    1f30:	05 96       	adiw	r24, 0x05	; 5
    1f32:	0e 94 ad 01 	call	0x35a	; 0x35a <can_cmd>
    1f36:	88 23       	and	r24, r24
    1f38:	d1 f7       	brne	.-12     	; 0x1f2e <can_send_message+0x8e>
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1f3a:	00 00       	nop
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	05 96       	adiw	r24, 0x05	; 5
    1f40:	0e 94 43 0c 	call	0x1886	; 0x1886 <can_get_status>
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	d1 f3       	breq	.-12     	; 0x1f3c <can_send_message+0x9c>
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	fe be       	out	0x3e, r15	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	ed be       	out	0x3d, r14	; 61
    1f52:	00 00       	nop
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	1e bf       	out	0x3e, r17	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0d bf       	out	0x3d, r16	; 61
    1f5e:	60 96       	adiw	r28, 0x10	; 16
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	08 95       	ret

00001f78 <main>:
#include "can/can_network.h"
#include "timer/timer.h"
#include "helpers.h"

int main(void)
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
	
	can_network_init(1);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <can_network_init>
	init_1ms_timer();
    1f86:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <init_1ms_timer>
	sei();
    1f8a:	78 94       	sei
	
	
    /* Replace with your application code */
    while (1) 
    {
		if (bit_check(TIMER_TASKS, BIT_TIMER_250ms))
    1f8c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	80 71       	andi	r24, 0x10	; 16
    1f96:	99 27       	eor	r25, r25
    1f98:	89 2b       	or	r24, r25
    1f9a:	c1 f3       	breq	.-16     	; 0x1f8c <main+0x14>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_250ms);
    1f9c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    1fa0:	8f 7e       	andi	r24, 0xEF	; 239
    1fa2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
			can_send_message();
    1fa6:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <can_send_message>
		}
    }
    1faa:	f0 cf       	rjmp	.-32     	; 0x1f8c <main+0x14>

00001fac <init_1ms_timer>:
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
		while ((TIFR1 & (1 << OCF1A)) == 0);
		TIFR1 |= (1 << OCF1A);
		millis--;
	} while (millis > 0);
}
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ms_counter>
    1fb8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ms_counter+0x1>
    1fbc:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ms_counter+0x2>
    1fc0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <ms_counter+0x3>
    1fc4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <timer_10ms>
    1fc8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_20ms>
    1fcc:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_50ms>
    1fd0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_100ms>
    1fd4:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <timer_250ms>
    1fd8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_500ms+0x1>
    1fdc:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_500ms>
    1fe0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_1000ms+0x1>
    1fe4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_1000ms>
    1fe8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <TIMER_TASKS>
    1fec:	87 e4       	ldi	r24, 0x47	; 71
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	29 ef       	ldi	r18, 0xF9	; 249
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	20 83       	st	Z, r18
    1ff6:	8e e6       	ldi	r24, 0x6E	; 110
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	2e e6       	ldi	r18, 0x6E	; 110
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	f9 01       	movw	r30, r18
    2000:	20 81       	ld	r18, Z
    2002:	22 60       	ori	r18, 0x02	; 2
    2004:	fc 01       	movw	r30, r24
    2006:	20 83       	st	Z, r18
    2008:	84 e4       	ldi	r24, 0x44	; 68
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	24 e4       	ldi	r18, 0x44	; 68
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	f9 01       	movw	r30, r18
    2012:	20 81       	ld	r18, Z
    2014:	22 60       	ori	r18, 0x02	; 2
    2016:	fc 01       	movw	r30, r24
    2018:	20 83       	st	Z, r18
    201a:	85 e4       	ldi	r24, 0x45	; 69
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	25 e4       	ldi	r18, 0x45	; 69
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	f9 01       	movw	r30, r18
    2024:	20 81       	ld	r18, Z
    2026:	23 60       	ori	r18, 0x03	; 3
    2028:	fc 01       	movw	r30, r24
    202a:	20 83       	st	Z, r18
    202c:	00 00       	nop
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
    2034:	1f 92       	push	r1
    2036:	0f 92       	push	r0
    2038:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    203c:	0f 92       	push	r0
    203e:	11 24       	eor	r1, r1
    2040:	2f 93       	push	r18
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
	ms_counter++;
    2052:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ms_counter>
    2056:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ms_counter+0x1>
    205a:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <ms_counter+0x2>
    205e:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <ms_counter+0x3>
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	a1 1d       	adc	r26, r1
    2066:	b1 1d       	adc	r27, r1
    2068:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ms_counter>
    206c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ms_counter+0x1>
    2070:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <ms_counter+0x2>
    2074:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <ms_counter+0x3>
	timer_10ms++;
    2078:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer_10ms>
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <timer_10ms>
	timer_20ms++;
    2082:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_20ms>
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timer_20ms>
	timer_50ms++;
    208c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_50ms>
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timer_50ms>
	timer_100ms++;
    2096:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_100ms>
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <timer_100ms>
	timer_250ms++;
    20a0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <timer_250ms>
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <timer_250ms>
	timer_500ms++;
    20aa:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_500ms>
    20ae:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_500ms+0x1>
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer_500ms+0x1>
    20b8:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer_500ms>
	timer_1000ms++;
    20bc:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_1000ms>
    20c0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <timer_1000ms+0x1>
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <timer_1000ms+0x1>
    20ca:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <timer_1000ms>
	
	if (timer_10ms == 10)
    20ce:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer_10ms>
    20d2:	8a 30       	cpi	r24, 0x0A	; 10
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <__vector_15+0xb0>
	{
		timer_10ms = 0;
    20d6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <timer_10ms>
		bit_set(TIMER_TASKS, BIT_TIMER_10ms);
    20da:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
    20e4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_20ms>
    20e8:	84 31       	cpi	r24, 0x14	; 20
    20ea:	39 f4       	brne	.+14     	; 0x20fa <__vector_15+0xc6>
	{
		timer_20ms = 0;
    20ec:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_20ms>
		bit_set(TIMER_TASKS, BIT_TIMER_20ms);
    20f0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
    20fa:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_50ms>
    20fe:	82 33       	cpi	r24, 0x32	; 50
    2100:	39 f4       	brne	.+14     	; 0x2110 <__vector_15+0xdc>
	{
		timer_50ms = 0;
    2102:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_50ms>
		bit_set(TIMER_TASKS, BIT_TIMER_50ms);
    2106:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    210a:	84 60       	ori	r24, 0x04	; 4
    210c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
    2110:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_100ms>
    2114:	84 36       	cpi	r24, 0x64	; 100
    2116:	39 f4       	brne	.+14     	; 0x2126 <__vector_15+0xf2>
	{
		timer_100ms = 0;
    2118:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_100ms>
		bit_set(TIMER_TASKS, BIT_TIMER_100ms);
    211c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2120:	88 60       	ori	r24, 0x08	; 8
    2122:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
    2126:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <timer_250ms>
    212a:	8a 3f       	cpi	r24, 0xFA	; 250
    212c:	39 f4       	brne	.+14     	; 0x213c <__vector_15+0x108>
	{
		timer_250ms = 0;
    212e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <timer_250ms>
		bit_set(TIMER_TASKS, BIT_TIMER_250ms);
    2132:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2136:	80 61       	ori	r24, 0x10	; 16
    2138:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
    213c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_500ms>
    2140:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_500ms+0x1>
    2144:	84 3f       	cpi	r24, 0xF4	; 244
    2146:	91 40       	sbci	r25, 0x01	; 1
    2148:	49 f4       	brne	.+18     	; 0x215c <__vector_15+0x128>
	{
		timer_500ms = 0;
    214a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_500ms+0x1>
    214e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_500ms>
		bit_set(TIMER_TASKS, BIT_TIMER_500ms);
    2152:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2156:	80 62       	ori	r24, 0x20	; 32
    2158:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
    215c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_1000ms>
    2160:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <timer_1000ms+0x1>
    2164:	88 3e       	cpi	r24, 0xE8	; 232
    2166:	93 40       	sbci	r25, 0x03	; 3
    2168:	49 f4       	brne	.+18     	; 0x217c <__vector_15+0x148>
	{
		timer_1000ms = 0;
    216a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_1000ms+0x1>
    216e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_1000ms>
		bit_set(TIMER_TASKS, BIT_TIMER_1000ms);
    2172:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2176:	80 64       	ori	r24, 0x40	; 64
    2178:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
    217c:	00 00       	nop
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	bf 91       	pop	r27
    2184:	af 91       	pop	r26
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	2f 91       	pop	r18
    218c:	0f 90       	pop	r0
    218e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <__tablejump2__>:
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	05 90       	lpm	r0, Z+
    219e:	f4 91       	lpm	r31, Z
    21a0:	e0 2d       	mov	r30, r0
    21a2:	09 94       	ijmp

000021a4 <_exit>:
    21a4:	f8 94       	cli

000021a6 <__stop_program>:
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <__stop_program>
