
Atmega32M1_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000219e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800100  00800100  00002212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d8  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e64  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001189  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00005954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000915  00000000  00000000  00005c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000651  00000000  00000000  00006599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00006bea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 15 10 	jmp	0x202a	; 0x202a <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_18>
      4c:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_19>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	27 02       	muls	r18, r23
      7e:	1d 03       	fmul	r17, r21
      80:	07 04       	cpc	r0, r7
      82:	d5 04       	cpc	r13, r5
      84:	58 05       	cpc	r21, r8
      86:	e8 05       	cpc	r30, r8
      88:	82 06       	cpc	r8, r18
      8a:	a8 07       	cpc	r26, r24
      8c:	db 08       	sbc	r13, r11
      8e:	18 0a       	sbc	r1, r24
      90:	ce 0a       	sbc	r12, r30

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 36       	cpi	r26, 0x6F	; 111
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <main>
      b2:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <can_clear_all_mob+0x6>
      c0:	1f 92       	push	r1
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	19 82       	std	Y+1, r1	; 0x01
      c8:	1d c0       	rjmp	.+58     	; 0x104 <can_clear_all_mob+0x4a>
      ca:	8d ee       	ldi	r24, 0xED	; 237
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	22 95       	swap	r18
      d2:	20 7f       	andi	r18, 0xF0	; 240
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
      d8:	8e ee       	ldi	r24, 0xEE	; 238
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9b 83       	std	Y+3, r25	; 0x03
      de:	8a 83       	std	Y+2, r24	; 0x02
      e0:	09 c0       	rjmp	.+18     	; 0xf4 <can_clear_all_mob+0x3a>
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	fc 01       	movw	r30, r24
      e8:	10 82       	st	Z, r1
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	9b 81       	ldd	r25, Y+3	; 0x03
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	9b 83       	std	Y+3, r25	; 0x03
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	88 3f       	cpi	r24, 0xF8	; 248
      fa:	91 05       	cpc	r25, r1
      fc:	90 f3       	brcs	.-28     	; 0xe2 <can_clear_all_mob+0x28>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	00 f3       	brcs	.-64     	; 0xca <can_clear_all_mob+0x10>
     10a:	00 00       	nop
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <can_get_mob_free>:
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <can_get_mob_free+0x6>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	8d ee       	ldi	r24, 0xED	; 237
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	80 81       	ld	r24, Z
     12a:	8a 83       	std	Y+2, r24	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	1b c0       	rjmp	.+54     	; 0x166 <can_get_mob_free+0x4e>
     130:	8d ee       	ldi	r24, 0xED	; 237
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	29 81       	ldd	r18, Y+1	; 0x01
     136:	22 95       	swap	r18
     138:	20 7f       	andi	r18, 0xF0	; 240
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	8f ee       	ldi	r24, 0xEF	; 239
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	80 81       	ld	r24, Z
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	80 7c       	andi	r24, 0xC0	; 192
     14c:	99 27       	eor	r25, r25
     14e:	89 2b       	or	r24, r25
     150:	39 f4       	brne	.+14     	; 0x160 <can_get_mob_free+0x48>
     152:	8d ee       	ldi	r24, 0xED	; 237
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	2a 81       	ldd	r18, Y+2	; 0x02
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	0c c0       	rjmp	.+24     	; 0x178 <can_get_mob_free+0x60>
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	86 30       	cpi	r24, 0x06	; 6
     16a:	10 f3       	brcs	.-60     	; 0x130 <can_get_mob_free+0x18>
     16c:	8d ee       	ldi	r24, 0xED	; 237
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2a 81       	ldd	r18, Y+2	; 0x02
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	8f ef       	ldi	r24, 0xFF	; 255
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <can_get_mob_status>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <can_get_mob_status+0x6>
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	8f ee       	ldi	r24, 0xEF	; 239
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	80 81       	ld	r24, Z
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	80 7c       	andi	r24, 0xC0	; 192
     19a:	99 27       	eor	r25, r25
     19c:	89 2b       	or	r24, r25
     19e:	11 f4       	brne	.+4      	; 0x1a4 <can_get_mob_status+0x22>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	1c c0       	rjmp	.+56     	; 0x1dc <can_get_mob_status+0x5a>
     1a4:	8e ee       	ldi	r24, 0xEE	; 238
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	80 7e       	andi	r24, 0xE0	; 224
     1b2:	8a 83       	std	Y+2, r24	; 0x02
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <can_get_mob_status+0x44>
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	80 34       	cpi	r24, 0x40	; 64
     1be:	19 f0       	breq	.+6      	; 0x1c6 <can_get_mob_status+0x44>
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	80 3a       	cpi	r24, 0xA0	; 160
     1c4:	11 f4       	brne	.+4      	; 0x1ca <can_get_mob_status+0x48>
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <can_get_mob_status+0x5a>
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	8f 71       	andi	r24, 0x1F	; 31
     1ce:	8a 83       	std	Y+2, r24	; 0x02
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	88 23       	and	r24, r24
     1d4:	11 f0       	breq	.+4      	; 0x1da <can_get_mob_status+0x58>
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <can_get_mob_status+0x5a>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <can_get_data>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <can_get_data+0x6>
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9b 83       	std	Y+3, r25	; 0x03
     1f4:	8a 83       	std	Y+2, r24	; 0x02
     1f6:	19 82       	std	Y+1, r1	; 0x01
     1f8:	10 c0       	rjmp	.+32     	; 0x21a <can_get_data+0x34>
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	2a 81       	ldd	r18, Y+2	; 0x02
     202:	3b 81       	ldd	r19, Y+3	; 0x03
     204:	82 0f       	add	r24, r18
     206:	93 1f       	adc	r25, r19
     208:	2a ef       	ldi	r18, 0xFA	; 250
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	8f ee       	ldi	r24, 0xEF	; 239
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	99 27       	eor	r25, r25
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	14 f3       	brlt	.-60     	; 0x1fa <can_get_data+0x14>
     236:	00 00       	nop
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	1f 92       	push	r1
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     250:	88 ed       	ldi	r24, 0xD8	; 216
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
    Can_conf_bt();
     25a:	82 ee       	ldi	r24, 0xE2	; 226
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	26 e0       	ldi	r18, 0x06	; 6
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	83 ee       	ldi	r24, 0xE3	; 227
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
     26e:	84 ee       	ldi	r24, 0xE4	; 228
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	23 e1       	ldi	r18, 0x13	; 19
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
    return 1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <can_init>:
		CANIDM3 = 			 filter->mask.ext_mask >> 5;
		CANIDM2 =            filter->mask.ext_mask >> 13;
		CANIDM1 =            filter->mask.ext_mask >> 21;
	}
	
}
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	2b 97       	sbiw	r28, 0x0b	; 11
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	8b 87       	std	Y+11, r24	; 0x0b
     298:	8b 85       	ldd	r24, Y+11	; 0x0b
     29a:	0e 94 22 01 	call	0x244	; 0x244 <can_fixed_baudrate>
     29e:	88 23       	and	r24, r24
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <can_init+0x24>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	4c c0       	rjmp	.+152    	; 0x33e <can_init+0xbc>
     2a6:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
     2aa:	8d ee       	ldi	r24, 0xED	; 237
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	fc 01       	movw	r30, r24
     2b0:	10 82       	st	Z, r1
     2b2:	8f ee       	ldi	r24, 0xEF	; 239
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2f ee       	ldi	r18, 0xEF	; 239
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	2f 73       	andi	r18, 0x3F	; 63
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
     2c4:	8f ee       	ldi	r24, 0xEF	; 239
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2f ee       	ldi	r18, 0xEF	; 239
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	20 68       	ori	r18, 0x80	; 128
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
     2d6:	8b ed       	ldi	r24, 0xDB	; 219
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	20 ea       	ldi	r18, 0xA0	; 160
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
     2e0:	8e ed       	ldi	r24, 0xDE	; 222
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2e ed       	ldi	r18, 0xDE	; 222
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	f9 01       	movw	r30, r18
     2ea:	20 81       	ld	r18, Z
     2ec:	21 60       	ori	r18, 0x01	; 1
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
     2f2:	8f ed       	ldi	r24, 0xDF	; 223
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	10 82       	st	Z, r1
     2fa:	81 ee       	ldi	r24, 0xE1	; 225
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	fc 01       	movw	r30, r24
     300:	10 82       	st	Z, r1
     302:	80 ee       	ldi	r24, 0xE0	; 224
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	10 82       	st	Z, r1
     30a:	87 ef       	ldi	r24, 0xF7	; 247
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	10 82       	st	Z, r1
     312:	86 ef       	ldi	r24, 0xF6	; 246
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
     31a:	85 ef       	ldi	r24, 0xF5	; 245
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
     322:	84 ef       	ldi	r24, 0xF4	; 244
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	fc 01       	movw	r30, r24
     328:	10 82       	st	Z, r1
     32a:	88 ed       	ldi	r24, 0xD8	; 216
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	28 ed       	ldi	r18, 0xD8	; 216
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	22 60       	ori	r18, 0x02	; 2
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	2b 96       	adiw	r28, 0x0b	; 11
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	2a 97       	sbiw	r28, 0x0a	; 10
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	9a 87       	std	Y+10, r25	; 0x0a
     366:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     368:	89 85       	ldd	r24, Y+9	; 0x09
     36a:	9a 85       	ldd	r25, Y+10	; 0x0a
     36c:	fc 01       	movw	r30, r24
     36e:	81 81       	ldd	r24, Z+1	; 0x01
     370:	8c 30       	cpi	r24, 0x0C	; 12
     372:	39 f5       	brne	.+78     	; 0x3c2 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     374:	89 85       	ldd	r24, Y+9	; 0x09
     376:	9a 85       	ldd	r25, Y+10	; 0x0a
     378:	fc 01       	movw	r30, r24
     37a:	81 85       	ldd	r24, Z+9	; 0x09
     37c:	80 36       	cpi	r24, 0x60	; 96
     37e:	d9 f4       	brne	.+54     	; 0x3b6 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     380:	8d ee       	ldi	r24, 0xED	; 237
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	29 85       	ldd	r18, Y+9	; 0x09
     386:	3a 85       	ldd	r19, Y+10	; 0x0a
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	22 95       	swap	r18
     38e:	20 7f       	andi	r18, 0xF0	; 240
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
      Can_mob_abort();
     394:	8f ee       	ldi	r24, 0xEF	; 239
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	2f ee       	ldi	r18, 0xEF	; 239
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	20 81       	ld	r18, Z
     3a0:	2f 73       	andi	r18, 0x3F	; 63
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     3a6:	8e ee       	ldi	r24, 0xEE	; 238
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	10 82       	st	Z, r1
      cmd->handle = 0;
     3ae:	89 85       	ldd	r24, Y+9	; 0x09
     3b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b2:	fc 01       	movw	r30, r24
     3b4:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     3b6:	89 85       	ldd	r24, Y+9	; 0x09
     3b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ba:	fc 01       	movw	r30, r24
     3bc:	11 86       	std	Z+9, r1	; 0x09
     3be:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__stack+0xf69>
  }
  else
  {
    mob_handle = can_get_mob_free();
     3c2:	0e 94 8c 00 	call	0x118	; 0x118 <can_get_mob_free>
     3c6:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	8f 3f       	cpi	r24, 0xFF	; 255
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <can_cmd+0x82>
     3ce:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__stack+0xf5b>
    {
      cmd->status = MOB_PENDING; 
     3d2:	89 85       	ldd	r24, Y+9	; 0x09
     3d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d6:	20 e6       	ldi	r18, 0x60	; 96
     3d8:	fc 01       	movw	r30, r24
     3da:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     3dc:	89 85       	ldd	r24, Y+9	; 0x09
     3de:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e0:	2c 81       	ldd	r18, Y+4	; 0x04
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     3e6:	8d ee       	ldi	r24, 0xED	; 237
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	2c 81       	ldd	r18, Y+4	; 0x04
     3ec:	22 95       	swap	r18
     3ee:	20 7f       	andi	r18, 0xF0	; 240
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
      Can_clear_mob();
     3f4:	8e ee       	ldi	r24, 0xEE	; 238
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	9b 83       	std	Y+3, r25	; 0x03
     3fa:	8a 83       	std	Y+2, r24	; 0x02
     3fc:	09 c0       	rjmp	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	9b 81       	ldd	r25, Y+3	; 0x03
     402:	fc 01       	movw	r30, r24
     404:	10 82       	st	Z, r1
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	9b 83       	std	Y+3, r25	; 0x03
     40e:	8a 83       	std	Y+2, r24	; 0x02
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	9b 81       	ldd	r25, Y+3	; 0x03
     414:	88 3f       	cpi	r24, 0xF8	; 248
     416:	91 05       	cpc	r25, r1
     418:	90 f3       	brcs	.-28     	; 0x3fe <can_cmd+0xae>
          
      switch (cmd->cmd)
     41a:	89 85       	ldd	r24, Y+9	; 0x09
     41c:	9a 85       	ldd	r25, Y+10	; 0x0a
     41e:	fc 01       	movw	r30, r24
     420:	81 81       	ldd	r24, Z+1	; 0x01
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	09 2e       	mov	r0, r25
     428:	00 0c       	add	r0, r0
     42a:	aa 0b       	sbc	r26, r26
     42c:	bb 0b       	sbc	r27, r27
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	2a e0       	ldi	r18, 0x0A	; 10
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	84 1b       	sub	r24, r20
     438:	95 0b       	sbc	r25, r21
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	10 f4       	brcc	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     440:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__stack+0xf4f>
     444:	82 5c       	subi	r24, 0xC2	; 194
     446:	9f 4f       	sbci	r25, 0xFF	; 255
     448:	fc 01       	movw	r30, r24
     44a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     44e:	89 85       	ldd	r24, Y+9	; 0x09
     450:	9a 85       	ldd	r25, Y+10	; 0x0a
     452:	fc 01       	movw	r30, r24
     454:	83 85       	ldd	r24, Z+11	; 0x0b
     456:	88 23       	and	r24, r24
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	69 c0       	rjmp	.+210    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     45c:	83 ef       	ldi	r24, 0xF3	; 243
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	29 85       	ldd	r18, Y+9	; 0x09
     462:	3a 85       	ldd	r19, Y+10	; 0x0a
     464:	2e 5f       	subi	r18, 0xFE	; 254
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	2d 5f       	subi	r18, 0xFD	; 253
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	f9 01       	movw	r30, r18
     46e:	20 81       	ld	r18, Z
     470:	42 2f       	mov	r20, r18
     472:	44 0f       	add	r20, r20
     474:	44 0f       	add	r20, r20
     476:	44 0f       	add	r20, r20
     478:	29 85       	ldd	r18, Y+9	; 0x09
     47a:	3a 85       	ldd	r19, Y+10	; 0x0a
     47c:	2e 5f       	subi	r18, 0xFE	; 254
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	2e 5f       	subi	r18, 0xFE	; 254
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
     488:	22 95       	swap	r18
     48a:	26 95       	lsr	r18
     48c:	27 70       	andi	r18, 0x07	; 7
     48e:	24 0f       	add	r18, r20
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	29 85       	ldd	r18, Y+9	; 0x09
     49a:	3a 85       	ldd	r19, Y+10	; 0x0a
     49c:	2e 5f       	subi	r18, 0xFE	; 254
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	2e 5f       	subi	r18, 0xFE	; 254
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	42 2f       	mov	r20, r18
     4aa:	44 0f       	add	r20, r20
     4ac:	44 0f       	add	r20, r20
     4ae:	44 0f       	add	r20, r20
     4b0:	29 85       	ldd	r18, Y+9	; 0x09
     4b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     4b4:	2e 5f       	subi	r18, 0xFE	; 254
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	22 95       	swap	r18
     4c2:	26 95       	lsr	r18
     4c4:	27 70       	andi	r18, 0x07	; 7
     4c6:	24 0f       	add	r18, r20
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
     4cc:	81 ef       	ldi	r24, 0xF1	; 241
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	29 85       	ldd	r18, Y+9	; 0x09
     4d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     4d4:	2e 5f       	subi	r18, 0xFE	; 254
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	f9 01       	movw	r30, r18
     4de:	20 81       	ld	r18, Z
     4e0:	42 2f       	mov	r20, r18
     4e2:	44 0f       	add	r20, r20
     4e4:	44 0f       	add	r20, r20
     4e6:	44 0f       	add	r20, r20
     4e8:	29 85       	ldd	r18, Y+9	; 0x09
     4ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     4ec:	2e 5f       	subi	r18, 0xFE	; 254
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	22 95       	swap	r18
     4f6:	26 95       	lsr	r18
     4f8:	27 70       	andi	r18, 0x07	; 7
     4fa:	24 0f       	add	r18, r20
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
     500:	80 ef       	ldi	r24, 0xF0	; 240
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	29 85       	ldd	r18, Y+9	; 0x09
     506:	3a 85       	ldd	r19, Y+10	; 0x0a
     508:	2e 5f       	subi	r18, 0xFE	; 254
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	f9 01       	movw	r30, r18
     50e:	20 81       	ld	r18, Z
     510:	22 0f       	add	r18, r18
     512:	22 0f       	add	r18, r18
     514:	22 0f       	add	r18, r18
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
     51a:	8f ee       	ldi	r24, 0xEF	; 239
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	2f ee       	ldi	r18, 0xEF	; 239
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	20 61       	ori	r18, 0x10	; 16
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
     52c:	30 c0       	rjmp	.+96     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
          else              { Can_set_std_id(cmd->id.std);}
     52e:	83 ef       	ldi	r24, 0xF3	; 243
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	29 85       	ldd	r18, Y+9	; 0x09
     534:	3a 85       	ldd	r19, Y+10	; 0x0a
     536:	2e 5f       	subi	r18, 0xFE	; 254
     538:	3f 4f       	sbci	r19, 0xFF	; 255
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	42 2f       	mov	r20, r18
     544:	42 95       	swap	r20
     546:	44 0f       	add	r20, r20
     548:	40 7e       	andi	r20, 0xE0	; 224
     54a:	29 85       	ldd	r18, Y+9	; 0x09
     54c:	3a 85       	ldd	r19, Y+10	; 0x0a
     54e:	2e 5f       	subi	r18, 0xFE	; 254
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	26 95       	lsr	r18
     558:	26 95       	lsr	r18
     55a:	26 95       	lsr	r18
     55c:	24 0f       	add	r18, r20
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
     562:	82 ef       	ldi	r24, 0xF2	; 242
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	29 85       	ldd	r18, Y+9	; 0x09
     568:	3a 85       	ldd	r19, Y+10	; 0x0a
     56a:	2e 5f       	subi	r18, 0xFE	; 254
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	22 95       	swap	r18
     574:	22 0f       	add	r18, r18
     576:	20 7e       	andi	r18, 0xE0	; 224
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
     57c:	8f ee       	ldi	r24, 0xEF	; 239
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	2f ee       	ldi	r18, 0xEF	; 239
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	2f 7e       	andi	r18, 0xEF	; 239
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     58e:	19 82       	std	Y+1, r1	; 0x01
     590:	13 c0       	rjmp	.+38     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
     592:	8a ef       	ldi	r24, 0xFA	; 250
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	29 85       	ldd	r18, Y+9	; 0x09
     598:	3a 85       	ldd	r19, Y+10	; 0x0a
     59a:	f9 01       	movw	r30, r18
     59c:	47 81       	ldd	r20, Z+7	; 0x07
     59e:	50 85       	ldd	r21, Z+8	; 0x08
     5a0:	29 81       	ldd	r18, Y+1	; 0x01
     5a2:	22 2f       	mov	r18, r18
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	24 0f       	add	r18, r20
     5a8:	35 1f       	adc	r19, r21
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	fc 01       	movw	r30, r24
     5be:	96 81       	ldd	r25, Z+6	; 0x06
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	89 17       	cp	r24, r25
     5c4:	30 f3       	brcs	.-52     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     5c6:	89 85       	ldd	r24, Y+9	; 0x09
     5c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ca:	fc 01       	movw	r30, r24
     5cc:	82 85       	ldd	r24, Z+10	; 0x0a
     5ce:	88 23       	and	r24, r24
     5d0:	51 f0       	breq	.+20     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5d2:	80 ef       	ldi	r24, 0xF0	; 240
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	20 ef       	ldi	r18, 0xF0	; 240
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f9 01       	movw	r30, r18
     5dc:	20 81       	ld	r18, Z
     5de:	24 60       	ori	r18, 0x04	; 4
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
     5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
            else Can_clear_rtr();    
     5e6:	80 ef       	ldi	r24, 0xF0	; 240
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	20 ef       	ldi	r18, 0xF0	; 240
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	f9 01       	movw	r30, r18
     5f0:	20 81       	ld	r18, Z
     5f2:	2b 7f       	andi	r18, 0xFB	; 251
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     5f8:	8f ee       	ldi	r24, 0xEF	; 239
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2f ee       	ldi	r18, 0xEF	; 239
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	40 81       	ld	r20, Z
     604:	29 85       	ldd	r18, Y+9	; 0x09
     606:	3a 85       	ldd	r19, Y+10	; 0x0a
     608:	f9 01       	movw	r30, r18
     60a:	26 81       	ldd	r18, Z+6	; 0x06
     60c:	24 2b       	or	r18, r20
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
          Can_config_tx();
     612:	8f ee       	ldi	r24, 0xEF	; 239
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2f ee       	ldi	r18, 0xEF	; 239
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	2f 73       	andi	r18, 0x3F	; 63
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
     624:	8f ee       	ldi	r24, 0xEF	; 239
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	2f ee       	ldi	r18, 0xEF	; 239
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	20 81       	ld	r18, Z
     630:	20 64       	ori	r18, 0x40	; 64
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
          break;
     636:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     63a:	89 85       	ldd	r24, Y+9	; 0x09
     63c:	9a 85       	ldd	r25, Y+10	; 0x0a
     63e:	fc 01       	movw	r30, r24
     640:	83 85       	ldd	r24, Z+11	; 0x0b
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
     646:	69 c0       	rjmp	.+210    	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
     648:	83 ef       	ldi	r24, 0xF3	; 243
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	2e 5f       	subi	r18, 0xFE	; 254
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	2d 5f       	subi	r18, 0xFD	; 253
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	42 2f       	mov	r20, r18
     65e:	44 0f       	add	r20, r20
     660:	44 0f       	add	r20, r20
     662:	44 0f       	add	r20, r20
     664:	29 85       	ldd	r18, Y+9	; 0x09
     666:	3a 85       	ldd	r19, Y+10	; 0x0a
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	2e 5f       	subi	r18, 0xFE	; 254
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	22 95       	swap	r18
     676:	26 95       	lsr	r18
     678:	27 70       	andi	r18, 0x07	; 7
     67a:	24 0f       	add	r18, r20
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	82 ef       	ldi	r24, 0xF2	; 242
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	29 85       	ldd	r18, Y+9	; 0x09
     686:	3a 85       	ldd	r19, Y+10	; 0x0a
     688:	2e 5f       	subi	r18, 0xFE	; 254
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	2e 5f       	subi	r18, 0xFE	; 254
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	42 2f       	mov	r20, r18
     696:	44 0f       	add	r20, r20
     698:	44 0f       	add	r20, r20
     69a:	44 0f       	add	r20, r20
     69c:	29 85       	ldd	r18, Y+9	; 0x09
     69e:	3a 85       	ldd	r19, Y+10	; 0x0a
     6a0:	2e 5f       	subi	r18, 0xFE	; 254
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	2f 5f       	subi	r18, 0xFF	; 255
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	22 95       	swap	r18
     6ae:	26 95       	lsr	r18
     6b0:	27 70       	andi	r18, 0x07	; 7
     6b2:	24 0f       	add	r18, r20
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
     6b8:	81 ef       	ldi	r24, 0xF1	; 241
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	29 85       	ldd	r18, Y+9	; 0x09
     6be:	3a 85       	ldd	r19, Y+10	; 0x0a
     6c0:	2e 5f       	subi	r18, 0xFE	; 254
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	2f 5f       	subi	r18, 0xFF	; 255
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	f9 01       	movw	r30, r18
     6ca:	20 81       	ld	r18, Z
     6cc:	42 2f       	mov	r20, r18
     6ce:	44 0f       	add	r20, r20
     6d0:	44 0f       	add	r20, r20
     6d2:	44 0f       	add	r20, r20
     6d4:	29 85       	ldd	r18, Y+9	; 0x09
     6d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d8:	2e 5f       	subi	r18, 0xFE	; 254
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	22 95       	swap	r18
     6e2:	26 95       	lsr	r18
     6e4:	27 70       	andi	r18, 0x07	; 7
     6e6:	24 0f       	add	r18, r20
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
     6ec:	80 ef       	ldi	r24, 0xF0	; 240
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	29 85       	ldd	r18, Y+9	; 0x09
     6f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6f4:	2e 5f       	subi	r18, 0xFE	; 254
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	22 0f       	add	r18, r18
     6fe:	22 0f       	add	r18, r18
     700:	22 0f       	add	r18, r18
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
     706:	8f ee       	ldi	r24, 0xEF	; 239
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	2f ee       	ldi	r18, 0xEF	; 239
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	20 61       	ori	r18, 0x10	; 16
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
     718:	30 c0       	rjmp	.+96     	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
          else              { Can_set_std_id(cmd->id.std);}
     71a:	83 ef       	ldi	r24, 0xF3	; 243
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	29 85       	ldd	r18, Y+9	; 0x09
     720:	3a 85       	ldd	r19, Y+10	; 0x0a
     722:	2e 5f       	subi	r18, 0xFE	; 254
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	2f 5f       	subi	r18, 0xFF	; 255
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	42 2f       	mov	r20, r18
     730:	42 95       	swap	r20
     732:	44 0f       	add	r20, r20
     734:	40 7e       	andi	r20, 0xE0	; 224
     736:	29 85       	ldd	r18, Y+9	; 0x09
     738:	3a 85       	ldd	r19, Y+10	; 0x0a
     73a:	2e 5f       	subi	r18, 0xFE	; 254
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	26 95       	lsr	r18
     744:	26 95       	lsr	r18
     746:	26 95       	lsr	r18
     748:	24 0f       	add	r18, r20
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
     74e:	82 ef       	ldi	r24, 0xF2	; 242
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	29 85       	ldd	r18, Y+9	; 0x09
     754:	3a 85       	ldd	r19, Y+10	; 0x0a
     756:	2e 5f       	subi	r18, 0xFE	; 254
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	22 95       	swap	r18
     760:	22 0f       	add	r18, r18
     762:	20 7e       	andi	r18, 0xE0	; 224
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
     768:	8f ee       	ldi	r24, 0xEF	; 239
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2f ee       	ldi	r18, 0xEF	; 239
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	2f 7e       	andi	r18, 0xEF	; 239
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     77a:	19 82       	std	Y+1, r1	; 0x01
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <__EEPROM_REGION_LENGTH__+0x3a4>
     77e:	8a ef       	ldi	r24, 0xFA	; 250
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	29 85       	ldd	r18, Y+9	; 0x09
     784:	3a 85       	ldd	r19, Y+10	; 0x0a
     786:	f9 01       	movw	r30, r18
     788:	47 81       	ldd	r20, Z+7	; 0x07
     78a:	50 85       	ldd	r21, Z+8	; 0x08
     78c:	29 81       	ldd	r18, Y+1	; 0x01
     78e:	22 2f       	mov	r18, r18
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	24 0f       	add	r18, r20
     794:	35 1f       	adc	r19, r21
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	89 85       	ldd	r24, Y+9	; 0x09
     7a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a8:	fc 01       	movw	r30, r24
     7aa:	96 81       	ldd	r25, Z+6	; 0x06
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	89 17       	cp	r24, r25
     7b0:	30 f3       	brcs	.-52     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7b2:	89 85       	ldd	r24, Y+9	; 0x09
     7b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b6:	fc 01       	movw	r30, r24
     7b8:	12 86       	std	Z+10, r1	; 0x0a
     7ba:	80 ef       	ldi	r24, 0xF0	; 240
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	20 ef       	ldi	r18, 0xF0	; 240
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	2b 7f       	andi	r18, 0xFB	; 251
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     7cc:	8f ee       	ldi	r24, 0xEF	; 239
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2f ee       	ldi	r18, 0xEF	; 239
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f9 01       	movw	r30, r18
     7d6:	40 81       	ld	r20, Z
     7d8:	29 85       	ldd	r18, Y+9	; 0x09
     7da:	3a 85       	ldd	r19, Y+10	; 0x0a
     7dc:	f9 01       	movw	r30, r18
     7de:	26 81       	ldd	r18, Z+6	; 0x06
     7e0:	24 2b       	or	r18, r20
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
          Can_config_tx();
     7e6:	8f ee       	ldi	r24, 0xEF	; 239
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2f ee       	ldi	r18, 0xEF	; 239
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	2f 73       	andi	r18, 0x3F	; 63
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	8f ee       	ldi	r24, 0xEF	; 239
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2f ee       	ldi	r18, 0xEF	; 239
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	20 64       	ori	r18, 0x40	; 64
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
          break;
     80a:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	9a 85       	ldd	r25, Y+10	; 0x0a
     812:	fc 01       	movw	r30, r24
     814:	83 85       	ldd	r24, Z+11	; 0x0b
     816:	88 23       	and	r24, r24
     818:	09 f4       	brne	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	69 c0       	rjmp	.+210    	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     81c:	83 ef       	ldi	r24, 0xF3	; 243
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	29 85       	ldd	r18, Y+9	; 0x09
     822:	3a 85       	ldd	r19, Y+10	; 0x0a
     824:	2e 5f       	subi	r18, 0xFE	; 254
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	2d 5f       	subi	r18, 0xFD	; 253
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	42 2f       	mov	r20, r18
     832:	44 0f       	add	r20, r20
     834:	44 0f       	add	r20, r20
     836:	44 0f       	add	r20, r20
     838:	29 85       	ldd	r18, Y+9	; 0x09
     83a:	3a 85       	ldd	r19, Y+10	; 0x0a
     83c:	2e 5f       	subi	r18, 0xFE	; 254
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	2e 5f       	subi	r18, 0xFE	; 254
     842:	3f 4f       	sbci	r19, 0xFF	; 255
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	22 95       	swap	r18
     84a:	26 95       	lsr	r18
     84c:	27 70       	andi	r18, 0x07	; 7
     84e:	24 0f       	add	r18, r20
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	82 ef       	ldi	r24, 0xF2	; 242
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	29 85       	ldd	r18, Y+9	; 0x09
     85a:	3a 85       	ldd	r19, Y+10	; 0x0a
     85c:	2e 5f       	subi	r18, 0xFE	; 254
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	2e 5f       	subi	r18, 0xFE	; 254
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	42 2f       	mov	r20, r18
     86a:	44 0f       	add	r20, r20
     86c:	44 0f       	add	r20, r20
     86e:	44 0f       	add	r20, r20
     870:	29 85       	ldd	r18, Y+9	; 0x09
     872:	3a 85       	ldd	r19, Y+10	; 0x0a
     874:	2e 5f       	subi	r18, 0xFE	; 254
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	2f 5f       	subi	r18, 0xFF	; 255
     87a:	3f 4f       	sbci	r19, 0xFF	; 255
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	22 95       	swap	r18
     882:	26 95       	lsr	r18
     884:	27 70       	andi	r18, 0x07	; 7
     886:	24 0f       	add	r18, r20
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	81 ef       	ldi	r24, 0xF1	; 241
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	29 85       	ldd	r18, Y+9	; 0x09
     892:	3a 85       	ldd	r19, Y+10	; 0x0a
     894:	2e 5f       	subi	r18, 0xFE	; 254
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	2f 5f       	subi	r18, 0xFF	; 255
     89a:	3f 4f       	sbci	r19, 0xFF	; 255
     89c:	f9 01       	movw	r30, r18
     89e:	20 81       	ld	r18, Z
     8a0:	42 2f       	mov	r20, r18
     8a2:	44 0f       	add	r20, r20
     8a4:	44 0f       	add	r20, r20
     8a6:	44 0f       	add	r20, r20
     8a8:	29 85       	ldd	r18, Y+9	; 0x09
     8aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ac:	2e 5f       	subi	r18, 0xFE	; 254
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	22 95       	swap	r18
     8b6:	26 95       	lsr	r18
     8b8:	27 70       	andi	r18, 0x07	; 7
     8ba:	24 0f       	add	r18, r20
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
     8c0:	80 ef       	ldi	r24, 0xF0	; 240
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	2e 5f       	subi	r18, 0xFE	; 254
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	22 0f       	add	r18, r18
     8d2:	22 0f       	add	r18, r18
     8d4:	22 0f       	add	r18, r18
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	8f ee       	ldi	r24, 0xEF	; 239
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	2f ee       	ldi	r18, 0xEF	; 239
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	20 61       	ori	r18, 0x10	; 16
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__stack+0x4f>
          else              { Can_set_std_id(cmd->id.std);}
     8ee:	83 ef       	ldi	r24, 0xF3	; 243
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	29 85       	ldd	r18, Y+9	; 0x09
     8f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f6:	2e 5f       	subi	r18, 0xFE	; 254
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	2f 5f       	subi	r18, 0xFF	; 255
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	42 2f       	mov	r20, r18
     904:	42 95       	swap	r20
     906:	44 0f       	add	r20, r20
     908:	40 7e       	andi	r20, 0xE0	; 224
     90a:	29 85       	ldd	r18, Y+9	; 0x09
     90c:	3a 85       	ldd	r19, Y+10	; 0x0a
     90e:	2e 5f       	subi	r18, 0xFE	; 254
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	f9 01       	movw	r30, r18
     914:	20 81       	ld	r18, Z
     916:	26 95       	lsr	r18
     918:	26 95       	lsr	r18
     91a:	26 95       	lsr	r18
     91c:	24 0f       	add	r18, r20
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	82 ef       	ldi	r24, 0xF2	; 242
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	29 85       	ldd	r18, Y+9	; 0x09
     928:	3a 85       	ldd	r19, Y+10	; 0x0a
     92a:	2e 5f       	subi	r18, 0xFE	; 254
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	f9 01       	movw	r30, r18
     930:	20 81       	ld	r18, Z
     932:	22 95       	swap	r18
     934:	22 0f       	add	r18, r18
     936:	20 7e       	andi	r18, 0xE0	; 224
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
     93c:	8f ee       	ldi	r24, 0xEF	; 239
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2f ee       	ldi	r18, 0xEF	; 239
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	2f 7e       	andi	r18, 0xEF	; 239
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	9a 85       	ldd	r25, Y+10	; 0x0a
     952:	21 e0       	ldi	r18, 0x01	; 1
     954:	fc 01       	movw	r30, r24
     956:	22 87       	std	Z+10, r18	; 0x0a
     958:	80 ef       	ldi	r24, 0xF0	; 240
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	20 ef       	ldi	r18, 0xF0	; 240
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	f9 01       	movw	r30, r18
     962:	20 81       	ld	r18, Z
     964:	24 60       	ori	r18, 0x04	; 4
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     96a:	8f ee       	ldi	r24, 0xEF	; 239
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	2f ee       	ldi	r18, 0xEF	; 239
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	f9 01       	movw	r30, r18
     974:	40 81       	ld	r20, Z
     976:	29 85       	ldd	r18, Y+9	; 0x09
     978:	3a 85       	ldd	r19, Y+10	; 0x0a
     97a:	f9 01       	movw	r30, r18
     97c:	26 81       	ldd	r18, Z+6	; 0x06
     97e:	24 2b       	or	r18, r20
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
          Can_config_tx();
     984:	8f ee       	ldi	r24, 0xEF	; 239
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2f ee       	ldi	r18, 0xEF	; 239
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	20 81       	ld	r18, Z
     990:	2f 73       	andi	r18, 0x3F	; 63
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
     996:	8f ee       	ldi	r24, 0xEF	; 239
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2f ee       	ldi	r18, 0xEF	; 239
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	20 64       	ori	r18, 0x40	; 64
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
          break;
     9a8:	5f c7       	rjmp	.+3774   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     9aa:	1d 82       	std	Y+5, r1	; 0x05
     9ac:	1e 82       	std	Y+6, r1	; 0x06
     9ae:	1f 82       	std	Y+7, r1	; 0x07
     9b0:	18 86       	std	Y+8, r1	; 0x08
     9b2:	27 ef       	ldi	r18, 0xF7	; 247
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	ce 01       	movw	r24, r28
     9b8:	05 96       	adiw	r24, 0x05	; 5
     9ba:	03 96       	adiw	r24, 0x03	; 3
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	48 2f       	mov	r20, r24
     9c2:	44 0f       	add	r20, r20
     9c4:	44 0f       	add	r20, r20
     9c6:	44 0f       	add	r20, r20
     9c8:	ce 01       	movw	r24, r28
     9ca:	05 96       	adiw	r24, 0x05	; 5
     9cc:	02 96       	adiw	r24, 0x02	; 2
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	82 95       	swap	r24
     9d4:	86 95       	lsr	r24
     9d6:	87 70       	andi	r24, 0x07	; 7
     9d8:	84 0f       	add	r24, r20
     9da:	f9 01       	movw	r30, r18
     9dc:	80 83       	st	Z, r24
     9de:	26 ef       	ldi	r18, 0xF6	; 246
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	ce 01       	movw	r24, r28
     9e4:	05 96       	adiw	r24, 0x05	; 5
     9e6:	02 96       	adiw	r24, 0x02	; 2
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	48 2f       	mov	r20, r24
     9ee:	44 0f       	add	r20, r20
     9f0:	44 0f       	add	r20, r20
     9f2:	44 0f       	add	r20, r20
     9f4:	ce 01       	movw	r24, r28
     9f6:	05 96       	adiw	r24, 0x05	; 5
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	82 95       	swap	r24
     a00:	86 95       	lsr	r24
     a02:	87 70       	andi	r24, 0x07	; 7
     a04:	84 0f       	add	r24, r20
     a06:	f9 01       	movw	r30, r18
     a08:	80 83       	st	Z, r24
     a0a:	25 ef       	ldi	r18, 0xF5	; 245
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	ce 01       	movw	r24, r28
     a10:	05 96       	adiw	r24, 0x05	; 5
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	48 2f       	mov	r20, r24
     a1a:	44 0f       	add	r20, r20
     a1c:	44 0f       	add	r20, r20
     a1e:	44 0f       	add	r20, r20
     a20:	ce 01       	movw	r24, r28
     a22:	05 96       	adiw	r24, 0x05	; 5
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	82 95       	swap	r24
     a2a:	86 95       	lsr	r24
     a2c:	87 70       	andi	r24, 0x07	; 7
     a2e:	84 0f       	add	r24, r20
     a30:	f9 01       	movw	r30, r18
     a32:	80 83       	st	Z, r24
     a34:	84 ef       	ldi	r24, 0xF4	; 244
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	9e 01       	movw	r18, r28
     a3a:	2b 5f       	subi	r18, 0xFB	; 251
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	22 0f       	add	r18, r18
     a44:	22 0f       	add	r18, r18
     a46:	22 0f       	add	r18, r18
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a4c:	8f ee       	ldi	r24, 0xEF	; 239
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2f ee       	ldi	r18, 0xEF	; 239
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	40 81       	ld	r20, Z
     a58:	29 85       	ldd	r18, Y+9	; 0x09
     a5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5c:	f9 01       	movw	r30, r18
     a5e:	26 81       	ldd	r18, Z+6	; 0x06
     a60:	24 2b       	or	r18, r20
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     a66:	84 ef       	ldi	r24, 0xF4	; 244
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	24 ef       	ldi	r18, 0xF4	; 244
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	2b 7f       	andi	r18, 0xFB	; 251
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a78:	84 ef       	ldi	r24, 0xF4	; 244
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	24 ef       	ldi	r18, 0xF4	; 244
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	f9 01       	movw	r30, r18
     a82:	20 81       	ld	r18, Z
     a84:	2e 7f       	andi	r18, 0xFE	; 254
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18
          Can_config_rx();       
     a8a:	8f ee       	ldi	r24, 0xEF	; 239
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	2f ee       	ldi	r18, 0xEF	; 239
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	f9 01       	movw	r30, r18
     a94:	20 81       	ld	r18, Z
     a96:	2f 73       	andi	r18, 0x3F	; 63
     a98:	fc 01       	movw	r30, r24
     a9a:	20 83       	st	Z, r18
     a9c:	8f ee       	ldi	r24, 0xEF	; 239
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	2f ee       	ldi	r18, 0xEF	; 239
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	f9 01       	movw	r30, r18
     aa6:	20 81       	ld	r18, Z
     aa8:	20 68       	ori	r18, 0x80	; 128
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
          break;
     aae:	dc c6       	rjmp	.+3512   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     ab0:	1d 82       	std	Y+5, r1	; 0x05
     ab2:	1e 82       	std	Y+6, r1	; 0x06
     ab4:	1f 82       	std	Y+7, r1	; 0x07
     ab6:	18 86       	std	Y+8, r1	; 0x08
     ab8:	27 ef       	ldi	r18, 0xF7	; 247
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	ce 01       	movw	r24, r28
     abe:	05 96       	adiw	r24, 0x05	; 5
     ac0:	03 96       	adiw	r24, 0x03	; 3
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	48 2f       	mov	r20, r24
     ac8:	44 0f       	add	r20, r20
     aca:	44 0f       	add	r20, r20
     acc:	44 0f       	add	r20, r20
     ace:	ce 01       	movw	r24, r28
     ad0:	05 96       	adiw	r24, 0x05	; 5
     ad2:	02 96       	adiw	r24, 0x02	; 2
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	82 95       	swap	r24
     ada:	86 95       	lsr	r24
     adc:	87 70       	andi	r24, 0x07	; 7
     ade:	84 0f       	add	r24, r20
     ae0:	f9 01       	movw	r30, r18
     ae2:	80 83       	st	Z, r24
     ae4:	26 ef       	ldi	r18, 0xF6	; 246
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	ce 01       	movw	r24, r28
     aea:	05 96       	adiw	r24, 0x05	; 5
     aec:	02 96       	adiw	r24, 0x02	; 2
     aee:	fc 01       	movw	r30, r24
     af0:	80 81       	ld	r24, Z
     af2:	48 2f       	mov	r20, r24
     af4:	44 0f       	add	r20, r20
     af6:	44 0f       	add	r20, r20
     af8:	44 0f       	add	r20, r20
     afa:	ce 01       	movw	r24, r28
     afc:	05 96       	adiw	r24, 0x05	; 5
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	fc 01       	movw	r30, r24
     b02:	80 81       	ld	r24, Z
     b04:	82 95       	swap	r24
     b06:	86 95       	lsr	r24
     b08:	87 70       	andi	r24, 0x07	; 7
     b0a:	84 0f       	add	r24, r20
     b0c:	f9 01       	movw	r30, r18
     b0e:	80 83       	st	Z, r24
     b10:	25 ef       	ldi	r18, 0xF5	; 245
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	ce 01       	movw	r24, r28
     b16:	05 96       	adiw	r24, 0x05	; 5
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	48 2f       	mov	r20, r24
     b20:	44 0f       	add	r20, r20
     b22:	44 0f       	add	r20, r20
     b24:	44 0f       	add	r20, r20
     b26:	ce 01       	movw	r24, r28
     b28:	05 96       	adiw	r24, 0x05	; 5
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	82 95       	swap	r24
     b30:	86 95       	lsr	r24
     b32:	87 70       	andi	r24, 0x07	; 7
     b34:	84 0f       	add	r24, r20
     b36:	f9 01       	movw	r30, r18
     b38:	80 83       	st	Z, r24
     b3a:	84 ef       	ldi	r24, 0xF4	; 244
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9e 01       	movw	r18, r28
     b40:	2b 5f       	subi	r18, 0xFB	; 251
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	f9 01       	movw	r30, r18
     b46:	20 81       	ld	r18, Z
     b48:	22 0f       	add	r18, r18
     b4a:	22 0f       	add	r18, r18
     b4c:	22 0f       	add	r18, r18
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b52:	8f ee       	ldi	r24, 0xEF	; 239
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	2f ee       	ldi	r18, 0xEF	; 239
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	f9 01       	movw	r30, r18
     b5c:	40 81       	ld	r20, Z
     b5e:	29 85       	ldd	r18, Y+9	; 0x09
     b60:	3a 85       	ldd	r19, Y+10	; 0x0a
     b62:	f9 01       	movw	r30, r18
     b64:	26 81       	ldd	r18, Z+6	; 0x06
     b66:	24 2b       	or	r18, r20
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     b6c:	89 85       	ldd	r24, Y+9	; 0x09
     b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b70:	fc 01       	movw	r30, r24
     b72:	12 86       	std	Z+10, r1	; 0x0a
     b74:	84 ef       	ldi	r24, 0xF4	; 244
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	24 ef       	ldi	r18, 0xF4	; 244
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	f9 01       	movw	r30, r18
     b7e:	20 81       	ld	r18, Z
     b80:	24 60       	ori	r18, 0x04	; 4
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
     b86:	80 ef       	ldi	r24, 0xF0	; 240
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	20 ef       	ldi	r18, 0xF0	; 240
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	2b 7f       	andi	r18, 0xFB	; 251
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b98:	84 ef       	ldi	r24, 0xF4	; 244
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	24 ef       	ldi	r18, 0xF4	; 244
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	2e 7f       	andi	r18, 0xFE	; 254
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
          Can_config_rx();       
     baa:	8f ee       	ldi	r24, 0xEF	; 239
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	2f ee       	ldi	r18, 0xEF	; 239
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	2f 73       	andi	r18, 0x3F	; 63
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18
     bbc:	8f ee       	ldi	r24, 0xEF	; 239
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2f ee       	ldi	r18, 0xEF	; 239
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
          break;
     bce:	4c c6       	rjmp	.+3224   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     bd0:	1d 82       	std	Y+5, r1	; 0x05
     bd2:	1e 82       	std	Y+6, r1	; 0x06
     bd4:	1f 82       	std	Y+7, r1	; 0x07
     bd6:	18 86       	std	Y+8, r1	; 0x08
     bd8:	27 ef       	ldi	r18, 0xF7	; 247
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	05 96       	adiw	r24, 0x05	; 5
     be0:	03 96       	adiw	r24, 0x03	; 3
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	44 0f       	add	r20, r20
     bea:	44 0f       	add	r20, r20
     bec:	44 0f       	add	r20, r20
     bee:	ce 01       	movw	r24, r28
     bf0:	05 96       	adiw	r24, 0x05	; 5
     bf2:	02 96       	adiw	r24, 0x02	; 2
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	82 95       	swap	r24
     bfa:	86 95       	lsr	r24
     bfc:	87 70       	andi	r24, 0x07	; 7
     bfe:	84 0f       	add	r24, r20
     c00:	f9 01       	movw	r30, r18
     c02:	80 83       	st	Z, r24
     c04:	26 ef       	ldi	r18, 0xF6	; 246
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	ce 01       	movw	r24, r28
     c0a:	05 96       	adiw	r24, 0x05	; 5
     c0c:	02 96       	adiw	r24, 0x02	; 2
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	44 0f       	add	r20, r20
     c16:	44 0f       	add	r20, r20
     c18:	44 0f       	add	r20, r20
     c1a:	ce 01       	movw	r24, r28
     c1c:	05 96       	adiw	r24, 0x05	; 5
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	fc 01       	movw	r30, r24
     c22:	80 81       	ld	r24, Z
     c24:	82 95       	swap	r24
     c26:	86 95       	lsr	r24
     c28:	87 70       	andi	r24, 0x07	; 7
     c2a:	84 0f       	add	r24, r20
     c2c:	f9 01       	movw	r30, r18
     c2e:	80 83       	st	Z, r24
     c30:	25 ef       	ldi	r18, 0xF5	; 245
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	05 96       	adiw	r24, 0x05	; 5
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	44 0f       	add	r20, r20
     c42:	44 0f       	add	r20, r20
     c44:	44 0f       	add	r20, r20
     c46:	ce 01       	movw	r24, r28
     c48:	05 96       	adiw	r24, 0x05	; 5
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	82 95       	swap	r24
     c50:	86 95       	lsr	r24
     c52:	87 70       	andi	r24, 0x07	; 7
     c54:	84 0f       	add	r24, r20
     c56:	f9 01       	movw	r30, r18
     c58:	80 83       	st	Z, r24
     c5a:	84 ef       	ldi	r24, 0xF4	; 244
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	9e 01       	movw	r18, r28
     c60:	2b 5f       	subi	r18, 0xFB	; 251
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	22 0f       	add	r18, r18
     c6a:	22 0f       	add	r18, r18
     c6c:	22 0f       	add	r18, r18
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c72:	8f ee       	ldi	r24, 0xEF	; 239
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	2f ee       	ldi	r18, 0xEF	; 239
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	40 81       	ld	r20, Z
     c7e:	29 85       	ldd	r18, Y+9	; 0x09
     c80:	3a 85       	ldd	r19, Y+10	; 0x0a
     c82:	f9 01       	movw	r30, r18
     c84:	26 81       	ldd	r18, Z+6	; 0x06
     c86:	24 2b       	or	r18, r20
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	fc 01       	movw	r30, r24
     c94:	22 87       	std	Z+10, r18	; 0x0a
     c96:	84 ef       	ldi	r24, 0xF4	; 244
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	24 ef       	ldi	r18, 0xF4	; 244
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	24 60       	ori	r18, 0x04	; 4
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
     ca8:	80 ef       	ldi	r24, 0xF0	; 240
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	20 ef       	ldi	r18, 0xF0	; 240
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	24 60       	ori	r18, 0x04	; 4
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
          Can_clear_rplv();
     cba:	8f ee       	ldi	r24, 0xEF	; 239
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	2f ee       	ldi	r18, 0xEF	; 239
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	f9 01       	movw	r30, r18
     cc4:	20 81       	ld	r18, Z
     cc6:	2f 7d       	andi	r18, 0xDF	; 223
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ccc:	84 ef       	ldi	r24, 0xF4	; 244
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	24 ef       	ldi	r18, 0xF4	; 244
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	2e 7f       	andi	r18, 0xFE	; 254
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
          Can_config_rx();       
     cde:	8f ee       	ldi	r24, 0xEF	; 239
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	2f ee       	ldi	r18, 0xEF	; 239
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	f9 01       	movw	r30, r18
     ce8:	20 81       	ld	r18, Z
     cea:	2f 73       	andi	r18, 0x3F	; 63
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18
     cf0:	8f ee       	ldi	r24, 0xEF	; 239
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2f ee       	ldi	r18, 0xEF	; 239
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	20 68       	ori	r18, 0x80	; 128
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
          break;
     d02:	b2 c5       	rjmp	.+2916   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	fc 01       	movw	r30, r24
     d0a:	83 85       	ldd	r24, Z+11	; 0x0b
     d0c:	88 23       	and	r24, r24
     d0e:	09 f4       	brne	.+2      	; 0xd12 <__stack+0x413>
     d10:	69 c0       	rjmp	.+210    	; 0xde4 <__stack+0x4e5>
     d12:	83 ef       	ldi	r24, 0xF3	; 243
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	29 85       	ldd	r18, Y+9	; 0x09
     d18:	3a 85       	ldd	r19, Y+10	; 0x0a
     d1a:	2e 5f       	subi	r18, 0xFE	; 254
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	2d 5f       	subi	r18, 0xFD	; 253
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	42 2f       	mov	r20, r18
     d28:	44 0f       	add	r20, r20
     d2a:	44 0f       	add	r20, r20
     d2c:	44 0f       	add	r20, r20
     d2e:	29 85       	ldd	r18, Y+9	; 0x09
     d30:	3a 85       	ldd	r19, Y+10	; 0x0a
     d32:	2e 5f       	subi	r18, 0xFE	; 254
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	2e 5f       	subi	r18, 0xFE	; 254
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	22 95       	swap	r18
     d40:	26 95       	lsr	r18
     d42:	27 70       	andi	r18, 0x07	; 7
     d44:	24 0f       	add	r18, r20
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
     d4a:	82 ef       	ldi	r24, 0xF2	; 242
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	29 85       	ldd	r18, Y+9	; 0x09
     d50:	3a 85       	ldd	r19, Y+10	; 0x0a
     d52:	2e 5f       	subi	r18, 0xFE	; 254
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	2e 5f       	subi	r18, 0xFE	; 254
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	42 2f       	mov	r20, r18
     d60:	44 0f       	add	r20, r20
     d62:	44 0f       	add	r20, r20
     d64:	44 0f       	add	r20, r20
     d66:	29 85       	ldd	r18, Y+9	; 0x09
     d68:	3a 85       	ldd	r19, Y+10	; 0x0a
     d6a:	2e 5f       	subi	r18, 0xFE	; 254
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	f9 01       	movw	r30, r18
     d74:	20 81       	ld	r18, Z
     d76:	22 95       	swap	r18
     d78:	26 95       	lsr	r18
     d7a:	27 70       	andi	r18, 0x07	; 7
     d7c:	24 0f       	add	r18, r20
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
     d82:	81 ef       	ldi	r24, 0xF1	; 241
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	29 85       	ldd	r18, Y+9	; 0x09
     d88:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8a:	2e 5f       	subi	r18, 0xFE	; 254
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	f9 01       	movw	r30, r18
     d94:	20 81       	ld	r18, Z
     d96:	42 2f       	mov	r20, r18
     d98:	44 0f       	add	r20, r20
     d9a:	44 0f       	add	r20, r20
     d9c:	44 0f       	add	r20, r20
     d9e:	29 85       	ldd	r18, Y+9	; 0x09
     da0:	3a 85       	ldd	r19, Y+10	; 0x0a
     da2:	2e 5f       	subi	r18, 0xFE	; 254
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	f9 01       	movw	r30, r18
     da8:	20 81       	ld	r18, Z
     daa:	22 95       	swap	r18
     dac:	26 95       	lsr	r18
     dae:	27 70       	andi	r18, 0x07	; 7
     db0:	24 0f       	add	r18, r20
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
     db6:	80 ef       	ldi	r24, 0xF0	; 240
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	29 85       	ldd	r18, Y+9	; 0x09
     dbc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dbe:	2e 5f       	subi	r18, 0xFE	; 254
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255
     dc2:	f9 01       	movw	r30, r18
     dc4:	20 81       	ld	r18, Z
     dc6:	22 0f       	add	r18, r18
     dc8:	22 0f       	add	r18, r18
     dca:	22 0f       	add	r18, r18
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	8f ee       	ldi	r24, 0xEF	; 239
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	2f ee       	ldi	r18, 0xEF	; 239
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	f9 01       	movw	r30, r18
     dda:	20 81       	ld	r18, Z
     ddc:	20 61       	ori	r18, 0x10	; 16
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
     de2:	30 c0       	rjmp	.+96     	; 0xe44 <__stack+0x545>
          else              { Can_set_std_id(cmd->id.std);}
     de4:	83 ef       	ldi	r24, 0xF3	; 243
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	2e 5f       	subi	r18, 0xFE	; 254
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	f9 01       	movw	r30, r18
     df6:	20 81       	ld	r18, Z
     df8:	42 2f       	mov	r20, r18
     dfa:	42 95       	swap	r20
     dfc:	44 0f       	add	r20, r20
     dfe:	40 7e       	andi	r20, 0xE0	; 224
     e00:	29 85       	ldd	r18, Y+9	; 0x09
     e02:	3a 85       	ldd	r19, Y+10	; 0x0a
     e04:	2e 5f       	subi	r18, 0xFE	; 254
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	f9 01       	movw	r30, r18
     e0a:	20 81       	ld	r18, Z
     e0c:	26 95       	lsr	r18
     e0e:	26 95       	lsr	r18
     e10:	26 95       	lsr	r18
     e12:	24 0f       	add	r18, r20
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	82 ef       	ldi	r24, 0xF2	; 242
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	29 85       	ldd	r18, Y+9	; 0x09
     e1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e20:	2e 5f       	subi	r18, 0xFE	; 254
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	f9 01       	movw	r30, r18
     e26:	20 81       	ld	r18, Z
     e28:	22 95       	swap	r18
     e2a:	22 0f       	add	r18, r18
     e2c:	20 7e       	andi	r18, 0xE0	; 224
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
     e32:	8f ee       	ldi	r24, 0xEF	; 239
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	2f ee       	ldi	r18, 0xEF	; 239
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	f9 01       	movw	r30, r18
     e3c:	20 81       	ld	r18, Z
     e3e:	2f 7e       	andi	r18, 0xEF	; 239
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	9f ef       	ldi	r25, 0xFF	; 255
     e48:	dc 01       	movw	r26, r24
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	af 83       	std	Y+7, r26	; 0x07
     e50:	b8 87       	std	Y+8, r27	; 0x08
     e52:	27 ef       	ldi	r18, 0xF7	; 247
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	ce 01       	movw	r24, r28
     e58:	05 96       	adiw	r24, 0x05	; 5
     e5a:	03 96       	adiw	r24, 0x03	; 3
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	44 0f       	add	r20, r20
     e64:	44 0f       	add	r20, r20
     e66:	44 0f       	add	r20, r20
     e68:	ce 01       	movw	r24, r28
     e6a:	05 96       	adiw	r24, 0x05	; 5
     e6c:	02 96       	adiw	r24, 0x02	; 2
     e6e:	fc 01       	movw	r30, r24
     e70:	80 81       	ld	r24, Z
     e72:	82 95       	swap	r24
     e74:	86 95       	lsr	r24
     e76:	87 70       	andi	r24, 0x07	; 7
     e78:	84 0f       	add	r24, r20
     e7a:	f9 01       	movw	r30, r18
     e7c:	80 83       	st	Z, r24
     e7e:	26 ef       	ldi	r18, 0xF6	; 246
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	ce 01       	movw	r24, r28
     e84:	05 96       	adiw	r24, 0x05	; 5
     e86:	02 96       	adiw	r24, 0x02	; 2
     e88:	fc 01       	movw	r30, r24
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	44 0f       	add	r20, r20
     e90:	44 0f       	add	r20, r20
     e92:	44 0f       	add	r20, r20
     e94:	ce 01       	movw	r24, r28
     e96:	05 96       	adiw	r24, 0x05	; 5
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	82 95       	swap	r24
     ea0:	86 95       	lsr	r24
     ea2:	87 70       	andi	r24, 0x07	; 7
     ea4:	84 0f       	add	r24, r20
     ea6:	f9 01       	movw	r30, r18
     ea8:	80 83       	st	Z, r24
     eaa:	25 ef       	ldi	r18, 0xF5	; 245
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	ce 01       	movw	r24, r28
     eb0:	05 96       	adiw	r24, 0x05	; 5
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	44 0f       	add	r20, r20
     ebc:	44 0f       	add	r20, r20
     ebe:	44 0f       	add	r20, r20
     ec0:	ce 01       	movw	r24, r28
     ec2:	05 96       	adiw	r24, 0x05	; 5
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	82 95       	swap	r24
     eca:	86 95       	lsr	r24
     ecc:	87 70       	andi	r24, 0x07	; 7
     ece:	84 0f       	add	r24, r20
     ed0:	f9 01       	movw	r30, r18
     ed2:	80 83       	st	Z, r24
     ed4:	84 ef       	ldi	r24, 0xF4	; 244
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 01       	movw	r18, r28
     eda:	2b 5f       	subi	r18, 0xFB	; 251
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	f9 01       	movw	r30, r18
     ee0:	20 81       	ld	r18, Z
     ee2:	22 0f       	add	r18, r18
     ee4:	22 0f       	add	r18, r18
     ee6:	22 0f       	add	r18, r18
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     eec:	8f ee       	ldi	r24, 0xEF	; 239
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2f ee       	ldi	r18, 0xEF	; 239
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	40 81       	ld	r20, Z
     ef8:	29 85       	ldd	r18, Y+9	; 0x09
     efa:	3a 85       	ldd	r19, Y+10	; 0x0a
     efc:	f9 01       	movw	r30, r18
     efe:	26 81       	ldd	r18, Z+6	; 0x06
     f00:	24 2b       	or	r18, r20
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     f06:	84 ef       	ldi	r24, 0xF4	; 244
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	24 ef       	ldi	r18, 0xF4	; 244
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	f9 01       	movw	r30, r18
     f10:	20 81       	ld	r18, Z
     f12:	2b 7f       	andi	r18, 0xFB	; 251
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
          Can_set_idemsk();
     f18:	84 ef       	ldi	r24, 0xF4	; 244
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	24 ef       	ldi	r18, 0xF4	; 244
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	f9 01       	movw	r30, r18
     f22:	20 81       	ld	r18, Z
     f24:	21 60       	ori	r18, 0x01	; 1
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
          Can_config_rx();       
     f2a:	8f ee       	ldi	r24, 0xEF	; 239
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	2f ee       	ldi	r18, 0xEF	; 239
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	2f 73       	andi	r18, 0x3F	; 63
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
     f3c:	8f ee       	ldi	r24, 0xEF	; 239
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	2f ee       	ldi	r18, 0xEF	; 239
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	20 81       	ld	r18, Z
     f48:	20 68       	ori	r18, 0x80	; 128
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
          break;
     f4e:	8c c4       	rjmp	.+2328   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	fc 01       	movw	r30, r24
     f56:	83 85       	ldd	r24, Z+11	; 0x0b
     f58:	88 23       	and	r24, r24
     f5a:	09 f4       	brne	.+2      	; 0xf5e <__stack+0x65f>
     f5c:	69 c0       	rjmp	.+210    	; 0x1030 <__stack+0x731>
     f5e:	83 ef       	ldi	r24, 0xF3	; 243
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	29 85       	ldd	r18, Y+9	; 0x09
     f64:	3a 85       	ldd	r19, Y+10	; 0x0a
     f66:	2e 5f       	subi	r18, 0xFE	; 254
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	2d 5f       	subi	r18, 0xFD	; 253
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	f9 01       	movw	r30, r18
     f70:	20 81       	ld	r18, Z
     f72:	42 2f       	mov	r20, r18
     f74:	44 0f       	add	r20, r20
     f76:	44 0f       	add	r20, r20
     f78:	44 0f       	add	r20, r20
     f7a:	29 85       	ldd	r18, Y+9	; 0x09
     f7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f7e:	2e 5f       	subi	r18, 0xFE	; 254
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	2e 5f       	subi	r18, 0xFE	; 254
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	f9 01       	movw	r30, r18
     f88:	20 81       	ld	r18, Z
     f8a:	22 95       	swap	r18
     f8c:	26 95       	lsr	r18
     f8e:	27 70       	andi	r18, 0x07	; 7
     f90:	24 0f       	add	r18, r20
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
     f96:	82 ef       	ldi	r24, 0xF2	; 242
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	29 85       	ldd	r18, Y+9	; 0x09
     f9c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f9e:	2e 5f       	subi	r18, 0xFE	; 254
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	2e 5f       	subi	r18, 0xFE	; 254
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	f9 01       	movw	r30, r18
     fa8:	20 81       	ld	r18, Z
     faa:	42 2f       	mov	r20, r18
     fac:	44 0f       	add	r20, r20
     fae:	44 0f       	add	r20, r20
     fb0:	44 0f       	add	r20, r20
     fb2:	29 85       	ldd	r18, Y+9	; 0x09
     fb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fb6:	2e 5f       	subi	r18, 0xFE	; 254
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	2f 5f       	subi	r18, 0xFF	; 255
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	f9 01       	movw	r30, r18
     fc0:	20 81       	ld	r18, Z
     fc2:	22 95       	swap	r18
     fc4:	26 95       	lsr	r18
     fc6:	27 70       	andi	r18, 0x07	; 7
     fc8:	24 0f       	add	r18, r20
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
     fce:	81 ef       	ldi	r24, 0xF1	; 241
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	29 85       	ldd	r18, Y+9	; 0x09
     fd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd6:	2e 5f       	subi	r18, 0xFE	; 254
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	2f 5f       	subi	r18, 0xFF	; 255
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	f9 01       	movw	r30, r18
     fe0:	20 81       	ld	r18, Z
     fe2:	42 2f       	mov	r20, r18
     fe4:	44 0f       	add	r20, r20
     fe6:	44 0f       	add	r20, r20
     fe8:	44 0f       	add	r20, r20
     fea:	29 85       	ldd	r18, Y+9	; 0x09
     fec:	3a 85       	ldd	r19, Y+10	; 0x0a
     fee:	2e 5f       	subi	r18, 0xFE	; 254
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	22 95       	swap	r18
     ff8:	26 95       	lsr	r18
     ffa:	27 70       	andi	r18, 0x07	; 7
     ffc:	24 0f       	add	r18, r20
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
    1002:	80 ef       	ldi	r24, 0xF0	; 240
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	29 85       	ldd	r18, Y+9	; 0x09
    1008:	3a 85       	ldd	r19, Y+10	; 0x0a
    100a:	2e 5f       	subi	r18, 0xFE	; 254
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	22 0f       	add	r18, r18
    1014:	22 0f       	add	r18, r18
    1016:	22 0f       	add	r18, r18
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	8f ee       	ldi	r24, 0xEF	; 239
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	2f ee       	ldi	r18, 0xEF	; 239
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	20 81       	ld	r18, Z
    1028:	20 61       	ori	r18, 0x10	; 16
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18
    102e:	30 c0       	rjmp	.+96     	; 0x1090 <__stack+0x791>
          else              { Can_set_std_id(cmd->id.std);}
    1030:	83 ef       	ldi	r24, 0xF3	; 243
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	2e 5f       	subi	r18, 0xFE	; 254
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	f9 01       	movw	r30, r18
    1042:	20 81       	ld	r18, Z
    1044:	42 2f       	mov	r20, r18
    1046:	42 95       	swap	r20
    1048:	44 0f       	add	r20, r20
    104a:	40 7e       	andi	r20, 0xE0	; 224
    104c:	29 85       	ldd	r18, Y+9	; 0x09
    104e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1050:	2e 5f       	subi	r18, 0xFE	; 254
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	f9 01       	movw	r30, r18
    1056:	20 81       	ld	r18, Z
    1058:	26 95       	lsr	r18
    105a:	26 95       	lsr	r18
    105c:	26 95       	lsr	r18
    105e:	24 0f       	add	r18, r20
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
    1064:	82 ef       	ldi	r24, 0xF2	; 242
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	29 85       	ldd	r18, Y+9	; 0x09
    106a:	3a 85       	ldd	r19, Y+10	; 0x0a
    106c:	2e 5f       	subi	r18, 0xFE	; 254
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	f9 01       	movw	r30, r18
    1072:	20 81       	ld	r18, Z
    1074:	22 95       	swap	r18
    1076:	22 0f       	add	r18, r18
    1078:	20 7e       	andi	r18, 0xE0	; 224
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
    107e:	8f ee       	ldi	r24, 0xEF	; 239
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2f ee       	ldi	r18, 0xEF	; 239
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	2f 7e       	andi	r18, 0xEF	; 239
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	dc 01       	movw	r26, r24
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	af 83       	std	Y+7, r26	; 0x07
    109c:	b8 87       	std	Y+8, r27	; 0x08
    109e:	27 ef       	ldi	r18, 0xF7	; 247
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	ce 01       	movw	r24, r28
    10a4:	05 96       	adiw	r24, 0x05	; 5
    10a6:	03 96       	adiw	r24, 0x03	; 3
    10a8:	fc 01       	movw	r30, r24
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	44 0f       	add	r20, r20
    10b0:	44 0f       	add	r20, r20
    10b2:	44 0f       	add	r20, r20
    10b4:	ce 01       	movw	r24, r28
    10b6:	05 96       	adiw	r24, 0x05	; 5
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	fc 01       	movw	r30, r24
    10bc:	80 81       	ld	r24, Z
    10be:	82 95       	swap	r24
    10c0:	86 95       	lsr	r24
    10c2:	87 70       	andi	r24, 0x07	; 7
    10c4:	84 0f       	add	r24, r20
    10c6:	f9 01       	movw	r30, r18
    10c8:	80 83       	st	Z, r24
    10ca:	26 ef       	ldi	r18, 0xF6	; 246
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	ce 01       	movw	r24, r28
    10d0:	05 96       	adiw	r24, 0x05	; 5
    10d2:	02 96       	adiw	r24, 0x02	; 2
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	44 0f       	add	r20, r20
    10dc:	44 0f       	add	r20, r20
    10de:	44 0f       	add	r20, r20
    10e0:	ce 01       	movw	r24, r28
    10e2:	05 96       	adiw	r24, 0x05	; 5
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	82 95       	swap	r24
    10ec:	86 95       	lsr	r24
    10ee:	87 70       	andi	r24, 0x07	; 7
    10f0:	84 0f       	add	r24, r20
    10f2:	f9 01       	movw	r30, r18
    10f4:	80 83       	st	Z, r24
    10f6:	25 ef       	ldi	r18, 0xF5	; 245
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	ce 01       	movw	r24, r28
    10fc:	05 96       	adiw	r24, 0x05	; 5
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	44 0f       	add	r20, r20
    1108:	44 0f       	add	r20, r20
    110a:	44 0f       	add	r20, r20
    110c:	ce 01       	movw	r24, r28
    110e:	05 96       	adiw	r24, 0x05	; 5
    1110:	fc 01       	movw	r30, r24
    1112:	80 81       	ld	r24, Z
    1114:	82 95       	swap	r24
    1116:	86 95       	lsr	r24
    1118:	87 70       	andi	r24, 0x07	; 7
    111a:	84 0f       	add	r24, r20
    111c:	f9 01       	movw	r30, r18
    111e:	80 83       	st	Z, r24
    1120:	84 ef       	ldi	r24, 0xF4	; 244
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9e 01       	movw	r18, r28
    1126:	2b 5f       	subi	r18, 0xFB	; 251
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	f9 01       	movw	r30, r18
    112c:	20 81       	ld	r18, Z
    112e:	22 0f       	add	r18, r18
    1130:	22 0f       	add	r18, r18
    1132:	22 0f       	add	r18, r18
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1138:	8f ee       	ldi	r24, 0xEF	; 239
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2f ee       	ldi	r18, 0xEF	; 239
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	40 81       	ld	r20, Z
    1144:	29 85       	ldd	r18, Y+9	; 0x09
    1146:	3a 85       	ldd	r19, Y+10	; 0x0a
    1148:	f9 01       	movw	r30, r18
    114a:	26 81       	ldd	r18, Z+6	; 0x06
    114c:	24 2b       	or	r18, r20
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	fc 01       	movw	r30, r24
    1158:	12 86       	std	Z+10, r1	; 0x0a
    115a:	84 ef       	ldi	r24, 0xF4	; 244
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	24 ef       	ldi	r18, 0xF4	; 244
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	f9 01       	movw	r30, r18
    1164:	20 81       	ld	r18, Z
    1166:	24 60       	ori	r18, 0x04	; 4
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
    116c:	80 ef       	ldi	r24, 0xF0	; 240
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	20 ef       	ldi	r18, 0xF0	; 240
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	f9 01       	movw	r30, r18
    1176:	20 81       	ld	r18, Z
    1178:	2b 7f       	andi	r18, 0xFB	; 251
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
          Can_set_idemsk();
    117e:	84 ef       	ldi	r24, 0xF4	; 244
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	24 ef       	ldi	r18, 0xF4	; 244
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	f9 01       	movw	r30, r18
    1188:	20 81       	ld	r18, Z
    118a:	21 60       	ori	r18, 0x01	; 1
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
          Can_config_rx();       
    1190:	8f ee       	ldi	r24, 0xEF	; 239
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	2f ee       	ldi	r18, 0xEF	; 239
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	f9 01       	movw	r30, r18
    119a:	20 81       	ld	r18, Z
    119c:	2f 73       	andi	r18, 0x3F	; 63
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
    11a2:	8f ee       	ldi	r24, 0xEF	; 239
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	2f ee       	ldi	r18, 0xEF	; 239
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	f9 01       	movw	r30, r18
    11ac:	20 81       	ld	r18, Z
    11ae:	20 68       	ori	r18, 0x80	; 128
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
          break;
    11b4:	59 c3       	rjmp	.+1714   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	fc 01       	movw	r30, r24
    11bc:	83 85       	ldd	r24, Z+11	; 0x0b
    11be:	88 23       	and	r24, r24
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__stack+0x8c5>
    11c2:	69 c0       	rjmp	.+210    	; 0x1296 <__stack+0x997>
    11c4:	83 ef       	ldi	r24, 0xF3	; 243
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	29 85       	ldd	r18, Y+9	; 0x09
    11ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    11cc:	2e 5f       	subi	r18, 0xFE	; 254
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	2d 5f       	subi	r18, 0xFD	; 253
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	f9 01       	movw	r30, r18
    11d6:	20 81       	ld	r18, Z
    11d8:	42 2f       	mov	r20, r18
    11da:	44 0f       	add	r20, r20
    11dc:	44 0f       	add	r20, r20
    11de:	44 0f       	add	r20, r20
    11e0:	29 85       	ldd	r18, Y+9	; 0x09
    11e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e4:	2e 5f       	subi	r18, 0xFE	; 254
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	2e 5f       	subi	r18, 0xFE	; 254
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	22 95       	swap	r18
    11f2:	26 95       	lsr	r18
    11f4:	27 70       	andi	r18, 0x07	; 7
    11f6:	24 0f       	add	r18, r20
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
    11fc:	82 ef       	ldi	r24, 0xF2	; 242
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	29 85       	ldd	r18, Y+9	; 0x09
    1202:	3a 85       	ldd	r19, Y+10	; 0x0a
    1204:	2e 5f       	subi	r18, 0xFE	; 254
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	2e 5f       	subi	r18, 0xFE	; 254
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	f9 01       	movw	r30, r18
    120e:	20 81       	ld	r18, Z
    1210:	42 2f       	mov	r20, r18
    1212:	44 0f       	add	r20, r20
    1214:	44 0f       	add	r20, r20
    1216:	44 0f       	add	r20, r20
    1218:	29 85       	ldd	r18, Y+9	; 0x09
    121a:	3a 85       	ldd	r19, Y+10	; 0x0a
    121c:	2e 5f       	subi	r18, 0xFE	; 254
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	f9 01       	movw	r30, r18
    1226:	20 81       	ld	r18, Z
    1228:	22 95       	swap	r18
    122a:	26 95       	lsr	r18
    122c:	27 70       	andi	r18, 0x07	; 7
    122e:	24 0f       	add	r18, r20
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	81 ef       	ldi	r24, 0xF1	; 241
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	29 85       	ldd	r18, Y+9	; 0x09
    123a:	3a 85       	ldd	r19, Y+10	; 0x0a
    123c:	2e 5f       	subi	r18, 0xFE	; 254
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	f9 01       	movw	r30, r18
    1246:	20 81       	ld	r18, Z
    1248:	42 2f       	mov	r20, r18
    124a:	44 0f       	add	r20, r20
    124c:	44 0f       	add	r20, r20
    124e:	44 0f       	add	r20, r20
    1250:	29 85       	ldd	r18, Y+9	; 0x09
    1252:	3a 85       	ldd	r19, Y+10	; 0x0a
    1254:	2e 5f       	subi	r18, 0xFE	; 254
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	f9 01       	movw	r30, r18
    125a:	20 81       	ld	r18, Z
    125c:	22 95       	swap	r18
    125e:	26 95       	lsr	r18
    1260:	27 70       	andi	r18, 0x07	; 7
    1262:	24 0f       	add	r18, r20
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	80 ef       	ldi	r24, 0xF0	; 240
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	29 85       	ldd	r18, Y+9	; 0x09
    126e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1270:	2e 5f       	subi	r18, 0xFE	; 254
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	f9 01       	movw	r30, r18
    1276:	20 81       	ld	r18, Z
    1278:	22 0f       	add	r18, r18
    127a:	22 0f       	add	r18, r18
    127c:	22 0f       	add	r18, r18
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
    1282:	8f ee       	ldi	r24, 0xEF	; 239
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2f ee       	ldi	r18, 0xEF	; 239
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	20 61       	ori	r18, 0x10	; 16
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
    1294:	30 c0       	rjmp	.+96     	; 0x12f6 <__stack+0x9f7>
          else              { Can_set_std_id(cmd->id.std);}
    1296:	83 ef       	ldi	r24, 0xF3	; 243
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	29 85       	ldd	r18, Y+9	; 0x09
    129c:	3a 85       	ldd	r19, Y+10	; 0x0a
    129e:	2e 5f       	subi	r18, 0xFE	; 254
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	f9 01       	movw	r30, r18
    12a8:	20 81       	ld	r18, Z
    12aa:	42 2f       	mov	r20, r18
    12ac:	42 95       	swap	r20
    12ae:	44 0f       	add	r20, r20
    12b0:	40 7e       	andi	r20, 0xE0	; 224
    12b2:	29 85       	ldd	r18, Y+9	; 0x09
    12b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12b6:	2e 5f       	subi	r18, 0xFE	; 254
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	26 95       	lsr	r18
    12c0:	26 95       	lsr	r18
    12c2:	26 95       	lsr	r18
    12c4:	24 0f       	add	r18, r20
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
    12ca:	82 ef       	ldi	r24, 0xF2	; 242
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	29 85       	ldd	r18, Y+9	; 0x09
    12d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12d2:	2e 5f       	subi	r18, 0xFE	; 254
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	22 95       	swap	r18
    12dc:	22 0f       	add	r18, r18
    12de:	20 7e       	andi	r18, 0xE0	; 224
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
    12e4:	8f ee       	ldi	r24, 0xEF	; 239
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	2f ee       	ldi	r18, 0xEF	; 239
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	f9 01       	movw	r30, r18
    12ee:	20 81       	ld	r18, Z
    12f0:	2f 7e       	andi	r18, 0xEF	; 239
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	dc 01       	movw	r26, r24
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	af 83       	std	Y+7, r26	; 0x07
    1302:	b8 87       	std	Y+8, r27	; 0x08
    1304:	27 ef       	ldi	r18, 0xF7	; 247
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	ce 01       	movw	r24, r28
    130a:	05 96       	adiw	r24, 0x05	; 5
    130c:	03 96       	adiw	r24, 0x03	; 3
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	44 0f       	add	r20, r20
    1316:	44 0f       	add	r20, r20
    1318:	44 0f       	add	r20, r20
    131a:	ce 01       	movw	r24, r28
    131c:	05 96       	adiw	r24, 0x05	; 5
    131e:	02 96       	adiw	r24, 0x02	; 2
    1320:	fc 01       	movw	r30, r24
    1322:	80 81       	ld	r24, Z
    1324:	82 95       	swap	r24
    1326:	86 95       	lsr	r24
    1328:	87 70       	andi	r24, 0x07	; 7
    132a:	84 0f       	add	r24, r20
    132c:	f9 01       	movw	r30, r18
    132e:	80 83       	st	Z, r24
    1330:	26 ef       	ldi	r18, 0xF6	; 246
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	ce 01       	movw	r24, r28
    1336:	05 96       	adiw	r24, 0x05	; 5
    1338:	02 96       	adiw	r24, 0x02	; 2
    133a:	fc 01       	movw	r30, r24
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	44 0f       	add	r20, r20
    1342:	44 0f       	add	r20, r20
    1344:	44 0f       	add	r20, r20
    1346:	ce 01       	movw	r24, r28
    1348:	05 96       	adiw	r24, 0x05	; 5
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	fc 01       	movw	r30, r24
    134e:	80 81       	ld	r24, Z
    1350:	82 95       	swap	r24
    1352:	86 95       	lsr	r24
    1354:	87 70       	andi	r24, 0x07	; 7
    1356:	84 0f       	add	r24, r20
    1358:	f9 01       	movw	r30, r18
    135a:	80 83       	st	Z, r24
    135c:	25 ef       	ldi	r18, 0xF5	; 245
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	ce 01       	movw	r24, r28
    1362:	05 96       	adiw	r24, 0x05	; 5
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	44 0f       	add	r20, r20
    136e:	44 0f       	add	r20, r20
    1370:	44 0f       	add	r20, r20
    1372:	ce 01       	movw	r24, r28
    1374:	05 96       	adiw	r24, 0x05	; 5
    1376:	fc 01       	movw	r30, r24
    1378:	80 81       	ld	r24, Z
    137a:	82 95       	swap	r24
    137c:	86 95       	lsr	r24
    137e:	87 70       	andi	r24, 0x07	; 7
    1380:	84 0f       	add	r24, r20
    1382:	f9 01       	movw	r30, r18
    1384:	80 83       	st	Z, r24
    1386:	84 ef       	ldi	r24, 0xF4	; 244
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9e 01       	movw	r18, r28
    138c:	2b 5f       	subi	r18, 0xFB	; 251
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	f9 01       	movw	r30, r18
    1392:	20 81       	ld	r18, Z
    1394:	22 0f       	add	r18, r18
    1396:	22 0f       	add	r18, r18
    1398:	22 0f       	add	r18, r18
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    139e:	8f ee       	ldi	r24, 0xEF	; 239
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	2f ee       	ldi	r18, 0xEF	; 239
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	40 81       	ld	r20, Z
    13aa:	29 85       	ldd	r18, Y+9	; 0x09
    13ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ae:	f9 01       	movw	r30, r18
    13b0:	26 81       	ldd	r18, Z+6	; 0x06
    13b2:	24 2b       	or	r18, r20
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	fc 01       	movw	r30, r24
    13c0:	22 87       	std	Z+10, r18	; 0x0a
    13c2:	84 ef       	ldi	r24, 0xF4	; 244
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	24 ef       	ldi	r18, 0xF4	; 244
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	20 81       	ld	r18, Z
    13ce:	24 60       	ori	r18, 0x04	; 4
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
    13d4:	80 ef       	ldi	r24, 0xF0	; 240
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	20 ef       	ldi	r18, 0xF0	; 240
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	24 60       	ori	r18, 0x04	; 4
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
          Can_clear_rplv();
    13e6:	8f ee       	ldi	r24, 0xEF	; 239
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	2f ee       	ldi	r18, 0xEF	; 239
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	f9 01       	movw	r30, r18
    13f0:	20 81       	ld	r18, Z
    13f2:	2f 7d       	andi	r18, 0xDF	; 223
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18
          Can_set_idemsk();
    13f8:	84 ef       	ldi	r24, 0xF4	; 244
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	24 ef       	ldi	r18, 0xF4	; 244
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	21 60       	ori	r18, 0x01	; 1
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
          Can_config_rx();       
    140a:	8f ee       	ldi	r24, 0xEF	; 239
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	2f ee       	ldi	r18, 0xEF	; 239
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	2f 73       	andi	r18, 0x3F	; 63
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	8f ee       	ldi	r24, 0xEF	; 239
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	2f ee       	ldi	r18, 0xEF	; 239
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	f9 01       	movw	r30, r18
    1426:	20 81       	ld	r18, Z
    1428:	20 68       	ori	r18, 0x80	; 128
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
          break;
    142e:	1c c2       	rjmp	.+1080   	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1430:	19 82       	std	Y+1, r1	; 0x01
    1432:	13 c0       	rjmp	.+38     	; 0x145a <__stack+0xb5b>
    1434:	8a ef       	ldi	r24, 0xFA	; 250
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	29 85       	ldd	r18, Y+9	; 0x09
    143a:	3a 85       	ldd	r19, Y+10	; 0x0a
    143c:	f9 01       	movw	r30, r18
    143e:	47 81       	ldd	r20, Z+7	; 0x07
    1440:	50 85       	ldd	r21, Z+8	; 0x08
    1442:	29 81       	ldd	r18, Y+1	; 0x01
    1444:	22 2f       	mov	r18, r18
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	24 0f       	add	r18, r20
    144a:	35 1f       	adc	r19, r21
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	fc 01       	movw	r30, r24
    1452:	20 83       	st	Z, r18
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	fc 01       	movw	r30, r24
    1460:	96 81       	ldd	r25, Z+6	; 0x06
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	89 17       	cp	r24, r25
    1466:	30 f3       	brcs	.-52     	; 0x1434 <__stack+0xb35>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1468:	1d 82       	std	Y+5, r1	; 0x05
    146a:	1e 82       	std	Y+6, r1	; 0x06
    146c:	1f 82       	std	Y+7, r1	; 0x07
    146e:	18 86       	std	Y+8, r1	; 0x08
    1470:	27 ef       	ldi	r18, 0xF7	; 247
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	05 96       	adiw	r24, 0x05	; 5
    1478:	03 96       	adiw	r24, 0x03	; 3
    147a:	fc 01       	movw	r30, r24
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	44 0f       	add	r20, r20
    1482:	44 0f       	add	r20, r20
    1484:	44 0f       	add	r20, r20
    1486:	ce 01       	movw	r24, r28
    1488:	05 96       	adiw	r24, 0x05	; 5
    148a:	02 96       	adiw	r24, 0x02	; 2
    148c:	fc 01       	movw	r30, r24
    148e:	80 81       	ld	r24, Z
    1490:	82 95       	swap	r24
    1492:	86 95       	lsr	r24
    1494:	87 70       	andi	r24, 0x07	; 7
    1496:	84 0f       	add	r24, r20
    1498:	f9 01       	movw	r30, r18
    149a:	80 83       	st	Z, r24
    149c:	26 ef       	ldi	r18, 0xF6	; 246
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	ce 01       	movw	r24, r28
    14a2:	05 96       	adiw	r24, 0x05	; 5
    14a4:	02 96       	adiw	r24, 0x02	; 2
    14a6:	fc 01       	movw	r30, r24
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	44 0f       	add	r20, r20
    14ae:	44 0f       	add	r20, r20
    14b0:	44 0f       	add	r20, r20
    14b2:	ce 01       	movw	r24, r28
    14b4:	05 96       	adiw	r24, 0x05	; 5
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	82 95       	swap	r24
    14be:	86 95       	lsr	r24
    14c0:	87 70       	andi	r24, 0x07	; 7
    14c2:	84 0f       	add	r24, r20
    14c4:	f9 01       	movw	r30, r18
    14c6:	80 83       	st	Z, r24
    14c8:	25 ef       	ldi	r18, 0xF5	; 245
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	ce 01       	movw	r24, r28
    14ce:	05 96       	adiw	r24, 0x05	; 5
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	fc 01       	movw	r30, r24
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	44 0f       	add	r20, r20
    14da:	44 0f       	add	r20, r20
    14dc:	44 0f       	add	r20, r20
    14de:	ce 01       	movw	r24, r28
    14e0:	05 96       	adiw	r24, 0x05	; 5
    14e2:	fc 01       	movw	r30, r24
    14e4:	80 81       	ld	r24, Z
    14e6:	82 95       	swap	r24
    14e8:	86 95       	lsr	r24
    14ea:	87 70       	andi	r24, 0x07	; 7
    14ec:	84 0f       	add	r24, r20
    14ee:	f9 01       	movw	r30, r18
    14f0:	80 83       	st	Z, r24
    14f2:	84 ef       	ldi	r24, 0xF4	; 244
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e 01       	movw	r18, r28
    14f8:	2b 5f       	subi	r18, 0xFB	; 251
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	22 0f       	add	r18, r18
    1502:	22 0f       	add	r18, r18
    1504:	22 0f       	add	r18, r18
    1506:	fc 01       	movw	r30, r24
    1508:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    150a:	8f ee       	ldi	r24, 0xEF	; 239
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	2f ee       	ldi	r18, 0xEF	; 239
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	f9 01       	movw	r30, r18
    1514:	40 81       	ld	r20, Z
    1516:	29 85       	ldd	r18, Y+9	; 0x09
    1518:	3a 85       	ldd	r19, Y+10	; 0x0a
    151a:	f9 01       	movw	r30, r18
    151c:	26 81       	ldd	r18, Z+6	; 0x06
    151e:	24 2b       	or	r18, r20
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	fc 01       	movw	r30, r24
    152c:	22 87       	std	Z+10, r18	; 0x0a
    152e:	84 ef       	ldi	r24, 0xF4	; 244
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	24 ef       	ldi	r18, 0xF4	; 244
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	f9 01       	movw	r30, r18
    1538:	20 81       	ld	r18, Z
    153a:	24 60       	ori	r18, 0x04	; 4
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
    1540:	80 ef       	ldi	r24, 0xF0	; 240
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	20 ef       	ldi	r18, 0xF0	; 240
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	24 60       	ori	r18, 0x04	; 4
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
          Can_set_rplv();
    1552:	8f ee       	ldi	r24, 0xEF	; 239
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	2f ee       	ldi	r18, 0xEF	; 239
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	f9 01       	movw	r30, r18
    155c:	20 81       	ld	r18, Z
    155e:	20 62       	ori	r18, 0x20	; 32
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1564:	84 ef       	ldi	r24, 0xF4	; 244
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	24 ef       	ldi	r18, 0xF4	; 244
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	f9 01       	movw	r30, r18
    156e:	20 81       	ld	r18, Z
    1570:	2e 7f       	andi	r18, 0xFE	; 254
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
          Can_config_rx();       
    1576:	8f ee       	ldi	r24, 0xEF	; 239
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	2f ee       	ldi	r18, 0xEF	; 239
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	f9 01       	movw	r30, r18
    1580:	20 81       	ld	r18, Z
    1582:	2f 73       	andi	r18, 0x3F	; 63
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
    1588:	8f ee       	ldi	r24, 0xEF	; 239
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2f ee       	ldi	r18, 0xEF	; 239
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	f9 01       	movw	r30, r18
    1592:	20 81       	ld	r18, Z
    1594:	20 68       	ori	r18, 0x80	; 128
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
          break;
    159a:	66 c1       	rjmp	.+716    	; 0x1868 <__stack+0xf69>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	fc 01       	movw	r30, r24
    15a2:	83 85       	ldd	r24, Z+11	; 0x0b
    15a4:	88 23       	and	r24, r24
    15a6:	09 f4       	brne	.+2      	; 0x15aa <__stack+0xcab>
    15a8:	69 c0       	rjmp	.+210    	; 0x167c <__stack+0xd7d>
    15aa:	83 ef       	ldi	r24, 0xF3	; 243
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	29 85       	ldd	r18, Y+9	; 0x09
    15b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15b2:	2e 5f       	subi	r18, 0xFE	; 254
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	2d 5f       	subi	r18, 0xFD	; 253
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	f9 01       	movw	r30, r18
    15bc:	20 81       	ld	r18, Z
    15be:	42 2f       	mov	r20, r18
    15c0:	44 0f       	add	r20, r20
    15c2:	44 0f       	add	r20, r20
    15c4:	44 0f       	add	r20, r20
    15c6:	29 85       	ldd	r18, Y+9	; 0x09
    15c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ca:	2e 5f       	subi	r18, 0xFE	; 254
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
    15ce:	2e 5f       	subi	r18, 0xFE	; 254
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	f9 01       	movw	r30, r18
    15d4:	20 81       	ld	r18, Z
    15d6:	22 95       	swap	r18
    15d8:	26 95       	lsr	r18
    15da:	27 70       	andi	r18, 0x07	; 7
    15dc:	24 0f       	add	r18, r20
    15de:	fc 01       	movw	r30, r24
    15e0:	20 83       	st	Z, r18
    15e2:	82 ef       	ldi	r24, 0xF2	; 242
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	29 85       	ldd	r18, Y+9	; 0x09
    15e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ea:	2e 5f       	subi	r18, 0xFE	; 254
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	2e 5f       	subi	r18, 0xFE	; 254
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	42 2f       	mov	r20, r18
    15f8:	44 0f       	add	r20, r20
    15fa:	44 0f       	add	r20, r20
    15fc:	44 0f       	add	r20, r20
    15fe:	29 85       	ldd	r18, Y+9	; 0x09
    1600:	3a 85       	ldd	r19, Y+10	; 0x0a
    1602:	2e 5f       	subi	r18, 0xFE	; 254
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	22 95       	swap	r18
    1610:	26 95       	lsr	r18
    1612:	27 70       	andi	r18, 0x07	; 7
    1614:	24 0f       	add	r18, r20
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18
    161a:	81 ef       	ldi	r24, 0xF1	; 241
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	29 85       	ldd	r18, Y+9	; 0x09
    1620:	3a 85       	ldd	r19, Y+10	; 0x0a
    1622:	2e 5f       	subi	r18, 0xFE	; 254
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	f9 01       	movw	r30, r18
    162c:	20 81       	ld	r18, Z
    162e:	42 2f       	mov	r20, r18
    1630:	44 0f       	add	r20, r20
    1632:	44 0f       	add	r20, r20
    1634:	44 0f       	add	r20, r20
    1636:	29 85       	ldd	r18, Y+9	; 0x09
    1638:	3a 85       	ldd	r19, Y+10	; 0x0a
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	f9 01       	movw	r30, r18
    1640:	20 81       	ld	r18, Z
    1642:	22 95       	swap	r18
    1644:	26 95       	lsr	r18
    1646:	27 70       	andi	r18, 0x07	; 7
    1648:	24 0f       	add	r18, r20
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
    164e:	80 ef       	ldi	r24, 0xF0	; 240
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	29 85       	ldd	r18, Y+9	; 0x09
    1654:	3a 85       	ldd	r19, Y+10	; 0x0a
    1656:	2e 5f       	subi	r18, 0xFE	; 254
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	f9 01       	movw	r30, r18
    165c:	20 81       	ld	r18, Z
    165e:	22 0f       	add	r18, r18
    1660:	22 0f       	add	r18, r18
    1662:	22 0f       	add	r18, r18
    1664:	fc 01       	movw	r30, r24
    1666:	20 83       	st	Z, r18
    1668:	8f ee       	ldi	r24, 0xEF	; 239
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	2f ee       	ldi	r18, 0xEF	; 239
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	f9 01       	movw	r30, r18
    1672:	20 81       	ld	r18, Z
    1674:	20 61       	ori	r18, 0x10	; 16
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
    167a:	30 c0       	rjmp	.+96     	; 0x16dc <__stack+0xddd>
          else              { Can_set_std_id(cmd->id.std);}
    167c:	83 ef       	ldi	r24, 0xF3	; 243
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	29 85       	ldd	r18, Y+9	; 0x09
    1682:	3a 85       	ldd	r19, Y+10	; 0x0a
    1684:	2e 5f       	subi	r18, 0xFE	; 254
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	42 2f       	mov	r20, r18
    1692:	42 95       	swap	r20
    1694:	44 0f       	add	r20, r20
    1696:	40 7e       	andi	r20, 0xE0	; 224
    1698:	29 85       	ldd	r18, Y+9	; 0x09
    169a:	3a 85       	ldd	r19, Y+10	; 0x0a
    169c:	2e 5f       	subi	r18, 0xFE	; 254
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	f9 01       	movw	r30, r18
    16a2:	20 81       	ld	r18, Z
    16a4:	26 95       	lsr	r18
    16a6:	26 95       	lsr	r18
    16a8:	26 95       	lsr	r18
    16aa:	24 0f       	add	r18, r20
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
    16b0:	82 ef       	ldi	r24, 0xF2	; 242
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	29 85       	ldd	r18, Y+9	; 0x09
    16b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b8:	2e 5f       	subi	r18, 0xFE	; 254
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	f9 01       	movw	r30, r18
    16be:	20 81       	ld	r18, Z
    16c0:	22 95       	swap	r18
    16c2:	22 0f       	add	r18, r18
    16c4:	20 7e       	andi	r18, 0xE0	; 224
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
    16ca:	8f ee       	ldi	r24, 0xEF	; 239
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	2f ee       	ldi	r18, 0xEF	; 239
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	2f 7e       	andi	r18, 0xEF	; 239
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    16dc:	19 82       	std	Y+1, r1	; 0x01
    16de:	13 c0       	rjmp	.+38     	; 0x1706 <__stack+0xe07>
    16e0:	8a ef       	ldi	r24, 0xFA	; 250
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	29 85       	ldd	r18, Y+9	; 0x09
    16e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e8:	f9 01       	movw	r30, r18
    16ea:	47 81       	ldd	r20, Z+7	; 0x07
    16ec:	50 85       	ldd	r21, Z+8	; 0x08
    16ee:	29 81       	ldd	r18, Y+1	; 0x01
    16f0:	22 2f       	mov	r18, r18
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	24 0f       	add	r18, r20
    16f6:	35 1f       	adc	r19, r21
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	fc 01       	movw	r30, r24
    170c:	96 81       	ldd	r25, Z+6	; 0x06
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	89 17       	cp	r24, r25
    1712:	30 f3       	brcs	.-52     	; 0x16e0 <__stack+0xde1>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	9f ef       	ldi	r25, 0xFF	; 255
    1718:	dc 01       	movw	r26, r24
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	af 83       	std	Y+7, r26	; 0x07
    1720:	b8 87       	std	Y+8, r27	; 0x08
    1722:	27 ef       	ldi	r18, 0xF7	; 247
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	ce 01       	movw	r24, r28
    1728:	05 96       	adiw	r24, 0x05	; 5
    172a:	03 96       	adiw	r24, 0x03	; 3
    172c:	fc 01       	movw	r30, r24
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	44 0f       	add	r20, r20
    1734:	44 0f       	add	r20, r20
    1736:	44 0f       	add	r20, r20
    1738:	ce 01       	movw	r24, r28
    173a:	05 96       	adiw	r24, 0x05	; 5
    173c:	02 96       	adiw	r24, 0x02	; 2
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	82 95       	swap	r24
    1744:	86 95       	lsr	r24
    1746:	87 70       	andi	r24, 0x07	; 7
    1748:	84 0f       	add	r24, r20
    174a:	f9 01       	movw	r30, r18
    174c:	80 83       	st	Z, r24
    174e:	26 ef       	ldi	r18, 0xF6	; 246
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	ce 01       	movw	r24, r28
    1754:	05 96       	adiw	r24, 0x05	; 5
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	44 0f       	add	r20, r20
    1760:	44 0f       	add	r20, r20
    1762:	44 0f       	add	r20, r20
    1764:	ce 01       	movw	r24, r28
    1766:	05 96       	adiw	r24, 0x05	; 5
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	82 95       	swap	r24
    1770:	86 95       	lsr	r24
    1772:	87 70       	andi	r24, 0x07	; 7
    1774:	84 0f       	add	r24, r20
    1776:	f9 01       	movw	r30, r18
    1778:	80 83       	st	Z, r24
    177a:	25 ef       	ldi	r18, 0xF5	; 245
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	ce 01       	movw	r24, r28
    1780:	05 96       	adiw	r24, 0x05	; 5
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	44 0f       	add	r20, r20
    178c:	44 0f       	add	r20, r20
    178e:	44 0f       	add	r20, r20
    1790:	ce 01       	movw	r24, r28
    1792:	05 96       	adiw	r24, 0x05	; 5
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	82 95       	swap	r24
    179a:	86 95       	lsr	r24
    179c:	87 70       	andi	r24, 0x07	; 7
    179e:	84 0f       	add	r24, r20
    17a0:	f9 01       	movw	r30, r18
    17a2:	80 83       	st	Z, r24
    17a4:	84 ef       	ldi	r24, 0xF4	; 244
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9e 01       	movw	r18, r28
    17aa:	2b 5f       	subi	r18, 0xFB	; 251
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	f9 01       	movw	r30, r18
    17b0:	20 81       	ld	r18, Z
    17b2:	22 0f       	add	r18, r18
    17b4:	22 0f       	add	r18, r18
    17b6:	22 0f       	add	r18, r18
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17bc:	8f ee       	ldi	r24, 0xEF	; 239
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	2f ee       	ldi	r18, 0xEF	; 239
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	f9 01       	movw	r30, r18
    17c6:	40 81       	ld	r20, Z
    17c8:	29 85       	ldd	r18, Y+9	; 0x09
    17ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    17cc:	f9 01       	movw	r30, r18
    17ce:	26 81       	ldd	r18, Z+6	; 0x06
    17d0:	24 2b       	or	r18, r20
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	fc 01       	movw	r30, r24
    17de:	22 87       	std	Z+10, r18	; 0x0a
    17e0:	84 ef       	ldi	r24, 0xF4	; 244
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	24 ef       	ldi	r18, 0xF4	; 244
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	24 60       	ori	r18, 0x04	; 4
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
    17f2:	80 ef       	ldi	r24, 0xF0	; 240
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	20 ef       	ldi	r18, 0xF0	; 240
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	24 60       	ori	r18, 0x04	; 4
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
          Can_set_rplv();
    1804:	8f ee       	ldi	r24, 0xEF	; 239
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2f ee       	ldi	r18, 0xEF	; 239
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	20 62       	ori	r18, 0x20	; 32
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18
          Can_set_idemsk();
    1816:	84 ef       	ldi	r24, 0xF4	; 244
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	24 ef       	ldi	r18, 0xF4	; 244
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	20 81       	ld	r18, Z
    1822:	21 60       	ori	r18, 0x01	; 1
    1824:	fc 01       	movw	r30, r24
    1826:	20 83       	st	Z, r18
          Can_config_rx();       
    1828:	8f ee       	ldi	r24, 0xEF	; 239
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	2f ee       	ldi	r18, 0xEF	; 239
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	2f 73       	andi	r18, 0x3F	; 63
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
    183a:	8f ee       	ldi	r24, 0xEF	; 239
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	2f ee       	ldi	r18, 0xEF	; 239
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	20 68       	ori	r18, 0x80	; 128
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
          break;
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <__stack+0xf69>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	fc 01       	movw	r30, r24
    1854:	11 86       	std	Z+9, r1	; 0x09
          break;
    1856:	00 00       	nop
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <__stack+0xf69>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	2f e1       	ldi	r18, 0x1F	; 31
    1860:	fc 01       	movw	r30, r24
    1862:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	01 c0       	rjmp	.+2      	; 0x186a <__stack+0xf6b>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1868:	80 e0       	ldi	r24, 0x00	; 0
}
    186a:	2a 96       	adiw	r28, 0x0a	; 10
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	00 d0       	rcall	.+0      	; 0x1882 <can_get_status+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <can_get_status+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	fc 01       	movw	r30, r24
    1892:	81 85       	ldd	r24, Z+9	; 0x09
    1894:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 23       	and	r24, r24
    189a:	31 f0       	breq	.+12     	; 0x18a8 <can_get_status+0x2c>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	8f 31       	cpi	r24, 0x1F	; 31
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <can_get_status+0x2c>
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	8f 3f       	cpi	r24, 0xFF	; 255
    18a6:	11 f4       	brne	.+4      	; 0x18ac <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	14 c1       	rjmp	.+552    	; 0x1ad4 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    18ac:	8d ee       	ldi	r24, 0xED	; 237
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	f9 01       	movw	r30, r18
    18b6:	20 81       	ld	r18, Z
    18b8:	22 95       	swap	r18
    18ba:	20 7f       	andi	r18, 0xF0	; 240
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    18c0:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	80 32       	cpi	r24, 0x20	; 32
    18ce:	91 05       	cpc	r25, r1
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <can_get_status+0x78>
    18d2:	81 32       	cpi	r24, 0x21	; 33
    18d4:	91 05       	cpc	r25, r1
    18d6:	1c f4       	brge	.+6      	; 0x18de <can_get_status+0x62>
    18d8:	89 2b       	or	r24, r25
    18da:	49 f0       	breq	.+18     	; 0x18ee <can_get_status+0x72>
    18dc:	e5 c0       	rjmp	.+458    	; 0x1aa8 <can_get_status+0x22c>
    18de:	80 34       	cpi	r24, 0x40	; 64
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <can_get_status+0x6a>
    18e4:	cd c0       	rjmp	.+410    	; 0x1a80 <can_get_status+0x204>
    18e6:	80 3a       	cpi	r24, 0xA0	; 160
    18e8:	91 05       	cpc	r25, r1
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <can_get_status+0x78>
    18ec:	dd c0       	rjmp	.+442    	; 0x1aa8 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
            break;
    18f2:	ef c0       	rjmp	.+478    	; 0x1ad2 <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    18f4:	8f ee       	ldi	r24, 0xEF	; 239
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	2f 70       	andi	r18, 0x0F	; 15
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	fc 01       	movw	r30, r24
    1906:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	fc 01       	movw	r30, r24
    190e:	87 81       	ldd	r24, Z+7	; 0x07
    1910:	90 85       	ldd	r25, Z+8	; 0x08
    1912:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1916:	80 ef       	ldi	r24, 0xF0	; 240
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	84 70       	andi	r24, 0x04	; 4
    1924:	99 27       	eor	r25, r25
    1926:	95 95       	asr	r25
    1928:	87 95       	ror	r24
    192a:	95 95       	asr	r25
    192c:	87 95       	ror	r24
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	89 2b       	or	r24, r25
    1932:	09 f4       	brne	.+2      	; 0x1936 <can_get_status+0xba>
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	fc 01       	movw	r30, r24
    193c:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    193e:	8f ee       	ldi	r24, 0xEF	; 239
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	fc 01       	movw	r30, r24
    1944:	80 81       	ld	r24, Z
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	80 71       	andi	r24, 0x10	; 16
    194c:	99 27       	eor	r25, r25
    194e:	95 95       	asr	r25
    1950:	87 95       	ror	r24
    1952:	95 95       	asr	r25
    1954:	87 95       	ror	r24
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	89 2b       	or	r24, r25
    1960:	09 f4       	brne	.+2      	; 0x1964 <can_get_status+0xe8>
    1962:	54 c0       	rjmp	.+168    	; 0x1a0c <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	fc 01       	movw	r30, r24
    196c:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	02 96       	adiw	r24, 0x02	; 2
    1974:	03 96       	adiw	r24, 0x03	; 3
    1976:	23 ef       	ldi	r18, 0xF3	; 243
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	f9 01       	movw	r30, r18
    197c:	20 81       	ld	r18, Z
    197e:	26 95       	lsr	r18
    1980:	26 95       	lsr	r18
    1982:	26 95       	lsr	r18
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	02 96       	adiw	r24, 0x02	; 2
    198e:	02 96       	adiw	r24, 0x02	; 2
    1990:	22 ef       	ldi	r18, 0xF2	; 242
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	f9 01       	movw	r30, r18
    1996:	20 81       	ld	r18, Z
    1998:	42 2f       	mov	r20, r18
    199a:	46 95       	lsr	r20
    199c:	46 95       	lsr	r20
    199e:	46 95       	lsr	r20
    19a0:	23 ef       	ldi	r18, 0xF3	; 243
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	f9 01       	movw	r30, r18
    19a6:	20 81       	ld	r18, Z
    19a8:	22 95       	swap	r18
    19aa:	22 0f       	add	r18, r18
    19ac:	20 7e       	andi	r18, 0xE0	; 224
    19ae:	24 0f       	add	r18, r20
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	02 96       	adiw	r24, 0x02	; 2
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	21 ef       	ldi	r18, 0xF1	; 241
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	f9 01       	movw	r30, r18
    19c2:	20 81       	ld	r18, Z
    19c4:	42 2f       	mov	r20, r18
    19c6:	46 95       	lsr	r20
    19c8:	46 95       	lsr	r20
    19ca:	46 95       	lsr	r20
    19cc:	22 ef       	ldi	r18, 0xF2	; 242
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	f9 01       	movw	r30, r18
    19d2:	20 81       	ld	r18, Z
    19d4:	22 95       	swap	r18
    19d6:	22 0f       	add	r18, r18
    19d8:	20 7e       	andi	r18, 0xE0	; 224
    19da:	24 0f       	add	r18, r20
    19dc:	fc 01       	movw	r30, r24
    19de:	20 83       	st	Z, r18
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	02 96       	adiw	r24, 0x02	; 2
    19e6:	20 ef       	ldi	r18, 0xF0	; 240
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	f9 01       	movw	r30, r18
    19ec:	20 81       	ld	r18, Z
    19ee:	42 2f       	mov	r20, r18
    19f0:	46 95       	lsr	r20
    19f2:	46 95       	lsr	r20
    19f4:	46 95       	lsr	r20
    19f6:	21 ef       	ldi	r18, 0xF1	; 241
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	f9 01       	movw	r30, r18
    19fc:	20 81       	ld	r18, Z
    19fe:	22 95       	swap	r18
    1a00:	22 0f       	add	r18, r18
    1a02:	20 7e       	andi	r18, 0xE0	; 224
    1a04:	24 0f       	add	r18, r20
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	26 c0       	rjmp	.+76     	; 0x1a58 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	fc 01       	movw	r30, r24
    1a12:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	02 96       	adiw	r24, 0x02	; 2
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	23 ef       	ldi	r18, 0xF3	; 243
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	22 95       	swap	r18
    1a26:	26 95       	lsr	r18
    1a28:	27 70       	andi	r18, 0x07	; 7
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	02 96       	adiw	r24, 0x02	; 2
    1a34:	22 ef       	ldi	r18, 0xF2	; 242
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	f9 01       	movw	r30, r18
    1a3a:	20 81       	ld	r18, Z
    1a3c:	42 2f       	mov	r20, r18
    1a3e:	42 95       	swap	r20
    1a40:	46 95       	lsr	r20
    1a42:	47 70       	andi	r20, 0x07	; 7
    1a44:	23 ef       	ldi	r18, 0xF3	; 243
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	f9 01       	movw	r30, r18
    1a4a:	20 81       	ld	r18, Z
    1a4c:	22 0f       	add	r18, r18
    1a4e:	22 0f       	add	r18, r18
    1a50:	22 0f       	add	r18, r18
    1a52:	24 0f       	add	r18, r20
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5e:	fc 01       	movw	r30, r24
    1a60:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a62:	8f ee       	ldi	r24, 0xEF	; 239
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	2f ee       	ldi	r18, 0xEF	; 239
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	20 81       	ld	r18, Z
    1a6e:	2f 73       	andi	r18, 0x3F	; 63
    1a70:	fc 01       	movw	r30, r24
    1a72:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a74:	8e ee       	ldi	r24, 0xEE	; 238
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	fc 01       	movw	r30, r24
    1a7a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a7e:	29 c0       	rjmp	.+82     	; 0x1ad2 <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	2a 81       	ldd	r18, Y+2	; 0x02
    1a86:	fc 01       	movw	r30, r24
    1a88:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a8a:	8f ee       	ldi	r24, 0xEF	; 239
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	2f ee       	ldi	r18, 0xEF	; 239
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	f9 01       	movw	r30, r18
    1a94:	20 81       	ld	r18, Z
    1a96:	2f 73       	andi	r18, 0x3F	; 63
    1a98:	fc 01       	movw	r30, r24
    1a9a:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a9c:	8e ee       	ldi	r24, 0xEE	; 238
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
            break;
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	2a 81       	ldd	r18, Y+2	; 0x02
    1aae:	fc 01       	movw	r30, r24
    1ab0:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1ab2:	8f ee       	ldi	r24, 0xEF	; 239
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	2f ee       	ldi	r18, 0xEF	; 239
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	f9 01       	movw	r30, r18
    1abc:	20 81       	ld	r18, Z
    1abe:	2f 73       	andi	r18, 0x3F	; 63
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ac4:	8e ee       	ldi	r24, 0xEE	; 238
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	89 83       	std	Y+1, r24	; 0x01
            break;
    1ad0:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <__vector_18>:

ISR (CAN_INT_vect)
{
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	1f 92       	push	r1
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	uint8_t tmpPage = 0;
    1b14:	19 82       	std	Y+1, r1	; 0x01
	
	tmpPage = CANPAGE;				/* save current mob */
    1b16:	8d ee       	ldi	r24, 0xED	; 237
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	80 81       	ld	r24, Z
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	CANPAGE = CANHPMOB & 0xF0;		/* selects MOB with highest priority interrupt */
    1b20:	8d ee       	ldi	r24, 0xED	; 237
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	2c ee       	ldi	r18, 0xEC	; 236
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	20 81       	ld	r18, Z
    1b2c:	20 7f       	andi	r18, 0xF0	; 240
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 83       	st	Z, r18

	if (CANSTMOB & (1 << RXOK))
    1b32:	8e ee       	ldi	r24, 0xEE	; 238
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	80 72       	andi	r24, 0x20	; 32
    1b40:	99 27       	eor	r25, r25
    1b42:	89 2b       	or	r24, r25
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <__vector_18+0x66>
    1b46:	65 c1       	rjmp	.+714    	; 0x1e12 <__vector_18+0x330>
	{
		if (Can_get_ide()) // if extended frame
    1b48:	8f ee       	ldi	r24, 0xEF	; 239
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	80 71       	andi	r24, 0x10	; 16
    1b56:	99 27       	eor	r25, r25
    1b58:	95 95       	asr	r25
    1b5a:	87 95       	ror	r24
    1b5c:	95 95       	asr	r25
    1b5e:	87 95       	ror	r24
    1b60:	95 95       	asr	r25
    1b62:	87 95       	ror	r24
    1b64:	95 95       	asr	r25
    1b66:	87 95       	ror	r24
    1b68:	89 2b       	or	r24, r25
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__vector_18+0x8c>
    1b6c:	95 c0       	rjmp	.+298    	; 0x1c98 <__vector_18+0x1b6>
		{
			can_receive_buffer[iPtr].ctrl.ide = 1;
    1b6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	c9 01       	movw	r24, r18
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	82 0f       	add	r24, r18
    1b7e:	93 1f       	adc	r25, r19
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	84 5f       	subi	r24, 0xF4	; 244
    1b8a:	9e 4f       	sbci	r25, 0xFE	; 254
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	fc 01       	movw	r30, r24
    1b90:	20 83       	st	Z, r18
			Can_get_ext_id(can_receive_buffer[iPtr].id.ext);
    1b92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	02 96       	adiw	r24, 0x02	; 2
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	9e 4f       	sbci	r25, 0xFE	; 254
    1bb2:	03 96       	adiw	r24, 0x03	; 3
    1bb4:	23 ef       	ldi	r18, 0xF3	; 243
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	20 81       	ld	r18, Z
    1bbc:	26 95       	lsr	r18
    1bbe:	26 95       	lsr	r18
    1bc0:	26 95       	lsr	r18
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 83       	st	Z, r18
    1bc6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	c9 01       	movw	r24, r18
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	82 0f       	add	r24, r18
    1bd6:	93 1f       	adc	r25, r19
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	02 96       	adiw	r24, 0x02	; 2
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	9e 4f       	sbci	r25, 0xFE	; 254
    1be6:	02 96       	adiw	r24, 0x02	; 2
    1be8:	22 ef       	ldi	r18, 0xF2	; 242
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	f9 01       	movw	r30, r18
    1bee:	20 81       	ld	r18, Z
    1bf0:	42 2f       	mov	r20, r18
    1bf2:	46 95       	lsr	r20
    1bf4:	46 95       	lsr	r20
    1bf6:	46 95       	lsr	r20
    1bf8:	23 ef       	ldi	r18, 0xF3	; 243
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	20 81       	ld	r18, Z
    1c00:	22 95       	swap	r18
    1c02:	22 0f       	add	r18, r18
    1c04:	20 7e       	andi	r18, 0xE0	; 224
    1c06:	24 0f       	add	r18, r20
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 83       	st	Z, r18
    1c0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	c9 01       	movw	r24, r18
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	82 0f       	add	r24, r18
    1c1c:	93 1f       	adc	r25, r19
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	02 96       	adiw	r24, 0x02	; 2
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	21 ef       	ldi	r18, 0xF1	; 241
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	42 2f       	mov	r20, r18
    1c38:	46 95       	lsr	r20
    1c3a:	46 95       	lsr	r20
    1c3c:	46 95       	lsr	r20
    1c3e:	22 ef       	ldi	r18, 0xF2	; 242
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	f9 01       	movw	r30, r18
    1c44:	20 81       	ld	r18, Z
    1c46:	22 95       	swap	r18
    1c48:	22 0f       	add	r18, r18
    1c4a:	20 7e       	andi	r18, 0xE0	; 224
    1c4c:	24 0f       	add	r18, r20
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
    1c52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	02 96       	adiw	r24, 0x02	; 2
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	9e 4f       	sbci	r25, 0xFE	; 254
    1c72:	20 ef       	ldi	r18, 0xF0	; 240
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	f9 01       	movw	r30, r18
    1c78:	20 81       	ld	r18, Z
    1c7a:	42 2f       	mov	r20, r18
    1c7c:	46 95       	lsr	r20
    1c7e:	46 95       	lsr	r20
    1c80:	46 95       	lsr	r20
    1c82:	21 ef       	ldi	r18, 0xF1	; 241
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	f9 01       	movw	r30, r18
    1c88:	20 81       	ld	r18, Z
    1c8a:	22 95       	swap	r18
    1c8c:	22 0f       	add	r18, r18
    1c8e:	20 7e       	andi	r18, 0xE0	; 224
    1c90:	24 0f       	add	r18, r20
    1c92:	fc 01       	movw	r30, r24
    1c94:	20 83       	st	Z, r18
    1c96:	4d c0       	rjmp	.+154    	; 0x1d32 <__vector_18+0x250>
		}
		else // else standard frame
		{
			can_receive_buffer[iPtr].ctrl.ide = 0;
    1c98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	c9 01       	movw	r24, r18
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	84 5f       	subi	r24, 0xF4	; 244
    1cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	10 82       	st	Z, r1
			Can_get_std_id(can_receive_buffer[iPtr].id.std);
    1cba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	82 0f       	add	r24, r18
    1cca:	93 1f       	adc	r25, r19
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	02 96       	adiw	r24, 0x02	; 2
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	9e 4f       	sbci	r25, 0xFE	; 254
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	23 ef       	ldi	r18, 0xF3	; 243
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	f9 01       	movw	r30, r18
    1ce2:	20 81       	ld	r18, Z
    1ce4:	22 95       	swap	r18
    1ce6:	26 95       	lsr	r18
    1ce8:	27 70       	andi	r18, 0x07	; 7
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 83       	st	Z, r18
    1cee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	82 0f       	add	r24, r18
    1cfe:	93 1f       	adc	r25, r19
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	02 96       	adiw	r24, 0x02	; 2
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d0e:	22 ef       	ldi	r18, 0xF2	; 242
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	f9 01       	movw	r30, r18
    1d14:	20 81       	ld	r18, Z
    1d16:	42 2f       	mov	r20, r18
    1d18:	42 95       	swap	r20
    1d1a:	46 95       	lsr	r20
    1d1c:	47 70       	andi	r20, 0x07	; 7
    1d1e:	23 ef       	ldi	r18, 0xF3	; 243
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	f9 01       	movw	r30, r18
    1d24:	20 81       	ld	r18, Z
    1d26:	22 0f       	add	r18, r18
    1d28:	22 0f       	add	r18, r18
    1d2a:	22 0f       	add	r18, r18
    1d2c:	24 0f       	add	r18, r20
    1d2e:	fc 01       	movw	r30, r24
    1d30:	20 83       	st	Z, r18
		}
		
		can_receive_buffer[iPtr].status = can_get_mob_status();
    1d32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d36:	08 2f       	mov	r16, r24
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    1d3e:	28 2f       	mov	r18, r24
    1d40:	c8 01       	movw	r24, r16
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	80 0f       	add	r24, r16
    1d48:	91 1f       	adc	r25, r17
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	86 5f       	subi	r24, 0xF6	; 246
    1d54:	9e 4f       	sbci	r25, 0xFE	; 254
    1d56:	fc 01       	movw	r30, r24
    1d58:	20 83       	st	Z, r18
		can_receive_buffer[iPtr].dlc = Can_get_dlc();
    1d5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8f ee       	ldi	r24, 0xEF	; 239
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	4f 70       	andi	r20, 0x0F	; 15
    1d6e:	c9 01       	movw	r24, r18
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	82 0f       	add	r24, r18
    1d76:	93 1f       	adc	r25, r19
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	89 5f       	subi	r24, 0xF9	; 249
    1d82:	9e 4f       	sbci	r25, 0xFE	; 254
    1d84:	fc 01       	movw	r30, r24
    1d86:	40 83       	st	Z, r20
		can_receive_buffer[iPtr].ctrl.rtr = Can_get_rtr();
    1d88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	80 ef       	ldi	r24, 0xF0	; 240
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	fc 01       	movw	r30, r24
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	84 70       	andi	r24, 0x04	; 4
    1d9e:	99 27       	eor	r25, r25
    1da0:	95 95       	asr	r25
    1da2:	87 95       	ror	r24
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	89 2b       	or	r24, r25
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__vector_18+0x2ce>
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	c9 01       	movw	r24, r18
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	85 5f       	subi	r24, 0xF5	; 245
    1dc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	40 83       	st	Z, r20
		can_get_data(can_receive_buffer[iPtr].pt_data);
    1dca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	88 5f       	subi	r24, 0xF8	; 248
    1de6:	9e 4f       	sbci	r25, 0xFE	; 254
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
		
		iPtr++;
    1df2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (iPtr == CAN_RECEIVED_BUFFER_SIZE)
    1dfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e00:	88 30       	cpi	r24, 0x08	; 8
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <__vector_18+0x326>
		{
			iPtr = 0;
    1e04:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		CANCDMOB = (1 << CONMOB1);
    1e08:	8f ee       	ldi	r24, 0xEF	; 239
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	20 e8       	ldi	r18, 0x80	; 128
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
	}
	
	CANSTMOB = 0x00;
    1e12:	8e ee       	ldi	r24, 0xEE	; 238
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	10 82       	st	Z, r1
	CANPAGE = tmpPage;
    1e1a:	8d ee       	ldi	r24, 0xED	; 237
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	29 81       	ldd	r18, Y+1	; 0x01
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18
}
    1e24:	00 00       	nop
    1e26:	0f 90       	pop	r0
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	ff 91       	pop	r31
    1e2e:	ef 91       	pop	r30
    1e30:	bf 91       	pop	r27
    1e32:	af 91       	pop	r26
    1e34:	9f 91       	pop	r25
    1e36:	8f 91       	pop	r24
    1e38:	7f 91       	pop	r23
    1e3a:	6f 91       	pop	r22
    1e3c:	5f 91       	pop	r21
    1e3e:	4f 91       	pop	r20
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	0f 90       	pop	r0
    1e4a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <__vector_19>:

    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e5c:	0f 92       	push	r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	00 00       	nop
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	0f 90       	pop	r0
    1e70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e74:	0f 90       	pop	r0
    1e76:	1f 90       	pop	r1
    1e78:	18 95       	reti

00001e7a <can_network_init>:
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	1f 92       	push	r1
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01
	can_init(mode);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	0e 94 41 01 	call	0x282	; 0x282 <can_init>
}
    1e8c:	00 00       	nop
    1e8e:	0f 90       	pop	r0
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <can_send_message>:

void can_send_message (void)
{
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	60 97       	sbiw	r28, 0x10	; 16
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
	pt_data[1] = 0xFF;
	message.pt_data = &pt_data[0];
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1eb2:	0d b7       	in	r16, 0x3d	; 61
    1eb4:	1e b7       	in	r17, 0x3e	; 62
{
	can_init(mode);
}

void can_send_message (void)
{
    1eb6:	8d b7       	in	r24, 0x3d	; 61
    1eb8:	9e b7       	in	r25, 0x3e	; 62
    1eba:	7c 01       	movw	r14, r24
	st_cmd_t message;
	message.id.ext = 0x1AC;
    1ebc:	8c ea       	ldi	r24, 0xAC	; 172
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	98 87       	std	Y+8, r25	; 0x08
    1ec8:	a9 87       	std	Y+9, r26	; 0x09
    1eca:	ba 87       	std	Y+10, r27	; 0x0a
	message.ctrl.ide = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	88 8b       	std	Y+16, r24	; 0x10
	message.ctrl.rtr = 0;
    1ed0:	1f 86       	std	Y+15, r1	; 0x0f
	message.dlc = 2;
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
	message.cmd = CMD_TX_DATA;
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pt_data[message.dlc];
    1eda:	2b 85       	ldd	r18, Y+11	; 0x0b
    1edc:	82 2f       	mov	r24, r18
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	82 2f       	mov	r24, r18
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2d b7       	in	r18, 0x3d	; 61
    1eec:	3e b7       	in	r19, 0x3e	; 62
    1eee:	28 1b       	sub	r18, r24
    1ef0:	39 0b       	sbc	r19, r25
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	3e bf       	out	0x3e, r19	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	2d bf       	out	0x3d, r18	; 61
    1efc:	8d b7       	in	r24, 0x3d	; 61
    1efe:	9e b7       	in	r25, 0x3e	; 62
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
	pt_data[0] = 0xEE;
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	2e ee       	ldi	r18, 0xEE	; 238
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 83       	st	Z, r18
	pt_data[1] = 0xFF;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	fc 01       	movw	r30, r24
    1f18:	21 83       	std	Z+1, r18	; 0x01
	message.pt_data = &pt_data[0];
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	9d 87       	std	Y+13, r25	; 0x0d
    1f20:	8c 87       	std	Y+12, r24	; 0x0c
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1f22:	00 00       	nop
    1f24:	ce 01       	movw	r24, r28
    1f26:	05 96       	adiw	r24, 0x05	; 5
    1f28:	0e 94 a8 01 	call	0x350	; 0x350 <can_cmd>
    1f2c:	88 23       	and	r24, r24
    1f2e:	d1 f7       	brne	.-12     	; 0x1f24 <can_send_message+0x8e>
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1f30:	00 00       	nop
    1f32:	ce 01       	movw	r24, r28
    1f34:	05 96       	adiw	r24, 0x05	; 5
    1f36:	0e 94 3e 0c 	call	0x187c	; 0x187c <can_get_status>
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	d1 f3       	breq	.-12     	; 0x1f32 <can_send_message+0x9c>
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	fe be       	out	0x3e, r15	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	ed be       	out	0x3d, r14	; 61
    1f48:	00 00       	nop
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	1e bf       	out	0x3e, r17	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0d bf       	out	0x3d, r16	; 61
    1f54:	60 96       	adiw	r28, 0x10	; 16
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <main>:
#include "can/can_network.h"
#include "timer/timer.h"
#include "helpers.h"

int main(void)
{
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	
	can_network_init(1);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <can_network_init>
	init_1ms_timer();
    1f7c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <init_1ms_timer>
	sei();
    1f80:	78 94       	sei
	
	
    /* Replace with your application code */
    while (1) 
    {
		if (bit_check(TIMER_TASKS, BIT_TIMER_250ms))
    1f82:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	80 71       	andi	r24, 0x10	; 16
    1f8c:	99 27       	eor	r25, r25
    1f8e:	89 2b       	or	r24, r25
    1f90:	c1 f3       	breq	.-16     	; 0x1f82 <main+0x14>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_250ms);
    1f92:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    1f96:	8f 7e       	andi	r24, 0xEF	; 239
    1f98:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
			can_send_message();
    1f9c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <can_send_message>
		}
    }
    1fa0:	f0 cf       	rjmp	.-32     	; 0x1f82 <main+0x14>

00001fa2 <init_1ms_timer>:
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
		while ((TIFR1 & (1 << OCF1A)) == 0);
		TIFR1 |= (1 << OCF1A);
		millis--;
	} while (millis > 0);
}
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <ms_counter>
    1fae:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <ms_counter+0x1>
    1fb2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ms_counter+0x2>
    1fb6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ms_counter+0x3>
    1fba:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_10ms>
    1fbe:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_20ms>
    1fc2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_50ms>
    1fc6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_100ms>
    1fca:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_250ms>
    1fce:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <timer_500ms+0x1>
    1fd2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <timer_500ms>
    1fd6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <timer_1000ms+0x1>
    1fda:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <timer_1000ms>
    1fde:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <TIMER_TASKS>
    1fe2:	87 e4       	ldi	r24, 0x47	; 71
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	29 ef       	ldi	r18, 0xF9	; 249
    1fe8:	fc 01       	movw	r30, r24
    1fea:	20 83       	st	Z, r18
    1fec:	8e e6       	ldi	r24, 0x6E	; 110
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	2e e6       	ldi	r18, 0x6E	; 110
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	f9 01       	movw	r30, r18
    1ff6:	20 81       	ld	r18, Z
    1ff8:	22 60       	ori	r18, 0x02	; 2
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	20 83       	st	Z, r18
    1ffe:	84 e4       	ldi	r24, 0x44	; 68
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	24 e4       	ldi	r18, 0x44	; 68
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	f9 01       	movw	r30, r18
    2008:	20 81       	ld	r18, Z
    200a:	22 60       	ori	r18, 0x02	; 2
    200c:	fc 01       	movw	r30, r24
    200e:	20 83       	st	Z, r18
    2010:	85 e4       	ldi	r24, 0x45	; 69
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	25 e4       	ldi	r18, 0x45	; 69
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	f9 01       	movw	r30, r18
    201a:	20 81       	ld	r18, Z
    201c:	23 60       	ori	r18, 0x03	; 3
    201e:	fc 01       	movw	r30, r24
    2020:	20 83       	st	Z, r18
    2022:	00 00       	nop
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	08 95       	ret

0000202a <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
    202a:	1f 92       	push	r1
    202c:	0f 92       	push	r0
    202e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	2f 93       	push	r18
    2038:	8f 93       	push	r24
    203a:	9f 93       	push	r25
    203c:	af 93       	push	r26
    203e:	bf 93       	push	r27
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	ms_counter++;
    2048:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ms_counter>
    204c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ms_counter+0x1>
    2050:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ms_counter+0x2>
    2054:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ms_counter+0x3>
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	a1 1d       	adc	r26, r1
    205c:	b1 1d       	adc	r27, r1
    205e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ms_counter>
    2062:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <ms_counter+0x1>
    2066:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <ms_counter+0x2>
    206a:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <ms_counter+0x3>
	timer_10ms++;
    206e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_10ms>
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <timer_10ms>
	timer_20ms++;
    2078:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <timer_20ms>
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <timer_20ms>
	timer_50ms++;
    2082:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_50ms>
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <timer_50ms>
	timer_100ms++;
    208c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_100ms>
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timer_100ms>
	timer_250ms++;
    2096:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_250ms>
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timer_250ms>
	timer_500ms++;
    20a0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timer_500ms>
    20a4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timer_500ms+0x1>
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timer_500ms+0x1>
    20ae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timer_500ms>
	timer_1000ms++;
    20b2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timer_1000ms>
    20b6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <timer_1000ms+0x1>
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <timer_1000ms+0x1>
    20c0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <timer_1000ms>
	
	if (timer_10ms == 10)
    20c4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_10ms>
    20c8:	8a 30       	cpi	r24, 0x0A	; 10
    20ca:	39 f4       	brne	.+14     	; 0x20da <__vector_15+0xb0>
	{
		timer_10ms = 0;
    20cc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_10ms>
		bit_set(TIMER_TASKS, BIT_TIMER_10ms);
    20d0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    20d4:	81 60       	ori	r24, 0x01	; 1
    20d6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
    20da:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <timer_20ms>
    20de:	84 31       	cpi	r24, 0x14	; 20
    20e0:	39 f4       	brne	.+14     	; 0x20f0 <__vector_15+0xc6>
	{
		timer_20ms = 0;
    20e2:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_20ms>
		bit_set(TIMER_TASKS, BIT_TIMER_20ms);
    20e6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    20ea:	82 60       	ori	r24, 0x02	; 2
    20ec:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
    20f0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_50ms>
    20f4:	82 33       	cpi	r24, 0x32	; 50
    20f6:	39 f4       	brne	.+14     	; 0x2106 <__vector_15+0xdc>
	{
		timer_50ms = 0;
    20f8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_50ms>
		bit_set(TIMER_TASKS, BIT_TIMER_50ms);
    20fc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    2100:	84 60       	ori	r24, 0x04	; 4
    2102:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
    2106:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_100ms>
    210a:	84 36       	cpi	r24, 0x64	; 100
    210c:	39 f4       	brne	.+14     	; 0x211c <__vector_15+0xf2>
	{
		timer_100ms = 0;
    210e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_100ms>
		bit_set(TIMER_TASKS, BIT_TIMER_100ms);
    2112:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    2116:	88 60       	ori	r24, 0x08	; 8
    2118:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
    211c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_250ms>
    2120:	8a 3f       	cpi	r24, 0xFA	; 250
    2122:	39 f4       	brne	.+14     	; 0x2132 <__vector_15+0x108>
	{
		timer_250ms = 0;
    2124:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_250ms>
		bit_set(TIMER_TASKS, BIT_TIMER_250ms);
    2128:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    212c:	80 61       	ori	r24, 0x10	; 16
    212e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
    2132:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timer_500ms>
    2136:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timer_500ms+0x1>
    213a:	84 3f       	cpi	r24, 0xF4	; 244
    213c:	91 40       	sbci	r25, 0x01	; 1
    213e:	49 f4       	brne	.+18     	; 0x2152 <__vector_15+0x128>
	{
		timer_500ms = 0;
    2140:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <timer_500ms+0x1>
    2144:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <timer_500ms>
		bit_set(TIMER_TASKS, BIT_TIMER_500ms);
    2148:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    214c:	80 62       	ori	r24, 0x20	; 32
    214e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
    2152:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timer_1000ms>
    2156:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <timer_1000ms+0x1>
    215a:	88 3e       	cpi	r24, 0xE8	; 232
    215c:	93 40       	sbci	r25, 0x03	; 3
    215e:	49 f4       	brne	.+18     	; 0x2172 <__vector_15+0x148>
	{
		timer_1000ms = 0;
    2160:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <timer_1000ms+0x1>
    2164:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <timer_1000ms>
		bit_set(TIMER_TASKS, BIT_TIMER_1000ms);
    2168:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <TIMER_TASKS>
    216c:	80 64       	ori	r24, 0x40	; 64
    216e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <TIMER_TASKS>
	}
    2172:	00 00       	nop
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	bf 91       	pop	r27
    217a:	af 91       	pop	r26
    217c:	9f 91       	pop	r25
    217e:	8f 91       	pop	r24
    2180:	2f 91       	pop	r18
    2182:	0f 90       	pop	r0
    2184:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti

0000218e <__tablejump2__>:
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	05 90       	lpm	r0, Z+
    2194:	f4 91       	lpm	r31, Z
    2196:	e0 2d       	mov	r30, r0
    2198:	09 94       	ijmp

0000219a <_exit>:
    219a:	f8 94       	cli

0000219c <__stop_program>:
    219c:	ff cf       	rjmp	.-2      	; 0x219c <__stop_program>
