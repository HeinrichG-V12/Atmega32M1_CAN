
Atmega32M1_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00001028  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001625  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f53  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001044  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  0000474c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b3  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cd  00000000  00000000  0000520b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	21 01       	movw	r4, r2
  7e:	98 01       	movw	r18, r16
  80:	07 02       	muls	r16, r23
  82:	68 02       	muls	r22, r24
  84:	a3 02       	muls	r26, r19
  86:	e8 02       	muls	r30, r24
  88:	31 03       	mulsu	r19, r17
  8a:	b7 03       	fmuls	r19, r23
  8c:	47 04       	cpc	r4, r7
  8e:	e7 04       	cpc	r14, r7
  90:	35 05       	cpc	r19, r5

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d8 e0       	ldi	r29, 0x08	; 8
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 31       	cpi	r26, 0x10	; 16
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 ed 06 	call	0xdda	; 0xdda <main>
  b2:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <can_clear_all_mob+0x1e>
  be:	98 2f       	mov	r25, r24
  c0:	92 95       	swap	r25
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  c8:	ee ee       	ldi	r30, 0xEE	; 238
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <can_clear_all_mob+0x16>
  ce:	11 92       	st	Z+, r1
  d0:	e8 3f       	cpi	r30, 0xF8	; 248
  d2:	f1 05       	cpc	r31, r1
  d4:	e0 f3       	brcs	.-8      	; 0xce <can_clear_all_mob+0x14>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	86 30       	cpi	r24, 0x06	; 6
  da:	88 f3       	brcs	.-30     	; 0xbe <can_clear_all_mob+0x4>
  dc:	08 95       	ret

000000de <can_get_mob_free>:
  de:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0d c0       	rjmp	.+26     	; 0x100 <can_get_mob_free+0x22>
  e6:	98 2f       	mov	r25, r24
  e8:	92 95       	swap	r25
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  f0:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
  f4:	90 7c       	andi	r25, 0xC0	; 192
  f6:	19 f4       	brne	.+6      	; 0xfe <can_get_mob_free+0x20>
  f8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
  fc:	08 95       	ret
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	86 30       	cpi	r24, 0x06	; 6
 102:	88 f3       	brcs	.-30     	; 0xe6 <can_get_mob_free+0x8>
 104:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	08 95       	ret

0000010c <can_get_mob_status>:
 10c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 110:	80 7c       	andi	r24, 0xC0	; 192
 112:	69 f0       	breq	.+26     	; 0x12e <can_get_mob_status+0x22>
 114:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 118:	89 2f       	mov	r24, r25
 11a:	80 7e       	andi	r24, 0xE0	; 224
 11c:	80 32       	cpi	r24, 0x20	; 32
 11e:	41 f0       	breq	.+16     	; 0x130 <can_get_mob_status+0x24>
 120:	80 34       	cpi	r24, 0x40	; 64
 122:	31 f0       	breq	.+12     	; 0x130 <can_get_mob_status+0x24>
 124:	80 3a       	cpi	r24, 0xA0	; 160
 126:	21 f0       	breq	.+8      	; 0x130 <can_get_mob_status+0x24>
 128:	89 2f       	mov	r24, r25
 12a:	8f 71       	andi	r24, 0x1F	; 31
 12c:	08 95       	ret
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	08 95       	ret

00000132 <can_get_data>:
 132:	bc 01       	movw	r22, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	07 c0       	rjmp	.+14     	; 0x146 <can_get_data+0x14>
 138:	fb 01       	movw	r30, r22
 13a:	e9 0f       	add	r30, r25
 13c:	f1 1d       	adc	r31, r1
 13e:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 142:	20 83       	st	Z, r18
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	49 2f       	mov	r20, r25
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 14e:	2f 70       	andi	r18, 0x0F	; 15
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	42 17       	cp	r20, r18
 154:	53 07       	cpc	r21, r19
 156:	84 f3       	brlt	.-32     	; 0x138 <can_get_data+0x6>
 158:	08 95       	ret

0000015a <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    Can_conf_bt();
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 16c:	83 e1       	ldi	r24, 0x13	; 19
 16e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    return 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret

00000176 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 176:	0e 94 ad 00 	call	0x15a	; 0x15a <can_fixed_baudrate>
 17a:	88 23       	and	r24, r24
 17c:	e1 f0       	breq	.+56     	; 0x1b6 <can_init+0x40>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 17e:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
	
	CANIE2 = (1 << IEMOB0);   			// Enable interrupts on mob1 for reception and transmission
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f80de>
	CANIE1 = 0x00;
 188:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7f80df>
	// CANGIE = (1 <<  ENRX);				// Enable interrupts on receive
	
	CANGIE = 0xFE;						// enable all , except overrun
 18c:	8e ef       	ldi	r24, 0xFE	; 254
 18e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
 192:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
	CANIDM2 = 0x00; 	//  " "
 196:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
	CANIDM3 = 0x00; 	//  " "
 19a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
	CANIDM4 = 0x00; 	//  " "    	
 19e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
 1a2:	e8 ed       	ldi	r30, 0xD8	; 216
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	testVar = 0;
 1ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    return (1);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
}
 1b6:	08 95       	ret

000001b8 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <can_cmd+0xa>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <can_cmd+0xc>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	fc 01       	movw	r30, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	8c 30       	cpi	r24, 0x0C	; 12
 1ce:	99 f4       	brne	.+38     	; 0x1f6 <can_cmd+0x3e>
  {
    if (cmd->status == MOB_PENDING)
 1d0:	81 85       	ldd	r24, Z+9	; 0x09
 1d2:	80 36       	cpi	r24, 0x60	; 96
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <can_cmd+0x38>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1d6:	80 81       	ld	r24, Z
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
      Can_mob_abort();
 1e0:	af ee       	ldi	r26, 0xEF	; 239
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	8c 91       	ld	r24, X
 1e6:	8f 73       	andi	r24, 0x3F	; 63
 1e8:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
 1ea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
      cmd->handle = 0;
 1ee:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
 1f0:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	e8 c4       	rjmp	.+2512   	; 0xbc6 <__stack+0x2c7>
 1f6:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1f8:	0e 94 6f 00 	call	0xde	; 0xde <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 1fc:	8f 3f       	cpi	r24, 0xFF	; 255
 1fe:	09 f4       	brne	.+2      	; 0x202 <can_cmd+0x4a>
 200:	dd c4       	rjmp	.+2490   	; 0xbbc <__stack+0x2bd>
    {
      cmd->status = MOB_PENDING; 
 202:	90 e6       	ldi	r25, 0x60	; 96
 204:	d8 01       	movw	r26, r16
 206:	19 96       	adiw	r26, 0x09	; 9
 208:	9c 93       	st	X, r25
 20a:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 20c:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 20e:	82 95       	swap	r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
      Can_clear_mob();
 216:	ee ee       	ldi	r30, 0xEE	; 238
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	01 c0       	rjmp	.+2      	; 0x21e <can_cmd+0x66>
 21c:	11 92       	st	Z+, r1
 21e:	e8 3f       	cpi	r30, 0xF8	; 248
 220:	f1 05       	cpc	r31, r1
 222:	e0 f3       	brcs	.-8      	; 0x21c <can_cmd+0x64>
          
      switch (cmd->cmd)
 224:	d8 01       	movw	r26, r16
 226:	11 96       	adiw	r26, 0x01	; 1
 228:	ec 91       	ld	r30, X
 22a:	8e 2f       	mov	r24, r30
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	eb 30       	cpi	r30, 0x0B	; 11
 234:	f1 05       	cpc	r31, r1
 236:	08 f0       	brcs	.+2      	; 0x23a <can_cmd+0x82>
 238:	bd c4       	rjmp	.+2426   	; 0xbb4 <__stack+0x2b5>
 23a:	e2 5c       	subi	r30, 0xC2	; 194
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 242:	f8 01       	movw	r30, r16
 244:	83 85       	ldd	r24, Z+11	; 0x0b
 246:	88 23       	and	r24, r24
 248:	71 f1       	breq	.+92     	; 0x2a6 <can_cmd+0xee>
 24a:	95 81       	ldd	r25, Z+5	; 0x05
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	99 0f       	add	r25, r25
 250:	99 0f       	add	r25, r25
 252:	99 0f       	add	r25, r25
 254:	82 95       	swap	r24
 256:	86 95       	lsr	r24
 258:	87 70       	andi	r24, 0x07	; 7
 25a:	89 0f       	add	r24, r25
 25c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 260:	94 81       	ldd	r25, Z+4	; 0x04
 262:	83 81       	ldd	r24, Z+3	; 0x03
 264:	99 0f       	add	r25, r25
 266:	99 0f       	add	r25, r25
 268:	99 0f       	add	r25, r25
 26a:	82 95       	swap	r24
 26c:	86 95       	lsr	r24
 26e:	87 70       	andi	r24, 0x07	; 7
 270:	89 0f       	add	r24, r25
 272:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 276:	93 81       	ldd	r25, Z+3	; 0x03
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	99 0f       	add	r25, r25
 27c:	99 0f       	add	r25, r25
 27e:	99 0f       	add	r25, r25
 280:	82 95       	swap	r24
 282:	86 95       	lsr	r24
 284:	87 70       	andi	r24, 0x07	; 7
 286:	89 0f       	add	r24, r25
 288:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 28c:	82 81       	ldd	r24, Z+2	; 0x02
 28e:	88 0f       	add	r24, r24
 290:	88 0f       	add	r24, r24
 292:	88 0f       	add	r24, r24
 294:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 298:	ef ee       	ldi	r30, 0xEF	; 239
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	80 83       	st	Z, r24
    if (mob_handle!= NO_MOB)
    {
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	23 c0       	rjmp	.+70     	; 0x2ec <can_cmd+0x134>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 2a6:	93 81       	ldd	r25, Z+3	; 0x03
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	86 95       	lsr	r24
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	b0 e2       	ldi	r27, 0x20	; 32
 2b2:	9b 9f       	mul	r25, r27
 2b4:	80 0d       	add	r24, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 2bc:	f8 01       	movw	r30, r16
 2be:	82 81       	ldd	r24, Z+2	; 0x02
 2c0:	82 95       	swap	r24
 2c2:	88 0f       	add	r24, r24
 2c4:	80 7e       	andi	r24, 0xE0	; 224
 2c6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 2ca:	ef ee       	ldi	r30, 0xEF	; 239
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	8f 7e       	andi	r24, 0xEF	; 239
 2d2:	80 83       	st	Z, r24
 2d4:	e6 cf       	rjmp	.-52     	; 0x2a2 <can_cmd+0xea>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2d6:	d8 01       	movw	r26, r16
 2d8:	17 96       	adiw	r26, 0x07	; 7
 2da:	ed 91       	ld	r30, X+
 2dc:	fc 91       	ld	r31, X
 2de:	18 97       	sbiw	r26, 0x08	; 8
 2e0:	e8 0f       	add	r30, r24
 2e2:	f1 1d       	adc	r31, r1
 2e4:	90 81       	ld	r25, Z
 2e6:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	f8 01       	movw	r30, r16
 2ee:	96 81       	ldd	r25, Z+6	; 0x06
 2f0:	89 17       	cp	r24, r25
 2f2:	88 f3       	brcs	.-30     	; 0x2d6 <can_cmd+0x11e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 2f4:	82 85       	ldd	r24, Z+10	; 0x0a
 2f6:	88 23       	and	r24, r24
 2f8:	31 f0       	breq	.+12     	; 0x306 <can_cmd+0x14e>
 2fa:	e0 ef       	ldi	r30, 0xF0	; 240
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	84 60       	ori	r24, 0x04	; 4
 302:	80 83       	st	Z, r24
 304:	05 c0       	rjmp	.+10     	; 0x310 <can_cmd+0x158>
            else Can_clear_rtr();    
 306:	e0 ef       	ldi	r30, 0xF0	; 240
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 310:	ef ee       	ldi	r30, 0xEF	; 239
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	90 81       	ld	r25, Z
 316:	d8 01       	movw	r26, r16
 318:	16 96       	adiw	r26, 0x06	; 6
 31a:	8c 91       	ld	r24, X
 31c:	89 2b       	or	r24, r25
 31e:	80 83       	st	Z, r24
          Can_config_tx();
 320:	80 81       	ld	r24, Z
 322:	8f 73       	andi	r24, 0x3F	; 63
 324:	80 83       	st	Z, r24
 326:	80 81       	ld	r24, Z
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 32c:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 32e:	4b c4       	rjmp	.+2198   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 330:	f8 01       	movw	r30, r16
 332:	83 85       	ldd	r24, Z+11	; 0x0b
 334:	88 23       	and	r24, r24
 336:	71 f1       	breq	.+92     	; 0x394 <can_cmd+0x1dc>
 338:	95 81       	ldd	r25, Z+5	; 0x05
 33a:	84 81       	ldd	r24, Z+4	; 0x04
 33c:	99 0f       	add	r25, r25
 33e:	99 0f       	add	r25, r25
 340:	99 0f       	add	r25, r25
 342:	82 95       	swap	r24
 344:	86 95       	lsr	r24
 346:	87 70       	andi	r24, 0x07	; 7
 348:	89 0f       	add	r24, r25
 34a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 34e:	94 81       	ldd	r25, Z+4	; 0x04
 350:	83 81       	ldd	r24, Z+3	; 0x03
 352:	99 0f       	add	r25, r25
 354:	99 0f       	add	r25, r25
 356:	99 0f       	add	r25, r25
 358:	82 95       	swap	r24
 35a:	86 95       	lsr	r24
 35c:	87 70       	andi	r24, 0x07	; 7
 35e:	89 0f       	add	r24, r25
 360:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 364:	93 81       	ldd	r25, Z+3	; 0x03
 366:	82 81       	ldd	r24, Z+2	; 0x02
 368:	99 0f       	add	r25, r25
 36a:	99 0f       	add	r25, r25
 36c:	99 0f       	add	r25, r25
 36e:	82 95       	swap	r24
 370:	86 95       	lsr	r24
 372:	87 70       	andi	r24, 0x07	; 7
 374:	89 0f       	add	r24, r25
 376:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	88 0f       	add	r24, r24
 37e:	88 0f       	add	r24, r24
 380:	88 0f       	add	r24, r24
 382:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 386:	ef ee       	ldi	r30, 0xEF	; 239
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	80 83       	st	Z, r24
    if (mob_handle!= NO_MOB)
    {
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	23 c0       	rjmp	.+70     	; 0x3da <can_cmd+0x222>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 394:	93 81       	ldd	r25, Z+3	; 0x03
 396:	82 81       	ldd	r24, Z+2	; 0x02
 398:	86 95       	lsr	r24
 39a:	86 95       	lsr	r24
 39c:	86 95       	lsr	r24
 39e:	b0 e2       	ldi	r27, 0x20	; 32
 3a0:	9b 9f       	mul	r25, r27
 3a2:	80 0d       	add	r24, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 3aa:	f8 01       	movw	r30, r16
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	82 95       	swap	r24
 3b0:	88 0f       	add	r24, r24
 3b2:	80 7e       	andi	r24, 0xE0	; 224
 3b4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 3b8:	ef ee       	ldi	r30, 0xEF	; 239
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8f 7e       	andi	r24, 0xEF	; 239
 3c0:	80 83       	st	Z, r24
 3c2:	e6 cf       	rjmp	.-52     	; 0x390 <can_cmd+0x1d8>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 3c4:	d8 01       	movw	r26, r16
 3c6:	17 96       	adiw	r26, 0x07	; 7
 3c8:	ed 91       	ld	r30, X+
 3ca:	fc 91       	ld	r31, X
 3cc:	18 97       	sbiw	r26, 0x08	; 8
 3ce:	e8 0f       	add	r30, r24
 3d0:	f1 1d       	adc	r31, r1
 3d2:	90 81       	ld	r25, Z
 3d4:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	f8 01       	movw	r30, r16
 3dc:	96 81       	ldd	r25, Z+6	; 0x06
 3de:	89 17       	cp	r24, r25
 3e0:	88 f3       	brcs	.-30     	; 0x3c4 <can_cmd+0x20c>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 3e2:	12 86       	std	Z+10, r1	; 0x0a
 3e4:	e0 ef       	ldi	r30, 0xF0	; 240
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	8b 7f       	andi	r24, 0xFB	; 251
 3ec:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 3ee:	ef ee       	ldi	r30, 0xEF	; 239
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	90 81       	ld	r25, Z
 3f4:	d8 01       	movw	r26, r16
 3f6:	16 96       	adiw	r26, 0x06	; 6
 3f8:	8c 91       	ld	r24, X
 3fa:	89 2b       	or	r24, r25
 3fc:	80 83       	st	Z, r24
          Can_config_tx();
 3fe:	80 81       	ld	r24, Z
 400:	8f 73       	andi	r24, 0x3F	; 63
 402:	80 83       	st	Z, r24
 404:	80 81       	ld	r24, Z
 406:	80 64       	ori	r24, 0x40	; 64
 408:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 40a:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 40c:	dc c3       	rjmp	.+1976   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 40e:	f8 01       	movw	r30, r16
 410:	83 85       	ldd	r24, Z+11	; 0x0b
 412:	88 23       	and	r24, r24
 414:	69 f1       	breq	.+90     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 416:	95 81       	ldd	r25, Z+5	; 0x05
 418:	84 81       	ldd	r24, Z+4	; 0x04
 41a:	99 0f       	add	r25, r25
 41c:	99 0f       	add	r25, r25
 41e:	99 0f       	add	r25, r25
 420:	82 95       	swap	r24
 422:	86 95       	lsr	r24
 424:	87 70       	andi	r24, 0x07	; 7
 426:	89 0f       	add	r24, r25
 428:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 42c:	94 81       	ldd	r25, Z+4	; 0x04
 42e:	83 81       	ldd	r24, Z+3	; 0x03
 430:	99 0f       	add	r25, r25
 432:	99 0f       	add	r25, r25
 434:	99 0f       	add	r25, r25
 436:	82 95       	swap	r24
 438:	86 95       	lsr	r24
 43a:	87 70       	andi	r24, 0x07	; 7
 43c:	89 0f       	add	r24, r25
 43e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 442:	93 81       	ldd	r25, Z+3	; 0x03
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	99 0f       	add	r25, r25
 448:	99 0f       	add	r25, r25
 44a:	99 0f       	add	r25, r25
 44c:	82 95       	swap	r24
 44e:	86 95       	lsr	r24
 450:	87 70       	andi	r24, 0x07	; 7
 452:	89 0f       	add	r24, r25
 454:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 458:	82 81       	ldd	r24, Z+2	; 0x02
 45a:	88 0f       	add	r24, r24
 45c:	88 0f       	add	r24, r24
 45e:	88 0f       	add	r24, r24
 460:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 464:	ef ee       	ldi	r30, 0xEF	; 239
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	80 61       	ori	r24, 0x10	; 16
 46c:	80 83       	st	Z, r24
 46e:	17 c0       	rjmp	.+46     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
          else              { Can_set_std_id(cmd->id.std);}
 470:	93 81       	ldd	r25, Z+3	; 0x03
 472:	82 81       	ldd	r24, Z+2	; 0x02
 474:	86 95       	lsr	r24
 476:	86 95       	lsr	r24
 478:	86 95       	lsr	r24
 47a:	b0 e2       	ldi	r27, 0x20	; 32
 47c:	9b 9f       	mul	r25, r27
 47e:	80 0d       	add	r24, r0
 480:	11 24       	eor	r1, r1
 482:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 486:	f8 01       	movw	r30, r16
 488:	82 81       	ldd	r24, Z+2	; 0x02
 48a:	82 95       	swap	r24
 48c:	88 0f       	add	r24, r24
 48e:	80 7e       	andi	r24, 0xE0	; 224
 490:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 494:	ef ee       	ldi	r30, 0xEF	; 239
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	8f 7e       	andi	r24, 0xEF	; 239
 49c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	d8 01       	movw	r26, r16
 4a2:	1a 96       	adiw	r26, 0x0a	; 10
 4a4:	8c 93       	st	X, r24
 4a6:	1a 97       	sbiw	r26, 0x0a	; 10
 4a8:	e0 ef       	ldi	r30, 0xF0	; 240
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 4b2:	ef ee       	ldi	r30, 0xEF	; 239
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	90 81       	ld	r25, Z
 4b8:	16 96       	adiw	r26, 0x06	; 6
 4ba:	8c 91       	ld	r24, X
 4bc:	89 2b       	or	r24, r25
 4be:	80 83       	st	Z, r24
          Can_config_tx();
 4c0:	80 81       	ld	r24, Z
 4c2:	8f 73       	andi	r24, 0x3F	; 63
 4c4:	80 83       	st	Z, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	80 64       	ori	r24, 0x40	; 64
 4ca:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 4cc:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 4ce:	7b c3       	rjmp	.+1782   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 4d0:	19 82       	std	Y+1, r1	; 0x01
 4d2:	1a 82       	std	Y+2, r1	; 0x02
 4d4:	1b 82       	std	Y+3, r1	; 0x03
 4d6:	1c 82       	std	Y+4, r1	; 0x04
 4d8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 4dc:	9b 81       	ldd	r25, Y+3	; 0x03
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	99 0f       	add	r25, r25
 4e2:	99 0f       	add	r25, r25
 4e4:	99 0f       	add	r25, r25
 4e6:	82 95       	swap	r24
 4e8:	86 95       	lsr	r24
 4ea:	87 70       	andi	r24, 0x07	; 7
 4ec:	89 0f       	add	r24, r25
 4ee:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	99 0f       	add	r25, r25
 4f8:	99 0f       	add	r25, r25
 4fa:	99 0f       	add	r25, r25
 4fc:	82 95       	swap	r24
 4fe:	86 95       	lsr	r24
 500:	87 70       	andi	r24, 0x07	; 7
 502:	89 0f       	add	r24, r25
 504:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 0f       	add	r24, r24
 50c:	88 0f       	add	r24, r24
 50e:	88 0f       	add	r24, r24
 510:	24 ef       	ldi	r18, 0xF4	; 244
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 518:	ef ee       	ldi	r30, 0xEF	; 239
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	90 81       	ld	r25, Z
 51e:	d8 01       	movw	r26, r16
 520:	16 96       	adiw	r26, 0x06	; 6
 522:	8c 91       	ld	r24, X
 524:	89 2b       	or	r24, r25
 526:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 528:	d9 01       	movw	r26, r18
 52a:	8c 91       	ld	r24, X
 52c:	8b 7f       	andi	r24, 0xFB	; 251
 52e:	8c 93       	st	X, r24
          Can_clear_idemsk();
 530:	8c 91       	ld	r24, X
 532:	8e 7f       	andi	r24, 0xFE	; 254
 534:	8c 93       	st	X, r24
          Can_config_rx();       
 536:	80 81       	ld	r24, Z
 538:	8f 73       	andi	r24, 0x3F	; 63
 53a:	80 83       	st	Z, r24
 53c:	80 81       	ld	r24, Z
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 542:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 544:	40 c3       	rjmp	.+1664   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 546:	19 82       	std	Y+1, r1	; 0x01
 548:	1a 82       	std	Y+2, r1	; 0x02
 54a:	1b 82       	std	Y+3, r1	; 0x03
 54c:	1c 82       	std	Y+4, r1	; 0x04
 54e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 552:	9b 81       	ldd	r25, Y+3	; 0x03
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	99 0f       	add	r25, r25
 558:	99 0f       	add	r25, r25
 55a:	99 0f       	add	r25, r25
 55c:	82 95       	swap	r24
 55e:	86 95       	lsr	r24
 560:	87 70       	andi	r24, 0x07	; 7
 562:	89 0f       	add	r24, r25
 564:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 568:	9a 81       	ldd	r25, Y+2	; 0x02
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	99 0f       	add	r25, r25
 56e:	99 0f       	add	r25, r25
 570:	99 0f       	add	r25, r25
 572:	82 95       	swap	r24
 574:	86 95       	lsr	r24
 576:	87 70       	andi	r24, 0x07	; 7
 578:	89 0f       	add	r24, r25
 57a:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	88 0f       	add	r24, r24
 582:	88 0f       	add	r24, r24
 584:	88 0f       	add	r24, r24
 586:	44 ef       	ldi	r20, 0xF4	; 244
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	fa 01       	movw	r30, r20
 58c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 58e:	ef ee       	ldi	r30, 0xEF	; 239
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	90 81       	ld	r25, Z
 594:	d8 01       	movw	r26, r16
 596:	16 96       	adiw	r26, 0x06	; 6
 598:	8c 91       	ld	r24, X
 59a:	16 97       	sbiw	r26, 0x06	; 6
 59c:	89 2b       	or	r24, r25
 59e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 5a0:	1a 96       	adiw	r26, 0x0a	; 10
 5a2:	1c 92       	st	X, r1
 5a4:	da 01       	movw	r26, r20
 5a6:	8c 91       	ld	r24, X
 5a8:	84 60       	ori	r24, 0x04	; 4
 5aa:	8c 93       	st	X, r24
 5ac:	20 ef       	ldi	r18, 0xF0	; 240
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	d9 01       	movw	r26, r18
 5b2:	8c 91       	ld	r24, X
 5b4:	8b 7f       	andi	r24, 0xFB	; 251
 5b6:	8c 93       	st	X, r24
          Can_clear_idemsk();
 5b8:	da 01       	movw	r26, r20
 5ba:	8c 91       	ld	r24, X
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	8c 93       	st	X, r24
          Can_config_rx();       
 5c0:	80 81       	ld	r24, Z
 5c2:	8f 73       	andi	r24, 0x3F	; 63
 5c4:	80 83       	st	Z, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	80 68       	ori	r24, 0x80	; 128
 5ca:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 5cc:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 5ce:	fb c2       	rjmp	.+1526   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 5d0:	19 82       	std	Y+1, r1	; 0x01
 5d2:	1a 82       	std	Y+2, r1	; 0x02
 5d4:	1b 82       	std	Y+3, r1	; 0x03
 5d6:	1c 82       	std	Y+4, r1	; 0x04
 5d8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 5dc:	9b 81       	ldd	r25, Y+3	; 0x03
 5de:	8a 81       	ldd	r24, Y+2	; 0x02
 5e0:	99 0f       	add	r25, r25
 5e2:	99 0f       	add	r25, r25
 5e4:	99 0f       	add	r25, r25
 5e6:	82 95       	swap	r24
 5e8:	86 95       	lsr	r24
 5ea:	87 70       	andi	r24, 0x07	; 7
 5ec:	89 0f       	add	r24, r25
 5ee:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 5f2:	9a 81       	ldd	r25, Y+2	; 0x02
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	99 0f       	add	r25, r25
 5f8:	99 0f       	add	r25, r25
 5fa:	99 0f       	add	r25, r25
 5fc:	82 95       	swap	r24
 5fe:	86 95       	lsr	r24
 600:	87 70       	andi	r24, 0x07	; 7
 602:	89 0f       	add	r24, r25
 604:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	88 0f       	add	r24, r24
 60c:	88 0f       	add	r24, r24
 60e:	88 0f       	add	r24, r24
 610:	44 ef       	ldi	r20, 0xF4	; 244
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	fa 01       	movw	r30, r20
 616:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 618:	ef ee       	ldi	r30, 0xEF	; 239
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	90 81       	ld	r25, Z
 61e:	d8 01       	movw	r26, r16
 620:	16 96       	adiw	r26, 0x06	; 6
 622:	8c 91       	ld	r24, X
 624:	16 97       	sbiw	r26, 0x06	; 6
 626:	89 2b       	or	r24, r25
 628:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	1a 96       	adiw	r26, 0x0a	; 10
 62e:	8c 93       	st	X, r24
 630:	da 01       	movw	r26, r20
 632:	8c 91       	ld	r24, X
 634:	84 60       	ori	r24, 0x04	; 4
 636:	8c 93       	st	X, r24
 638:	20 ef       	ldi	r18, 0xF0	; 240
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	d9 01       	movw	r26, r18
 63e:	8c 91       	ld	r24, X
 640:	84 60       	ori	r24, 0x04	; 4
 642:	8c 93       	st	X, r24
          Can_clear_rplv();
 644:	80 81       	ld	r24, Z
 646:	8f 7d       	andi	r24, 0xDF	; 223
 648:	80 83       	st	Z, r24
          Can_clear_idemsk();
 64a:	da 01       	movw	r26, r20
 64c:	8c 91       	ld	r24, X
 64e:	8e 7f       	andi	r24, 0xFE	; 254
 650:	8c 93       	st	X, r24
          Can_config_rx();       
 652:	80 81       	ld	r24, Z
 654:	8f 73       	andi	r24, 0x3F	; 63
 656:	80 83       	st	Z, r24
 658:	80 81       	ld	r24, Z
 65a:	80 68       	ori	r24, 0x80	; 128
 65c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 65e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 660:	b2 c2       	rjmp	.+1380   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 662:	f8 01       	movw	r30, r16
 664:	83 85       	ldd	r24, Z+11	; 0x0b
 666:	88 23       	and	r24, r24
 668:	69 f1       	breq	.+90     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
 66a:	95 81       	ldd	r25, Z+5	; 0x05
 66c:	84 81       	ldd	r24, Z+4	; 0x04
 66e:	99 0f       	add	r25, r25
 670:	99 0f       	add	r25, r25
 672:	99 0f       	add	r25, r25
 674:	82 95       	swap	r24
 676:	86 95       	lsr	r24
 678:	87 70       	andi	r24, 0x07	; 7
 67a:	89 0f       	add	r24, r25
 67c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 680:	94 81       	ldd	r25, Z+4	; 0x04
 682:	83 81       	ldd	r24, Z+3	; 0x03
 684:	99 0f       	add	r25, r25
 686:	99 0f       	add	r25, r25
 688:	99 0f       	add	r25, r25
 68a:	82 95       	swap	r24
 68c:	86 95       	lsr	r24
 68e:	87 70       	andi	r24, 0x07	; 7
 690:	89 0f       	add	r24, r25
 692:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	82 81       	ldd	r24, Z+2	; 0x02
 69a:	99 0f       	add	r25, r25
 69c:	99 0f       	add	r25, r25
 69e:	99 0f       	add	r25, r25
 6a0:	82 95       	swap	r24
 6a2:	86 95       	lsr	r24
 6a4:	87 70       	andi	r24, 0x07	; 7
 6a6:	89 0f       	add	r24, r25
 6a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 6ac:	82 81       	ldd	r24, Z+2	; 0x02
 6ae:	88 0f       	add	r24, r24
 6b0:	88 0f       	add	r24, r24
 6b2:	88 0f       	add	r24, r24
 6b4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 6b8:	ef ee       	ldi	r30, 0xEF	; 239
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	80 61       	ori	r24, 0x10	; 16
 6c0:	80 83       	st	Z, r24
 6c2:	17 c0       	rjmp	.+46     	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
          else              { Can_set_std_id(cmd->id.std);}
 6c4:	93 81       	ldd	r25, Z+3	; 0x03
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	86 95       	lsr	r24
 6ca:	86 95       	lsr	r24
 6cc:	86 95       	lsr	r24
 6ce:	b0 e2       	ldi	r27, 0x20	; 32
 6d0:	9b 9f       	mul	r25, r27
 6d2:	80 0d       	add	r24, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 6da:	f8 01       	movw	r30, r16
 6dc:	82 81       	ldd	r24, Z+2	; 0x02
 6de:	82 95       	swap	r24
 6e0:	88 0f       	add	r24, r24
 6e2:	80 7e       	andi	r24, 0xE0	; 224
 6e4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 6e8:	ef ee       	ldi	r30, 0xEF	; 239
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	8f 7e       	andi	r24, 0xEF	; 239
 6f0:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	dc 01       	movw	r26, r24
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	9a 83       	std	Y+2, r25	; 0x02
 6fc:	ab 83       	std	Y+3, r26	; 0x03
 6fe:	bc 83       	std	Y+4, r27	; 0x04
 700:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 704:	9b 81       	ldd	r25, Y+3	; 0x03
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	99 0f       	add	r25, r25
 70a:	99 0f       	add	r25, r25
 70c:	99 0f       	add	r25, r25
 70e:	82 95       	swap	r24
 710:	86 95       	lsr	r24
 712:	87 70       	andi	r24, 0x07	; 7
 714:	89 0f       	add	r24, r25
 716:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 71a:	9a 81       	ldd	r25, Y+2	; 0x02
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	99 0f       	add	r25, r25
 720:	99 0f       	add	r25, r25
 722:	99 0f       	add	r25, r25
 724:	82 95       	swap	r24
 726:	86 95       	lsr	r24
 728:	87 70       	andi	r24, 0x07	; 7
 72a:	89 0f       	add	r24, r25
 72c:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	88 0f       	add	r24, r24
 734:	88 0f       	add	r24, r24
 736:	88 0f       	add	r24, r24
 738:	24 ef       	ldi	r18, 0xF4	; 244
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	d9 01       	movw	r26, r18
 73e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 740:	ef ee       	ldi	r30, 0xEF	; 239
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	90 81       	ld	r25, Z
 746:	d8 01       	movw	r26, r16
 748:	16 96       	adiw	r26, 0x06	; 6
 74a:	8c 91       	ld	r24, X
 74c:	89 2b       	or	r24, r25
 74e:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 750:	d9 01       	movw	r26, r18
 752:	8c 91       	ld	r24, X
 754:	8b 7f       	andi	r24, 0xFB	; 251
 756:	8c 93       	st	X, r24
          Can_set_idemsk();
 758:	8c 91       	ld	r24, X
 75a:	81 60       	ori	r24, 0x01	; 1
 75c:	8c 93       	st	X, r24
          Can_config_rx();       
 75e:	80 81       	ld	r24, Z
 760:	8f 73       	andi	r24, 0x3F	; 63
 762:	80 83       	st	Z, r24
 764:	80 81       	ld	r24, Z
 766:	80 68       	ori	r24, 0x80	; 128
 768:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 76a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 76c:	2c c2       	rjmp	.+1112   	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 76e:	f8 01       	movw	r30, r16
 770:	83 85       	ldd	r24, Z+11	; 0x0b
 772:	88 23       	and	r24, r24
 774:	69 f1       	breq	.+90     	; 0x7d0 <__EEPROM_REGION_LENGTH__+0x3d0>
 776:	95 81       	ldd	r25, Z+5	; 0x05
 778:	84 81       	ldd	r24, Z+4	; 0x04
 77a:	99 0f       	add	r25, r25
 77c:	99 0f       	add	r25, r25
 77e:	99 0f       	add	r25, r25
 780:	82 95       	swap	r24
 782:	86 95       	lsr	r24
 784:	87 70       	andi	r24, 0x07	; 7
 786:	89 0f       	add	r24, r25
 788:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 78c:	94 81       	ldd	r25, Z+4	; 0x04
 78e:	83 81       	ldd	r24, Z+3	; 0x03
 790:	99 0f       	add	r25, r25
 792:	99 0f       	add	r25, r25
 794:	99 0f       	add	r25, r25
 796:	82 95       	swap	r24
 798:	86 95       	lsr	r24
 79a:	87 70       	andi	r24, 0x07	; 7
 79c:	89 0f       	add	r24, r25
 79e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 7a2:	93 81       	ldd	r25, Z+3	; 0x03
 7a4:	82 81       	ldd	r24, Z+2	; 0x02
 7a6:	99 0f       	add	r25, r25
 7a8:	99 0f       	add	r25, r25
 7aa:	99 0f       	add	r25, r25
 7ac:	82 95       	swap	r24
 7ae:	86 95       	lsr	r24
 7b0:	87 70       	andi	r24, 0x07	; 7
 7b2:	89 0f       	add	r24, r25
 7b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 7b8:	82 81       	ldd	r24, Z+2	; 0x02
 7ba:	88 0f       	add	r24, r24
 7bc:	88 0f       	add	r24, r24
 7be:	88 0f       	add	r24, r24
 7c0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 7c4:	ef ee       	ldi	r30, 0xEF	; 239
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	80 61       	ori	r24, 0x10	; 16
 7cc:	80 83       	st	Z, r24
 7ce:	17 c0       	rjmp	.+46     	; 0x7fe <__EEPROM_REGION_LENGTH__+0x3fe>
          else              { Can_set_std_id(cmd->id.std);}
 7d0:	93 81       	ldd	r25, Z+3	; 0x03
 7d2:	82 81       	ldd	r24, Z+2	; 0x02
 7d4:	86 95       	lsr	r24
 7d6:	86 95       	lsr	r24
 7d8:	86 95       	lsr	r24
 7da:	b0 e2       	ldi	r27, 0x20	; 32
 7dc:	9b 9f       	mul	r25, r27
 7de:	80 0d       	add	r24, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 7e6:	f8 01       	movw	r30, r16
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	82 95       	swap	r24
 7ec:	88 0f       	add	r24, r24
 7ee:	80 7e       	andi	r24, 0xE0	; 224
 7f0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 7f4:	ef ee       	ldi	r30, 0xEF	; 239
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	8f 7e       	andi	r24, 0xEF	; 239
 7fc:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	9f ef       	ldi	r25, 0xFF	; 255
 802:	dc 01       	movw	r26, r24
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	9a 83       	std	Y+2, r25	; 0x02
 808:	ab 83       	std	Y+3, r26	; 0x03
 80a:	bc 83       	std	Y+4, r27	; 0x04
 80c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 810:	9b 81       	ldd	r25, Y+3	; 0x03
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	99 0f       	add	r25, r25
 816:	99 0f       	add	r25, r25
 818:	99 0f       	add	r25, r25
 81a:	82 95       	swap	r24
 81c:	86 95       	lsr	r24
 81e:	87 70       	andi	r24, 0x07	; 7
 820:	89 0f       	add	r24, r25
 822:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 826:	9a 81       	ldd	r25, Y+2	; 0x02
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	99 0f       	add	r25, r25
 82c:	99 0f       	add	r25, r25
 82e:	99 0f       	add	r25, r25
 830:	82 95       	swap	r24
 832:	86 95       	lsr	r24
 834:	87 70       	andi	r24, 0x07	; 7
 836:	89 0f       	add	r24, r25
 838:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	88 0f       	add	r24, r24
 840:	88 0f       	add	r24, r24
 842:	88 0f       	add	r24, r24
 844:	44 ef       	ldi	r20, 0xF4	; 244
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	da 01       	movw	r26, r20
 84a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 84c:	ef ee       	ldi	r30, 0xEF	; 239
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	90 81       	ld	r25, Z
 852:	d8 01       	movw	r26, r16
 854:	16 96       	adiw	r26, 0x06	; 6
 856:	8c 91       	ld	r24, X
 858:	16 97       	sbiw	r26, 0x06	; 6
 85a:	89 2b       	or	r24, r25
 85c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 85e:	1a 96       	adiw	r26, 0x0a	; 10
 860:	1c 92       	st	X, r1
 862:	da 01       	movw	r26, r20
 864:	8c 91       	ld	r24, X
 866:	84 60       	ori	r24, 0x04	; 4
 868:	8c 93       	st	X, r24
 86a:	20 ef       	ldi	r18, 0xF0	; 240
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	d9 01       	movw	r26, r18
 870:	8c 91       	ld	r24, X
 872:	8b 7f       	andi	r24, 0xFB	; 251
 874:	8c 93       	st	X, r24
          Can_set_idemsk();
 876:	da 01       	movw	r26, r20
 878:	8c 91       	ld	r24, X
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	8c 93       	st	X, r24
          Can_config_rx();       
 87e:	80 81       	ld	r24, Z
 880:	8f 73       	andi	r24, 0x3F	; 63
 882:	80 83       	st	Z, r24
 884:	80 81       	ld	r24, Z
 886:	80 68       	ori	r24, 0x80	; 128
 888:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 88a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 88c:	9c c1       	rjmp	.+824    	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 88e:	f8 01       	movw	r30, r16
 890:	83 85       	ldd	r24, Z+11	; 0x0b
 892:	88 23       	and	r24, r24
 894:	69 f1       	breq	.+90     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 896:	95 81       	ldd	r25, Z+5	; 0x05
 898:	84 81       	ldd	r24, Z+4	; 0x04
 89a:	99 0f       	add	r25, r25
 89c:	99 0f       	add	r25, r25
 89e:	99 0f       	add	r25, r25
 8a0:	82 95       	swap	r24
 8a2:	86 95       	lsr	r24
 8a4:	87 70       	andi	r24, 0x07	; 7
 8a6:	89 0f       	add	r24, r25
 8a8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 8ac:	94 81       	ldd	r25, Z+4	; 0x04
 8ae:	83 81       	ldd	r24, Z+3	; 0x03
 8b0:	99 0f       	add	r25, r25
 8b2:	99 0f       	add	r25, r25
 8b4:	99 0f       	add	r25, r25
 8b6:	82 95       	swap	r24
 8b8:	86 95       	lsr	r24
 8ba:	87 70       	andi	r24, 0x07	; 7
 8bc:	89 0f       	add	r24, r25
 8be:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	82 81       	ldd	r24, Z+2	; 0x02
 8c6:	99 0f       	add	r25, r25
 8c8:	99 0f       	add	r25, r25
 8ca:	99 0f       	add	r25, r25
 8cc:	82 95       	swap	r24
 8ce:	86 95       	lsr	r24
 8d0:	87 70       	andi	r24, 0x07	; 7
 8d2:	89 0f       	add	r24, r25
 8d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	88 0f       	add	r24, r24
 8dc:	88 0f       	add	r24, r24
 8de:	88 0f       	add	r24, r24
 8e0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 8e4:	ef ee       	ldi	r30, 0xEF	; 239
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	80 61       	ori	r24, 0x10	; 16
 8ec:	80 83       	st	Z, r24
 8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x1f>
          else              { Can_set_std_id(cmd->id.std);}
 8f0:	93 81       	ldd	r25, Z+3	; 0x03
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	86 95       	lsr	r24
 8f6:	86 95       	lsr	r24
 8f8:	86 95       	lsr	r24
 8fa:	b0 e2       	ldi	r27, 0x20	; 32
 8fc:	9b 9f       	mul	r25, r27
 8fe:	80 0d       	add	r24, r0
 900:	11 24       	eor	r1, r1
 902:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 906:	f8 01       	movw	r30, r16
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	82 95       	swap	r24
 90c:	88 0f       	add	r24, r24
 90e:	80 7e       	andi	r24, 0xE0	; 224
 910:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 914:	ef ee       	ldi	r30, 0xEF	; 239
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	8f 7e       	andi	r24, 0xEF	; 239
 91c:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	9f ef       	ldi	r25, 0xFF	; 255
 922:	dc 01       	movw	r26, r24
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	ab 83       	std	Y+3, r26	; 0x03
 92a:	bc 83       	std	Y+4, r27	; 0x04
 92c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 930:	9b 81       	ldd	r25, Y+3	; 0x03
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	99 0f       	add	r25, r25
 936:	99 0f       	add	r25, r25
 938:	99 0f       	add	r25, r25
 93a:	82 95       	swap	r24
 93c:	86 95       	lsr	r24
 93e:	87 70       	andi	r24, 0x07	; 7
 940:	89 0f       	add	r24, r25
 942:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	89 81       	ldd	r24, Y+1	; 0x01
 94a:	99 0f       	add	r25, r25
 94c:	99 0f       	add	r25, r25
 94e:	99 0f       	add	r25, r25
 950:	82 95       	swap	r24
 952:	86 95       	lsr	r24
 954:	87 70       	andi	r24, 0x07	; 7
 956:	89 0f       	add	r24, r25
 958:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	88 0f       	add	r24, r24
 960:	88 0f       	add	r24, r24
 962:	88 0f       	add	r24, r24
 964:	44 ef       	ldi	r20, 0xF4	; 244
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	da 01       	movw	r26, r20
 96a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 96c:	ef ee       	ldi	r30, 0xEF	; 239
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	90 81       	ld	r25, Z
 972:	d8 01       	movw	r26, r16
 974:	16 96       	adiw	r26, 0x06	; 6
 976:	8c 91       	ld	r24, X
 978:	16 97       	sbiw	r26, 0x06	; 6
 97a:	89 2b       	or	r24, r25
 97c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	1a 96       	adiw	r26, 0x0a	; 10
 982:	8c 93       	st	X, r24
 984:	da 01       	movw	r26, r20
 986:	8c 91       	ld	r24, X
 988:	84 60       	ori	r24, 0x04	; 4
 98a:	8c 93       	st	X, r24
 98c:	20 ef       	ldi	r18, 0xF0	; 240
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	d9 01       	movw	r26, r18
 992:	8c 91       	ld	r24, X
 994:	84 60       	ori	r24, 0x04	; 4
 996:	8c 93       	st	X, r24
          Can_clear_rplv();
 998:	80 81       	ld	r24, Z
 99a:	8f 7d       	andi	r24, 0xDF	; 223
 99c:	80 83       	st	Z, r24
          Can_set_idemsk();
 99e:	da 01       	movw	r26, r20
 9a0:	8c 91       	ld	r24, X
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	8c 93       	st	X, r24
          Can_config_rx();       
 9a6:	80 81       	ld	r24, Z
 9a8:	8f 73       	andi	r24, 0x3F	; 63
 9aa:	80 83       	st	Z, r24
 9ac:	80 81       	ld	r24, Z
 9ae:	80 68       	ori	r24, 0x80	; 128
 9b0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 9b2:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 9b4:	08 c1       	rjmp	.+528    	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 9b6:	d8 01       	movw	r26, r16
 9b8:	17 96       	adiw	r26, 0x07	; 7
 9ba:	ed 91       	ld	r30, X+
 9bc:	fc 91       	ld	r31, X
 9be:	18 97       	sbiw	r26, 0x08	; 8
 9c0:	e8 0f       	add	r30, r24
 9c2:	f1 1d       	adc	r31, r1
 9c4:	90 81       	ld	r25, Z
 9c6:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 9ca:	8f 5f       	subi	r24, 0xFF	; 255
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
 9ce:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 9d0:	f8 01       	movw	r30, r16
 9d2:	96 81       	ldd	r25, Z+6	; 0x06
 9d4:	89 17       	cp	r24, r25
 9d6:	78 f3       	brcs	.-34     	; 0x9b6 <__stack+0xb7>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 9d8:	19 82       	std	Y+1, r1	; 0x01
 9da:	1a 82       	std	Y+2, r1	; 0x02
 9dc:	1b 82       	std	Y+3, r1	; 0x03
 9de:	1c 82       	std	Y+4, r1	; 0x04
 9e0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 9e4:	9b 81       	ldd	r25, Y+3	; 0x03
 9e6:	8a 81       	ldd	r24, Y+2	; 0x02
 9e8:	99 0f       	add	r25, r25
 9ea:	99 0f       	add	r25, r25
 9ec:	99 0f       	add	r25, r25
 9ee:	82 95       	swap	r24
 9f0:	86 95       	lsr	r24
 9f2:	87 70       	andi	r24, 0x07	; 7
 9f4:	89 0f       	add	r24, r25
 9f6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 9fa:	9a 81       	ldd	r25, Y+2	; 0x02
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	99 0f       	add	r25, r25
 a00:	99 0f       	add	r25, r25
 a02:	99 0f       	add	r25, r25
 a04:	82 95       	swap	r24
 a06:	86 95       	lsr	r24
 a08:	87 70       	andi	r24, 0x07	; 7
 a0a:	89 0f       	add	r24, r25
 a0c:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	88 0f       	add	r24, r24
 a14:	88 0f       	add	r24, r24
 a16:	88 0f       	add	r24, r24
 a18:	44 ef       	ldi	r20, 0xF4	; 244
 a1a:	50 e0       	ldi	r21, 0x00	; 0
 a1c:	da 01       	movw	r26, r20
 a1e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 a20:	ef ee       	ldi	r30, 0xEF	; 239
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	90 81       	ld	r25, Z
 a26:	d8 01       	movw	r26, r16
 a28:	16 96       	adiw	r26, 0x06	; 6
 a2a:	8c 91       	ld	r24, X
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	89 2b       	or	r24, r25
 a30:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	1a 96       	adiw	r26, 0x0a	; 10
 a36:	8c 93       	st	X, r24
 a38:	da 01       	movw	r26, r20
 a3a:	8c 91       	ld	r24, X
 a3c:	84 60       	ori	r24, 0x04	; 4
 a3e:	8c 93       	st	X, r24
 a40:	20 ef       	ldi	r18, 0xF0	; 240
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	d9 01       	movw	r26, r18
 a46:	8c 91       	ld	r24, X
 a48:	84 60       	ori	r24, 0x04	; 4
 a4a:	8c 93       	st	X, r24
          Can_set_rplv();
 a4c:	80 81       	ld	r24, Z
 a4e:	80 62       	ori	r24, 0x20	; 32
 a50:	80 83       	st	Z, r24
          Can_clear_idemsk();
 a52:	da 01       	movw	r26, r20
 a54:	8c 91       	ld	r24, X
 a56:	8e 7f       	andi	r24, 0xFE	; 254
 a58:	8c 93       	st	X, r24
          Can_config_rx();       
 a5a:	80 81       	ld	r24, Z
 a5c:	8f 73       	andi	r24, 0x3F	; 63
 a5e:	80 83       	st	Z, r24
 a60:	80 81       	ld	r24, Z
 a62:	80 68       	ori	r24, 0x80	; 128
 a64:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a66:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 a68:	ae c0       	rjmp	.+348    	; 0xbc6 <__stack+0x2c7>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 a6a:	f8 01       	movw	r30, r16
 a6c:	83 85       	ldd	r24, Z+11	; 0x0b
 a6e:	88 23       	and	r24, r24
 a70:	71 f1       	breq	.+92     	; 0xace <__stack+0x1cf>
 a72:	95 81       	ldd	r25, Z+5	; 0x05
 a74:	84 81       	ldd	r24, Z+4	; 0x04
 a76:	99 0f       	add	r25, r25
 a78:	99 0f       	add	r25, r25
 a7a:	99 0f       	add	r25, r25
 a7c:	82 95       	swap	r24
 a7e:	86 95       	lsr	r24
 a80:	87 70       	andi	r24, 0x07	; 7
 a82:	89 0f       	add	r24, r25
 a84:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 a88:	94 81       	ldd	r25, Z+4	; 0x04
 a8a:	83 81       	ldd	r24, Z+3	; 0x03
 a8c:	99 0f       	add	r25, r25
 a8e:	99 0f       	add	r25, r25
 a90:	99 0f       	add	r25, r25
 a92:	82 95       	swap	r24
 a94:	86 95       	lsr	r24
 a96:	87 70       	andi	r24, 0x07	; 7
 a98:	89 0f       	add	r24, r25
 a9a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 a9e:	93 81       	ldd	r25, Z+3	; 0x03
 aa0:	82 81       	ldd	r24, Z+2	; 0x02
 aa2:	99 0f       	add	r25, r25
 aa4:	99 0f       	add	r25, r25
 aa6:	99 0f       	add	r25, r25
 aa8:	82 95       	swap	r24
 aaa:	86 95       	lsr	r24
 aac:	87 70       	andi	r24, 0x07	; 7
 aae:	89 0f       	add	r24, r25
 ab0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 ab4:	82 81       	ldd	r24, Z+2	; 0x02
 ab6:	88 0f       	add	r24, r24
 ab8:	88 0f       	add	r24, r24
 aba:	88 0f       	add	r24, r24
 abc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 ac0:	ef ee       	ldi	r30, 0xEF	; 239
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	80 61       	ori	r24, 0x10	; 16
 ac8:	80 83       	st	Z, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
 aca:	80 e0       	ldi	r24, 0x00	; 0
 acc:	23 c0       	rjmp	.+70     	; 0xb14 <__stack+0x215>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
 ace:	93 81       	ldd	r25, Z+3	; 0x03
 ad0:	82 81       	ldd	r24, Z+2	; 0x02
 ad2:	86 95       	lsr	r24
 ad4:	86 95       	lsr	r24
 ad6:	86 95       	lsr	r24
 ad8:	b0 e2       	ldi	r27, 0x20	; 32
 ada:	9b 9f       	mul	r25, r27
 adc:	80 0d       	add	r24, r0
 ade:	11 24       	eor	r1, r1
 ae0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 ae4:	f8 01       	movw	r30, r16
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	82 95       	swap	r24
 aea:	88 0f       	add	r24, r24
 aec:	80 7e       	andi	r24, 0xE0	; 224
 aee:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 af2:	ef ee       	ldi	r30, 0xEF	; 239
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	8f 7e       	andi	r24, 0xEF	; 239
 afa:	80 83       	st	Z, r24
 afc:	e6 cf       	rjmp	.-52     	; 0xaca <__stack+0x1cb>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 afe:	d8 01       	movw	r26, r16
 b00:	17 96       	adiw	r26, 0x07	; 7
 b02:	ed 91       	ld	r30, X+
 b04:	fc 91       	ld	r31, X
 b06:	18 97       	sbiw	r26, 0x08	; 8
 b08:	e8 0f       	add	r30, r24
 b0a:	f1 1d       	adc	r31, r1
 b0c:	90 81       	ld	r25, Z
 b0e:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 b12:	8f 5f       	subi	r24, 0xFF	; 255
 b14:	f8 01       	movw	r30, r16
 b16:	96 81       	ldd	r25, Z+6	; 0x06
 b18:	89 17       	cp	r24, r25
 b1a:	88 f3       	brcs	.-30     	; 0xafe <__stack+0x1ff>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 b1c:	8f ef       	ldi	r24, 0xFF	; 255
 b1e:	9f ef       	ldi	r25, 0xFF	; 255
 b20:	dc 01       	movw	r26, r24
 b22:	89 83       	std	Y+1, r24	; 0x01
 b24:	9a 83       	std	Y+2, r25	; 0x02
 b26:	ab 83       	std	Y+3, r26	; 0x03
 b28:	bc 83       	std	Y+4, r27	; 0x04
 b2a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 b2e:	9b 81       	ldd	r25, Y+3	; 0x03
 b30:	8a 81       	ldd	r24, Y+2	; 0x02
 b32:	99 0f       	add	r25, r25
 b34:	99 0f       	add	r25, r25
 b36:	99 0f       	add	r25, r25
 b38:	82 95       	swap	r24
 b3a:	86 95       	lsr	r24
 b3c:	87 70       	andi	r24, 0x07	; 7
 b3e:	89 0f       	add	r24, r25
 b40:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 b44:	9a 81       	ldd	r25, Y+2	; 0x02
 b46:	89 81       	ldd	r24, Y+1	; 0x01
 b48:	99 0f       	add	r25, r25
 b4a:	99 0f       	add	r25, r25
 b4c:	99 0f       	add	r25, r25
 b4e:	82 95       	swap	r24
 b50:	86 95       	lsr	r24
 b52:	87 70       	andi	r24, 0x07	; 7
 b54:	89 0f       	add	r24, r25
 b56:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
 b5c:	88 0f       	add	r24, r24
 b5e:	88 0f       	add	r24, r24
 b60:	88 0f       	add	r24, r24
 b62:	44 ef       	ldi	r20, 0xF4	; 244
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	da 01       	movw	r26, r20
 b68:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 b6a:	ef ee       	ldi	r30, 0xEF	; 239
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	90 81       	ld	r25, Z
 b70:	d8 01       	movw	r26, r16
 b72:	16 96       	adiw	r26, 0x06	; 6
 b74:	8c 91       	ld	r24, X
 b76:	16 97       	sbiw	r26, 0x06	; 6
 b78:	89 2b       	or	r24, r25
 b7a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	1a 96       	adiw	r26, 0x0a	; 10
 b80:	8c 93       	st	X, r24
 b82:	da 01       	movw	r26, r20
 b84:	8c 91       	ld	r24, X
 b86:	84 60       	ori	r24, 0x04	; 4
 b88:	8c 93       	st	X, r24
 b8a:	20 ef       	ldi	r18, 0xF0	; 240
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	d9 01       	movw	r26, r18
 b90:	8c 91       	ld	r24, X
 b92:	84 60       	ori	r24, 0x04	; 4
 b94:	8c 93       	st	X, r24
          Can_set_rplv();
 b96:	80 81       	ld	r24, Z
 b98:	80 62       	ori	r24, 0x20	; 32
 b9a:	80 83       	st	Z, r24
          Can_set_idemsk();
 b9c:	da 01       	movw	r26, r20
 b9e:	8c 91       	ld	r24, X
 ba0:	81 60       	ori	r24, 0x01	; 1
 ba2:	8c 93       	st	X, r24
          Can_config_rx();       
 ba4:	80 81       	ld	r24, Z
 ba6:	8f 73       	andi	r24, 0x3F	; 63
 ba8:	80 83       	st	Z, r24
 baa:	80 81       	ld	r24, Z
 bac:	80 68       	ori	r24, 0x80	; 128
 bae:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 bb0:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <__stack+0x2c7>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 bb4:	f8 01       	movw	r30, r16
 bb6:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 bb8:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__stack+0x2c7>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 bbc:	8f e1       	ldi	r24, 0x1F	; 31
 bbe:	d8 01       	movw	r26, r16
 bc0:	19 96       	adiw	r26, 0x09	; 9
 bc2:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 bc6:	0f 90       	pop	r0
 bc8:	0f 90       	pop	r0
 bca:	0f 90       	pop	r0
 bcc:	0f 90       	pop	r0
 bce:	df 91       	pop	r29
 bd0:	cf 91       	pop	r28
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	08 95       	ret

00000bd8 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	fc 01       	movw	r30, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 be0:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 be2:	99 23       	and	r25, r25
 be4:	09 f4       	brne	.+2      	; 0xbe8 <can_get_status+0x10>
 be6:	8c c0       	rjmp	.+280    	; 0xd00 <can_get_status+0x128>
 be8:	9f 31       	cpi	r25, 0x1F	; 31
 bea:	09 f4       	brne	.+2      	; 0xbee <can_get_status+0x16>
 bec:	8b c0       	rjmp	.+278    	; 0xd04 <can_get_status+0x12c>
 bee:	9f 3f       	cpi	r25, 0xFF	; 255
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <can_get_status+0x1c>
 bf2:	8a c0       	rjmp	.+276    	; 0xd08 <can_get_status+0x130>
 bf4:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 bf6:	80 81       	ld	r24, Z
 bf8:	82 95       	swap	r24
 bfa:	80 7f       	andi	r24, 0xF0	; 240
 bfc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    a_status = can_get_mob_status();
 c00:	0e 94 86 00 	call	0x10c	; 0x10c <can_get_mob_status>
 c04:	18 2f       	mov	r17, r24
    
    switch (a_status)
 c06:	80 32       	cpi	r24, 0x20	; 32
 c08:	59 f0       	breq	.+22     	; 0xc20 <can_get_status+0x48>
 c0a:	20 f4       	brcc	.+8      	; 0xc14 <can_get_status+0x3c>
 c0c:	88 23       	and	r24, r24
 c0e:	09 f4       	brne	.+2      	; 0xc12 <can_get_status+0x3a>
 c10:	7d c0       	rjmp	.+250    	; 0xd0c <can_get_status+0x134>
 c12:	6c c0       	rjmp	.+216    	; 0xcec <can_get_status+0x114>
 c14:	80 34       	cpi	r24, 0x40	; 64
 c16:	09 f4       	brne	.+2      	; 0xc1a <can_get_status+0x42>
 c18:	5f c0       	rjmp	.+190    	; 0xcd8 <can_get_status+0x100>
 c1a:	80 3a       	cpi	r24, 0xA0	; 160
 c1c:	09 f0       	breq	.+2      	; 0xc20 <can_get_status+0x48>
 c1e:	66 c0       	rjmp	.+204    	; 0xcec <can_get_status+0x114>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 c20:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 c24:	8f 70       	andi	r24, 0x0F	; 15
 c26:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 c28:	8f 81       	ldd	r24, Y+7	; 0x07
 c2a:	98 85       	ldd	r25, Y+8	; 0x08
 c2c:	0e 94 99 00 	call	0x132	; 0x132 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 c30:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	92 ff       	sbrs	r25, 2
 c38:	80 e0       	ldi	r24, 0x00	; 0
 c3a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 c3c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 c40:	84 ff       	sbrs	r24, 4
 c42:	2d c0       	rjmp	.+90     	; 0xc9e <can_get_status+0xc6>
            {
                cmd->ctrl.ide = 1; // extended frame
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 c48:	e3 ef       	ldi	r30, 0xF3	; 243
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	80 81       	ld	r24, Z
 c4e:	86 95       	lsr	r24
 c50:	86 95       	lsr	r24
 c52:	86 95       	lsr	r24
 c54:	8d 83       	std	Y+5, r24	; 0x05
 c56:	a2 ef       	ldi	r26, 0xF2	; 242
 c58:	b0 e0       	ldi	r27, 0x00	; 0
 c5a:	8c 91       	ld	r24, X
 c5c:	90 81       	ld	r25, Z
 c5e:	86 95       	lsr	r24
 c60:	86 95       	lsr	r24
 c62:	86 95       	lsr	r24
 c64:	20 e2       	ldi	r18, 0x20	; 32
 c66:	92 9f       	mul	r25, r18
 c68:	80 0d       	add	r24, r0
 c6a:	11 24       	eor	r1, r1
 c6c:	8c 83       	std	Y+4, r24	; 0x04
 c6e:	e1 ef       	ldi	r30, 0xF1	; 241
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	80 81       	ld	r24, Z
 c74:	9c 91       	ld	r25, X
 c76:	86 95       	lsr	r24
 c78:	86 95       	lsr	r24
 c7a:	86 95       	lsr	r24
 c7c:	20 e2       	ldi	r18, 0x20	; 32
 c7e:	92 9f       	mul	r25, r18
 c80:	80 0d       	add	r24, r0
 c82:	11 24       	eor	r1, r1
 c84:	8b 83       	std	Y+3, r24	; 0x03
 c86:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 c8a:	90 81       	ld	r25, Z
 c8c:	86 95       	lsr	r24
 c8e:	86 95       	lsr	r24
 c90:	86 95       	lsr	r24
 c92:	20 e2       	ldi	r18, 0x20	; 32
 c94:	92 9f       	mul	r25, r18
 c96:	80 0d       	add	r24, r0
 c98:	11 24       	eor	r1, r1
 c9a:	8a 83       	std	Y+2, r24	; 0x02
 c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <can_get_status+0xec>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 c9e:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 ca0:	e3 ef       	ldi	r30, 0xF3	; 243
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	80 81       	ld	r24, Z
 ca6:	82 95       	swap	r24
 ca8:	86 95       	lsr	r24
 caa:	87 70       	andi	r24, 0x07	; 7
 cac:	8b 83       	std	Y+3, r24	; 0x03
 cae:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 cb2:	80 81       	ld	r24, Z
 cb4:	92 95       	swap	r25
 cb6:	96 95       	lsr	r25
 cb8:	97 70       	andi	r25, 0x07	; 7
 cba:	88 0f       	add	r24, r24
 cbc:	88 0f       	add	r24, r24
 cbe:	88 0f       	add	r24, r24
 cc0:	89 0f       	add	r24, r25
 cc2:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 cc4:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 cc6:	ef ee       	ldi	r30, 0xEF	; 239
 cc8:	f0 e0       	ldi	r31, 0x00	; 0
 cca:	80 81       	ld	r24, Z
 ccc:	8f 73       	andi	r24, 0x3F	; 63
 cce:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 cd0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
            rtn_val = CAN_STATUS_COMPLETED;
 cd4:	80 e0       	ldi	r24, 0x00	; 0
            break;
 cd6:	1b c0       	rjmp	.+54     	; 0xd0e <can_get_status+0x136>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 cd8:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 cda:	ef ee       	ldi	r30, 0xEF	; 239
 cdc:	f0 e0       	ldi	r31, 0x00	; 0
 cde:	80 81       	ld	r24, Z
 ce0:	8f 73       	andi	r24, 0x3F	; 63
 ce2:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 ce4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
            rtn_val = CAN_STATUS_COMPLETED;
 ce8:	80 e0       	ldi	r24, 0x00	; 0
            break;
 cea:	11 c0       	rjmp	.+34     	; 0xd0e <can_get_status+0x136>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 cec:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 cee:	ef ee       	ldi	r30, 0xEF	; 239
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	8f 73       	andi	r24, 0x3F	; 63
 cf6:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 cf8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
            rtn_val = CAN_STATUS_ERROR;
 cfc:	82 e0       	ldi	r24, 0x02	; 2
            break;
 cfe:	07 c0       	rjmp	.+14     	; 0xd0e <can_get_status+0x136>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 d00:	82 e0       	ldi	r24, 0x02	; 2
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <can_get_status+0x136>
 d04:	82 e0       	ldi	r24, 0x02	; 2
 d06:	03 c0       	rjmp	.+6      	; 0xd0e <can_get_status+0x136>
 d08:	82 e0       	ldi	r24, 0x02	; 2
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <can_get_status+0x136>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 d0c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	1f 91       	pop	r17
 d14:	08 95       	ret

00000d16 <__vector_18>:


ISR (CAN_INT_vect)
{
 d16:	1f 92       	push	r1
 d18:	0f 92       	push	r0
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	0f 92       	push	r0
 d1e:	11 24       	eor	r1, r1
 d20:	2f 93       	push	r18
 d22:	3f 93       	push	r19
 d24:	8f 93       	push	r24
 d26:	9f 93       	push	r25
	uint8_t reg = CANSTMOB;
 d28:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
	
	if (reg & (1 << TXOK))
 d2c:	86 ff       	sbrs	r24, 6
 d2e:	0a c0       	rjmp	.+20     	; 0xd44 <__vector_18+0x2e>
	{
		testVar++;
 d30:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d34:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d38:	2f 5f       	subi	r18, 0xFF	; 255
 d3a:	3f 4f       	sbci	r19, 0xFF	; 255
 d3c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d40:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
		
	if (reg & (1 << RXOK))
 d44:	85 ff       	sbrs	r24, 5
 d46:	09 c0       	rjmp	.+18     	; 0xd5a <__vector_18+0x44>
	{
		testVar++;
 d48:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d4c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d50:	01 96       	adiw	r24, 0x01	; 1
 d52:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 d5a:	9f 91       	pop	r25
 d5c:	8f 91       	pop	r24
 d5e:	3f 91       	pop	r19
 d60:	2f 91       	pop	r18
 d62:	0f 90       	pop	r0
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	0f 90       	pop	r0
 d68:	1f 90       	pop	r1
 d6a:	18 95       	reti

00000d6c <can_network_init>:
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
	can_init(mode);
 d6c:	0e 94 bb 00 	call	0x176	; 0x176 <can_init>
 d70:	08 95       	ret

00000d72 <can_send_message>:
}

void can_send_message (void)
{
 d72:	cf 93       	push	r28
 d74:	df 93       	push	r29
 d76:	cd b7       	in	r28, 0x3d	; 61
 d78:	de b7       	in	r29, 0x3e	; 62
 d7a:	2e 97       	sbiw	r28, 0x0e	; 14
 d7c:	0f b6       	in	r0, 0x3f	; 63
 d7e:	f8 94       	cli
 d80:	de bf       	out	0x3e, r29	; 62
 d82:	0f be       	out	0x3f, r0	; 63
 d84:	cd bf       	out	0x3d, r28	; 61
	st_cmd_t message;
	message.id.ext = 0x1AC;
 d86:	8c ea       	ldi	r24, 0xAC	; 172
 d88:	91 e0       	ldi	r25, 0x01	; 1
 d8a:	a0 e0       	ldi	r26, 0x00	; 0
 d8c:	b0 e0       	ldi	r27, 0x00	; 0
 d8e:	8d 83       	std	Y+5, r24	; 0x05
 d90:	9e 83       	std	Y+6, r25	; 0x06
 d92:	af 83       	std	Y+7, r26	; 0x07
 d94:	b8 87       	std	Y+8, r27	; 0x08
	message.ctrl.ide = 1;
 d96:	81 e0       	ldi	r24, 0x01	; 1
 d98:	8e 87       	std	Y+14, r24	; 0x0e
	message.ctrl.rtr = 0;
 d9a:	1d 86       	std	Y+13, r1	; 0x0d
	message.dlc = 2;
 d9c:	82 e0       	ldi	r24, 0x02	; 2
 d9e:	89 87       	std	Y+9, r24	; 0x09
	message.cmd = CMD_TX_DATA;
 da0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t pt_data[message.dlc];
	pt_data[0] = 0x00;
 da2:	19 82       	std	Y+1, r1	; 0x01
	pt_data[1] = 0xFF;
 da4:	8f ef       	ldi	r24, 0xFF	; 255
 da6:	8a 83       	std	Y+2, r24	; 0x02
	message.pt_data = &pt_data[0];
 da8:	ce 01       	movw	r24, r28
 daa:	01 96       	adiw	r24, 0x01	; 1
 dac:	9b 87       	std	Y+11, r25	; 0x0b
 dae:	8a 87       	std	Y+10, r24	; 0x0a
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
 db0:	ce 01       	movw	r24, r28
 db2:	03 96       	adiw	r24, 0x03	; 3
 db4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <can_cmd>
 db8:	81 11       	cpse	r24, r1
 dba:	fa cf       	rjmp	.-12     	; 0xdb0 <can_send_message+0x3e>
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
 dbc:	ce 01       	movw	r24, r28
 dbe:	03 96       	adiw	r24, 0x03	; 3
 dc0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <can_get_status>
 dc4:	81 30       	cpi	r24, 0x01	; 1
 dc6:	d1 f3       	breq	.-12     	; 0xdbc <can_send_message+0x4a>
 dc8:	2e 96       	adiw	r28, 0x0e	; 14
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	df 91       	pop	r29
 dd6:	cf 91       	pop	r28
 dd8:	08 95       	ret

00000dda <main>:
#include "helpers.h"

int main(void)
{
	
	can_network_init(1);
 dda:	81 e0       	ldi	r24, 0x01	; 1
 ddc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <can_network_init>
	init_1ms_timer();
 de0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <init_1ms_timer>
	sei();
 de4:	78 94       	sei
	
	
    /* Replace with your application code */
    while (1) 
    {
		if (bit_check(TIMER_TASKS, BIT_TIMER_250ms))
 de6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 dea:	84 ff       	sbrs	r24, 4
 dec:	fc cf       	rjmp	.-8      	; 0xde6 <main+0xc>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_250ms);
 dee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 df2:	8f 7e       	andi	r24, 0xEF	; 239
 df4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
			can_send_message();
 df8:	0e 94 b9 06 	call	0xd72	; 0xd72 <can_send_message>
 dfc:	f4 cf       	rjmp	.-24     	; 0xde6 <main+0xc>

00000dfe <init_1ms_timer>:
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
		while ((TIFR1 & (1 << OCF1A)) == 0);
		TIFR1 |= (1 << OCF1A);
		millis--;
	} while (millis > 0);
}
 dfe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ms_counter>
 e02:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ms_counter+0x1>
 e06:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ms_counter+0x2>
 e0a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ms_counter+0x3>
 e0e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer_10ms>
 e12:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_20ms>
 e16:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer_50ms>
 e1a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_100ms>
 e1e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_250ms>
 e22:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer_500ms+0x1>
 e26:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer_500ms>
 e2a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timer_1000ms+0x1>
 e2e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timer_1000ms>
 e32:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TIMER_TASKS>
 e36:	89 ef       	ldi	r24, 0xF9	; 249
 e38:	87 bd       	out	0x27, r24	; 39
 e3a:	ee e6       	ldi	r30, 0x6E	; 110
 e3c:	f0 e0       	ldi	r31, 0x00	; 0
 e3e:	80 81       	ld	r24, Z
 e40:	82 60       	ori	r24, 0x02	; 2
 e42:	80 83       	st	Z, r24
 e44:	84 b5       	in	r24, 0x24	; 36
 e46:	82 60       	ori	r24, 0x02	; 2
 e48:	84 bd       	out	0x24, r24	; 36
 e4a:	85 b5       	in	r24, 0x25	; 37
 e4c:	83 60       	ori	r24, 0x03	; 3
 e4e:	85 bd       	out	0x25, r24	; 37
 e50:	08 95       	ret

00000e52 <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
 e52:	1f 92       	push	r1
 e54:	0f 92       	push	r0
 e56:	0f b6       	in	r0, 0x3f	; 63
 e58:	0f 92       	push	r0
 e5a:	11 24       	eor	r1, r1
 e5c:	2f 93       	push	r18
 e5e:	8f 93       	push	r24
 e60:	9f 93       	push	r25
 e62:	af 93       	push	r26
 e64:	bf 93       	push	r27
	ms_counter++;
 e66:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ms_counter>
 e6a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ms_counter+0x1>
 e6e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <ms_counter+0x2>
 e72:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <ms_counter+0x3>
 e76:	01 96       	adiw	r24, 0x01	; 1
 e78:	a1 1d       	adc	r26, r1
 e7a:	b1 1d       	adc	r27, r1
 e7c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ms_counter>
 e80:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ms_counter+0x1>
 e84:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <ms_counter+0x2>
 e88:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <ms_counter+0x3>
	timer_10ms++;
 e8c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_10ms>
 e90:	8f 5f       	subi	r24, 0xFF	; 255
 e92:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_10ms>
	timer_20ms++;
 e96:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_20ms>
 e9a:	8f 5f       	subi	r24, 0xFF	; 255
 e9c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer_20ms>
	timer_50ms++;
 ea0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer_50ms>
 ea4:	8f 5f       	subi	r24, 0xFF	; 255
 ea6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer_50ms>
	timer_100ms++;
 eaa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_100ms>
 eae:	8f 5f       	subi	r24, 0xFF	; 255
 eb0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer_100ms>
	timer_250ms++;
 eb4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_250ms>
 eb8:	8f 5f       	subi	r24, 0xFF	; 255
 eba:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_250ms>
	timer_500ms++;
 ebe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_500ms>
 ec2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timer_500ms+0x1>
 ec6:	01 96       	adiw	r24, 0x01	; 1
 ec8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timer_500ms+0x1>
 ecc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer_500ms>
	timer_1000ms++;
 ed0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer_1000ms>
 ed4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer_1000ms+0x1>
 ed8:	01 96       	adiw	r24, 0x01	; 1
 eda:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer_1000ms+0x1>
 ede:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer_1000ms>
	
	if (timer_10ms == 10)
 ee2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_10ms>
 ee6:	8a 30       	cpi	r24, 0x0A	; 10
 ee8:	39 f4       	brne	.+14     	; 0xef8 <__vector_15+0xa6>
	{
		timer_10ms = 0;
 eea:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer_10ms>
		bit_set(TIMER_TASKS, BIT_TIMER_10ms);
 eee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 ef2:	81 60       	ori	r24, 0x01	; 1
 ef4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
 ef8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer_20ms>
 efc:	84 31       	cpi	r24, 0x14	; 20
 efe:	39 f4       	brne	.+14     	; 0xf0e <__vector_15+0xbc>
	{
		timer_20ms = 0;
 f00:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timer_20ms>
		bit_set(TIMER_TASKS, BIT_TIMER_20ms);
 f04:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f08:	82 60       	ori	r24, 0x02	; 2
 f0a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
 f0e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer_50ms>
 f12:	82 33       	cpi	r24, 0x32	; 50
 f14:	39 f4       	brne	.+14     	; 0xf24 <__vector_15+0xd2>
	{
		timer_50ms = 0;
 f16:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer_50ms>
		bit_set(TIMER_TASKS, BIT_TIMER_50ms);
 f1a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f1e:	84 60       	ori	r24, 0x04	; 4
 f20:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
 f24:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer_100ms>
 f28:	84 36       	cpi	r24, 0x64	; 100
 f2a:	39 f4       	brne	.+14     	; 0xf3a <__vector_15+0xe8>
	{
		timer_100ms = 0;
 f2c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timer_100ms>
		bit_set(TIMER_TASKS, BIT_TIMER_100ms);
 f30:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f34:	88 60       	ori	r24, 0x08	; 8
 f36:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
 f3a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_250ms>
 f3e:	8a 3f       	cpi	r24, 0xFA	; 250
 f40:	39 f4       	brne	.+14     	; 0xf50 <__vector_15+0xfe>
	{
		timer_250ms = 0;
 f42:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <timer_250ms>
		bit_set(TIMER_TASKS, BIT_TIMER_250ms);
 f46:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f4a:	80 61       	ori	r24, 0x10	; 16
 f4c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
 f50:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_500ms>
 f54:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timer_500ms+0x1>
 f58:	84 3f       	cpi	r24, 0xF4	; 244
 f5a:	91 40       	sbci	r25, 0x01	; 1
 f5c:	49 f4       	brne	.+18     	; 0xf70 <__vector_15+0x11e>
	{
		timer_500ms = 0;
 f5e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer_500ms+0x1>
 f62:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer_500ms>
		bit_set(TIMER_TASKS, BIT_TIMER_500ms);
 f66:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f6a:	80 62       	ori	r24, 0x20	; 32
 f6c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
 f70:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer_1000ms>
 f74:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer_1000ms+0x1>
 f78:	88 3e       	cpi	r24, 0xE8	; 232
 f7a:	93 40       	sbci	r25, 0x03	; 3
 f7c:	49 f4       	brne	.+18     	; 0xf90 <__vector_15+0x13e>
	{
		timer_1000ms = 0;
 f7e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timer_1000ms+0x1>
 f82:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timer_1000ms>
		bit_set(TIMER_TASKS, BIT_TIMER_1000ms);
 f86:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TIMER_TASKS>
 f8a:	80 64       	ori	r24, 0x40	; 64
 f8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TIMER_TASKS>
	}
 f90:	bf 91       	pop	r27
 f92:	af 91       	pop	r26
 f94:	9f 91       	pop	r25
 f96:	8f 91       	pop	r24
 f98:	2f 91       	pop	r18
 f9a:	0f 90       	pop	r0
 f9c:	0f be       	out	0x3f, r0	; 63
 f9e:	0f 90       	pop	r0
 fa0:	1f 90       	pop	r1
 fa2:	18 95       	reti

00000fa4 <__tablejump2__>:
 fa4:	ee 0f       	add	r30, r30
 fa6:	ff 1f       	adc	r31, r31
 fa8:	05 90       	lpm	r0, Z+
 faa:	f4 91       	lpm	r31, Z
 fac:	e0 2d       	mov	r30, r0
 fae:	09 94       	ijmp

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
