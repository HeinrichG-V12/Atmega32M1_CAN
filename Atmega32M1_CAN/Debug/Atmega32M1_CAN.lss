
Atmega32M1_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800100  00800100  00002206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001534  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e34  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001120  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00005800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e4  00000000  00000000  00005b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060a  00000000  00000000  000063f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__vector_18>
      4c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_19>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	21 02       	muls	r18, r17
      7e:	17 03       	mulsu	r17, r23
      80:	01 04       	cpc	r0, r1
      82:	cf 04       	cpc	r12, r15
      84:	52 05       	cpc	r21, r2
      86:	e2 05       	cpc	r30, r2
      88:	7c 06       	cpc	r7, r28
      8a:	a2 07       	cpc	r26, r18
      8c:	d5 08       	sbc	r13, r5
      8e:	12 0a       	sbc	r1, r18
      90:	c8 0a       	sbc	r12, r24

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 37       	cpi	r26, 0x71	; 113
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <main>
      b2:	0c 94 c7 10 	jmp	0x218e	; 0x218e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <can_clear_all_mob+0x6>
      c0:	1f 92       	push	r1
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	19 82       	std	Y+1, r1	; 0x01
      c8:	1d c0       	rjmp	.+58     	; 0x104 <can_clear_all_mob+0x4a>
      ca:	8d ee       	ldi	r24, 0xED	; 237
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	22 95       	swap	r18
      d2:	20 7f       	andi	r18, 0xF0	; 240
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
      d8:	8e ee       	ldi	r24, 0xEE	; 238
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	9b 83       	std	Y+3, r25	; 0x03
      de:	8a 83       	std	Y+2, r24	; 0x02
      e0:	09 c0       	rjmp	.+18     	; 0xf4 <can_clear_all_mob+0x3a>
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	fc 01       	movw	r30, r24
      e8:	10 82       	st	Z, r1
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	9b 81       	ldd	r25, Y+3	; 0x03
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	9b 83       	std	Y+3, r25	; 0x03
      f2:	8a 83       	std	Y+2, r24	; 0x02
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	88 3f       	cpi	r24, 0xF8	; 248
      fa:	91 05       	cpc	r25, r1
      fc:	90 f3       	brcs	.-28     	; 0xe2 <can_clear_all_mob+0x28>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	00 f3       	brcs	.-64     	; 0xca <can_clear_all_mob+0x10>
     10a:	00 00       	nop
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <can_get_mob_free>:
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	00 d0       	rcall	.+0      	; 0x11e <can_get_mob_free+0x6>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	8d ee       	ldi	r24, 0xED	; 237
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	80 81       	ld	r24, Z
     12a:	8a 83       	std	Y+2, r24	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	1b c0       	rjmp	.+54     	; 0x166 <can_get_mob_free+0x4e>
     130:	8d ee       	ldi	r24, 0xED	; 237
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	29 81       	ldd	r18, Y+1	; 0x01
     136:	22 95       	swap	r18
     138:	20 7f       	andi	r18, 0xF0	; 240
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	8f ee       	ldi	r24, 0xEF	; 239
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	80 81       	ld	r24, Z
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	80 7c       	andi	r24, 0xC0	; 192
     14c:	99 27       	eor	r25, r25
     14e:	89 2b       	or	r24, r25
     150:	39 f4       	brne	.+14     	; 0x160 <can_get_mob_free+0x48>
     152:	8d ee       	ldi	r24, 0xED	; 237
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	2a 81       	ldd	r18, Y+2	; 0x02
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	0c c0       	rjmp	.+24     	; 0x178 <can_get_mob_free+0x60>
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	86 30       	cpi	r24, 0x06	; 6
     16a:	10 f3       	brcs	.-60     	; 0x130 <can_get_mob_free+0x18>
     16c:	8d ee       	ldi	r24, 0xED	; 237
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2a 81       	ldd	r18, Y+2	; 0x02
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	8f ef       	ldi	r24, 0xFF	; 255
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <can_get_mob_status>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <can_get_mob_status+0x6>
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	8f ee       	ldi	r24, 0xEF	; 239
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	80 81       	ld	r24, Z
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	80 7c       	andi	r24, 0xC0	; 192
     19a:	99 27       	eor	r25, r25
     19c:	89 2b       	or	r24, r25
     19e:	11 f4       	brne	.+4      	; 0x1a4 <can_get_mob_status+0x22>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	1c c0       	rjmp	.+56     	; 0x1dc <can_get_mob_status+0x5a>
     1a4:	8e ee       	ldi	r24, 0xEE	; 238
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	80 7e       	andi	r24, 0xE0	; 224
     1b2:	8a 83       	std	Y+2, r24	; 0x02
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <can_get_mob_status+0x44>
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
     1bc:	80 34       	cpi	r24, 0x40	; 64
     1be:	19 f0       	breq	.+6      	; 0x1c6 <can_get_mob_status+0x44>
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	80 3a       	cpi	r24, 0xA0	; 160
     1c4:	11 f4       	brne	.+4      	; 0x1ca <can_get_mob_status+0x48>
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <can_get_mob_status+0x5a>
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	8f 71       	andi	r24, 0x1F	; 31
     1ce:	8a 83       	std	Y+2, r24	; 0x02
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	88 23       	and	r24, r24
     1d4:	11 f0       	breq	.+4      	; 0x1da <can_get_mob_status+0x58>
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <can_get_mob_status+0x5a>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <can_get_data>:
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <can_get_data+0x6>
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	9b 83       	std	Y+3, r25	; 0x03
     1f4:	8a 83       	std	Y+2, r24	; 0x02
     1f6:	19 82       	std	Y+1, r1	; 0x01
     1f8:	10 c0       	rjmp	.+32     	; 0x21a <can_get_data+0x34>
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	2a 81       	ldd	r18, Y+2	; 0x02
     202:	3b 81       	ldd	r19, Y+3	; 0x03
     204:	82 0f       	add	r24, r18
     206:	93 1f       	adc	r25, r19
     208:	2a ef       	ldi	r18, 0xFA	; 250
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	8f ee       	ldi	r24, 0xEF	; 239
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	99 27       	eor	r25, r25
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	14 f3       	brlt	.-60     	; 0x1fa <can_get_data+0x14>
     236:	00 00       	nop
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	1f 92       	push	r1
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     250:	88 ed       	ldi	r24, 0xD8	; 216
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	fc 01       	movw	r30, r24
     258:	20 83       	st	Z, r18
    Can_conf_bt();
     25a:	82 ee       	ldi	r24, 0xE2	; 226
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	26 e0       	ldi	r18, 0x06	; 6
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	83 ee       	ldi	r24, 0xE3	; 227
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
     26e:	84 ee       	ldi	r24, 0xE4	; 228
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	23 e1       	ldi	r18, 0x13	; 19
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
    return 1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{	
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	0e 94 22 01 	call	0x244	; 0x244 <can_fixed_baudrate>
     294:	88 23       	and	r24, r24
     296:	11 f4       	brne	.+4      	; 0x29c <can_init+0x1a>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	50 c0       	rjmp	.+160    	; 0x33c <can_init+0xba>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     29c:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
	
	// we configure  MOB0 as receive mob
	CANPAGE = (0<<4);									/* pick mob0 */
     2a0:	8d ee       	ldi	r24, 0xED	; 237
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	10 82       	st	Z, r1
	CANCDMOB &= ~((1<<CONMOB1)|(1<<CONMOB0));			/* disable mob */
     2a8:	8f ee       	ldi	r24, 0xEF	; 239
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2f ee       	ldi	r18, 0xEF	; 239
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	2f 73       	andi	r18, 0x3F	; 63
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	CANCDMOB |= (1 << CONMOB1);							/* enable reception */
     2ba:	8f ee       	ldi	r24, 0xEF	; 239
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	2f ee       	ldi	r18, 0xEF	; 239
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	20 68       	ori	r18, 0x80	; 128
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18
	
	// interrupts
	CANGIE = (1 << ENIT)|(1 << ENRX);					/* enable ENIT and ENRX */
     2cc:	8b ed       	ldi	r24, 0xDB	; 219
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	20 ea       	ldi	r18, 0xA0	; 160
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
	CANIE2 |= (1 << IEMOB0);   							/* Enable interrupts on mob0 */
     2d6:	8e ed       	ldi	r24, 0xDE	; 222
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	2e ed       	ldi	r18, 0xDE	; 222
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	21 60       	ori	r18, 0x01	; 1
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
	CANIE1 = 0;
     2e8:	8f ed       	ldi	r24, 0xDF	; 223
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	10 82       	st	Z, r1
	CANSIT1 = 0;
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	10 82       	st	Z, r1
	CANSIT2 = 0;
     2f8:	80 ee       	ldi	r24, 0xE0	; 224
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	fc 01       	movw	r30, r24
     2fe:	10 82       	st	Z, r1
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
     300:	87 ef       	ldi	r24, 0xF7	; 247
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	10 82       	st	Z, r1
	CANIDM2 = 0x00; 	//  " "
     308:	86 ef       	ldi	r24, 0xF6	; 246
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	10 82       	st	Z, r1
	CANIDM3 = 0x00; 	//  " "
     310:	85 ef       	ldi	r24, 0xF5	; 245
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	fc 01       	movw	r30, r24
     316:	10 82       	st	Z, r1
	CANIDM4 = 0x00; 	//  " "
     318:	84 ef       	ldi	r24, 0xF4	; 244
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	10 82       	st	Z, r1
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     320:	88 ed       	ldi	r24, 0xD8	; 216
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	28 ed       	ldi	r18, 0xD8	; 216
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	f9 01       	movw	r30, r18
     32a:	20 81       	ld	r18, Z
     32c:	22 60       	ori	r18, 0x02	; 2
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
	testVar = 0;
     332:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <testVar+0x1>
     336:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <testVar>
	
    return (1);
     33a:	81 e0       	ldi	r24, 0x01	; 1
}
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	2a 97       	sbiw	r28, 0x0a	; 10
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
     358:	9a 87       	std	Y+10, r25	; 0x0a
     35a:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     35c:	89 85       	ldd	r24, Y+9	; 0x09
     35e:	9a 85       	ldd	r25, Y+10	; 0x0a
     360:	fc 01       	movw	r30, r24
     362:	81 81       	ldd	r24, Z+1	; 0x01
     364:	8c 30       	cpi	r24, 0x0C	; 12
     366:	39 f5       	brne	.+78     	; 0x3b6 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     368:	89 85       	ldd	r24, Y+9	; 0x09
     36a:	9a 85       	ldd	r25, Y+10	; 0x0a
     36c:	fc 01       	movw	r30, r24
     36e:	81 85       	ldd	r24, Z+9	; 0x09
     370:	80 36       	cpi	r24, 0x60	; 96
     372:	d9 f4       	brne	.+54     	; 0x3aa <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     374:	8d ee       	ldi	r24, 0xED	; 237
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	29 85       	ldd	r18, Y+9	; 0x09
     37a:	3a 85       	ldd	r19, Y+10	; 0x0a
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	22 95       	swap	r18
     382:	20 7f       	andi	r18, 0xF0	; 240
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
      Can_mob_abort();
     388:	8f ee       	ldi	r24, 0xEF	; 239
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2f ee       	ldi	r18, 0xEF	; 239
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	2f 73       	andi	r18, 0x3F	; 63
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     39a:	8e ee       	ldi	r24, 0xEE	; 238
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	10 82       	st	Z, r1
      cmd->handle = 0;
     3a2:	89 85       	ldd	r24, Y+9	; 0x09
     3a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a6:	fc 01       	movw	r30, r24
     3a8:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     3aa:	89 85       	ldd	r24, Y+9	; 0x09
     3ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ae:	fc 01       	movw	r30, r24
     3b0:	11 86       	std	Z+9, r1	; 0x09
     3b2:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__stack+0xf5d>
  }
  else
  {
    mob_handle = can_get_mob_free();
     3b6:	0e 94 8c 00 	call	0x118	; 0x118 <can_get_mob_free>
     3ba:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     3bc:	8c 81       	ldd	r24, Y+4	; 0x04
     3be:	8f 3f       	cpi	r24, 0xFF	; 255
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <can_cmd+0x82>
     3c2:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__stack+0xf4f>
    {
      cmd->status = MOB_PENDING; 
     3c6:	89 85       	ldd	r24, Y+9	; 0x09
     3c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ca:	20 e6       	ldi	r18, 0x60	; 96
     3cc:	fc 01       	movw	r30, r24
     3ce:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     3d0:	89 85       	ldd	r24, Y+9	; 0x09
     3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d4:	2c 81       	ldd	r18, Y+4	; 0x04
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     3da:	8d ee       	ldi	r24, 0xED	; 237
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	2c 81       	ldd	r18, Y+4	; 0x04
     3e0:	22 95       	swap	r18
     3e2:	20 7f       	andi	r18, 0xF0	; 240
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
      Can_clear_mob();
     3e8:	8e ee       	ldi	r24, 0xEE	; 238
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
     3f0:	09 c0       	rjmp	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	9b 81       	ldd	r25, Y+3	; 0x03
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	9b 83       	std	Y+3, r25	; 0x03
     402:	8a 83       	std	Y+2, r24	; 0x02
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	9b 81       	ldd	r25, Y+3	; 0x03
     408:	88 3f       	cpi	r24, 0xF8	; 248
     40a:	91 05       	cpc	r25, r1
     40c:	90 f3       	brcs	.-28     	; 0x3f2 <can_cmd+0xae>
          
      switch (cmd->cmd)
     40e:	89 85       	ldd	r24, Y+9	; 0x09
     410:	9a 85       	ldd	r25, Y+10	; 0x0a
     412:	fc 01       	movw	r30, r24
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	09 2e       	mov	r0, r25
     41c:	00 0c       	add	r0, r0
     41e:	aa 0b       	sbc	r26, r26
     420:	bb 0b       	sbc	r27, r27
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	2a e0       	ldi	r18, 0x0A	; 10
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	84 1b       	sub	r24, r20
     42c:	95 0b       	sbc	r25, r21
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	10 f4       	brcc	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__stack+0xf43>
     438:	82 5c       	subi	r24, 0xC2	; 194
     43a:	9f 4f       	sbci	r25, 0xFF	; 255
     43c:	fc 01       	movw	r30, r24
     43e:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     442:	89 85       	ldd	r24, Y+9	; 0x09
     444:	9a 85       	ldd	r25, Y+10	; 0x0a
     446:	fc 01       	movw	r30, r24
     448:	83 85       	ldd	r24, Z+11	; 0x0b
     44a:	88 23       	and	r24, r24
     44c:	09 f4       	brne	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44e:	69 c0       	rjmp	.+210    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     450:	83 ef       	ldi	r24, 0xF3	; 243
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	29 85       	ldd	r18, Y+9	; 0x09
     456:	3a 85       	ldd	r19, Y+10	; 0x0a
     458:	2e 5f       	subi	r18, 0xFE	; 254
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	2d 5f       	subi	r18, 0xFD	; 253
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	f9 01       	movw	r30, r18
     462:	20 81       	ld	r18, Z
     464:	42 2f       	mov	r20, r18
     466:	44 0f       	add	r20, r20
     468:	44 0f       	add	r20, r20
     46a:	44 0f       	add	r20, r20
     46c:	29 85       	ldd	r18, Y+9	; 0x09
     46e:	3a 85       	ldd	r19, Y+10	; 0x0a
     470:	2e 5f       	subi	r18, 0xFE	; 254
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	2e 5f       	subi	r18, 0xFE	; 254
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	22 95       	swap	r18
     47e:	26 95       	lsr	r18
     480:	27 70       	andi	r18, 0x07	; 7
     482:	24 0f       	add	r18, r20
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	82 ef       	ldi	r24, 0xF2	; 242
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	29 85       	ldd	r18, Y+9	; 0x09
     48e:	3a 85       	ldd	r19, Y+10	; 0x0a
     490:	2e 5f       	subi	r18, 0xFE	; 254
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	2e 5f       	subi	r18, 0xFE	; 254
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	f9 01       	movw	r30, r18
     49a:	20 81       	ld	r18, Z
     49c:	42 2f       	mov	r20, r18
     49e:	44 0f       	add	r20, r20
     4a0:	44 0f       	add	r20, r20
     4a2:	44 0f       	add	r20, r20
     4a4:	29 85       	ldd	r18, Y+9	; 0x09
     4a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4a8:	2e 5f       	subi	r18, 0xFE	; 254
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	22 95       	swap	r18
     4b6:	26 95       	lsr	r18
     4b8:	27 70       	andi	r18, 0x07	; 7
     4ba:	24 0f       	add	r18, r20
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
     4c0:	81 ef       	ldi	r24, 0xF1	; 241
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	29 85       	ldd	r18, Y+9	; 0x09
     4c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4c8:	2e 5f       	subi	r18, 0xFE	; 254
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	2f 5f       	subi	r18, 0xFF	; 255
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	42 2f       	mov	r20, r18
     4d6:	44 0f       	add	r20, r20
     4d8:	44 0f       	add	r20, r20
     4da:	44 0f       	add	r20, r20
     4dc:	29 85       	ldd	r18, Y+9	; 0x09
     4de:	3a 85       	ldd	r19, Y+10	; 0x0a
     4e0:	2e 5f       	subi	r18, 0xFE	; 254
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	22 95       	swap	r18
     4ea:	26 95       	lsr	r18
     4ec:	27 70       	andi	r18, 0x07	; 7
     4ee:	24 0f       	add	r18, r20
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
     4f4:	80 ef       	ldi	r24, 0xF0	; 240
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	29 85       	ldd	r18, Y+9	; 0x09
     4fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     4fc:	2e 5f       	subi	r18, 0xFE	; 254
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	22 0f       	add	r18, r18
     506:	22 0f       	add	r18, r18
     508:	22 0f       	add	r18, r18
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
     50e:	8f ee       	ldi	r24, 0xEF	; 239
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2f ee       	ldi	r18, 0xEF	; 239
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	20 61       	ori	r18, 0x10	; 16
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
     520:	30 c0       	rjmp	.+96     	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
          else              { Can_set_std_id(cmd->id.std);}
     522:	83 ef       	ldi	r24, 0xF3	; 243
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	29 85       	ldd	r18, Y+9	; 0x09
     528:	3a 85       	ldd	r19, Y+10	; 0x0a
     52a:	2e 5f       	subi	r18, 0xFE	; 254
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	42 2f       	mov	r20, r18
     538:	42 95       	swap	r20
     53a:	44 0f       	add	r20, r20
     53c:	40 7e       	andi	r20, 0xE0	; 224
     53e:	29 85       	ldd	r18, Y+9	; 0x09
     540:	3a 85       	ldd	r19, Y+10	; 0x0a
     542:	2e 5f       	subi	r18, 0xFE	; 254
     544:	3f 4f       	sbci	r19, 0xFF	; 255
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	26 95       	lsr	r18
     54c:	26 95       	lsr	r18
     54e:	26 95       	lsr	r18
     550:	24 0f       	add	r18, r20
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	82 ef       	ldi	r24, 0xF2	; 242
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	29 85       	ldd	r18, Y+9	; 0x09
     55c:	3a 85       	ldd	r19, Y+10	; 0x0a
     55e:	2e 5f       	subi	r18, 0xFE	; 254
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	f9 01       	movw	r30, r18
     564:	20 81       	ld	r18, Z
     566:	22 95       	swap	r18
     568:	22 0f       	add	r18, r18
     56a:	20 7e       	andi	r18, 0xE0	; 224
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	8f ee       	ldi	r24, 0xEF	; 239
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	2f ee       	ldi	r18, 0xEF	; 239
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	2f 7e       	andi	r18, 0xEF	; 239
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     582:	19 82       	std	Y+1, r1	; 0x01
     584:	13 c0       	rjmp	.+38     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
     586:	8a ef       	ldi	r24, 0xFA	; 250
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	29 85       	ldd	r18, Y+9	; 0x09
     58c:	3a 85       	ldd	r19, Y+10	; 0x0a
     58e:	f9 01       	movw	r30, r18
     590:	47 81       	ldd	r20, Z+7	; 0x07
     592:	50 85       	ldd	r21, Z+8	; 0x08
     594:	29 81       	ldd	r18, Y+1	; 0x01
     596:	22 2f       	mov	r18, r18
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	24 0f       	add	r18, r20
     59c:	35 1f       	adc	r19, r21
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	89 85       	ldd	r24, Y+9	; 0x09
     5ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b0:	fc 01       	movw	r30, r24
     5b2:	96 81       	ldd	r25, Z+6	; 0x06
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	89 17       	cp	r24, r25
     5b8:	30 f3       	brcs	.-52     	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5be:	fc 01       	movw	r30, r24
     5c0:	82 85       	ldd	r24, Z+10	; 0x0a
     5c2:	88 23       	and	r24, r24
     5c4:	51 f0       	breq	.+20     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
     5c6:	80 ef       	ldi	r24, 0xF0	; 240
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	20 ef       	ldi	r18, 0xF0	; 240
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	24 60       	ori	r18, 0x04	; 4
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
            else Can_clear_rtr();    
     5da:	80 ef       	ldi	r24, 0xF0	; 240
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	20 ef       	ldi	r18, 0xF0	; 240
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	2b 7f       	andi	r18, 0xFB	; 251
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     5ec:	8f ee       	ldi	r24, 0xEF	; 239
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	2f ee       	ldi	r18, 0xEF	; 239
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	40 81       	ld	r20, Z
     5f8:	29 85       	ldd	r18, Y+9	; 0x09
     5fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     5fc:	f9 01       	movw	r30, r18
     5fe:	26 81       	ldd	r18, Z+6	; 0x06
     600:	24 2b       	or	r18, r20
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
          Can_config_tx();
     606:	8f ee       	ldi	r24, 0xEF	; 239
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2f ee       	ldi	r18, 0xEF	; 239
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	2f 73       	andi	r18, 0x3F	; 63
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
     618:	8f ee       	ldi	r24, 0xEF	; 239
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2f ee       	ldi	r18, 0xEF	; 239
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	20 64       	ori	r18, 0x40	; 64
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
          break;
     62a:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     62e:	89 85       	ldd	r24, Y+9	; 0x09
     630:	9a 85       	ldd	r25, Y+10	; 0x0a
     632:	fc 01       	movw	r30, r24
     634:	83 85       	ldd	r24, Z+11	; 0x0b
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     63a:	69 c0       	rjmp	.+210    	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
     63c:	83 ef       	ldi	r24, 0xF3	; 243
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	29 85       	ldd	r18, Y+9	; 0x09
     642:	3a 85       	ldd	r19, Y+10	; 0x0a
     644:	2e 5f       	subi	r18, 0xFE	; 254
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	2d 5f       	subi	r18, 0xFD	; 253
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	42 2f       	mov	r20, r18
     652:	44 0f       	add	r20, r20
     654:	44 0f       	add	r20, r20
     656:	44 0f       	add	r20, r20
     658:	29 85       	ldd	r18, Y+9	; 0x09
     65a:	3a 85       	ldd	r19, Y+10	; 0x0a
     65c:	2e 5f       	subi	r18, 0xFE	; 254
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	2e 5f       	subi	r18, 0xFE	; 254
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	22 95       	swap	r18
     66a:	26 95       	lsr	r18
     66c:	27 70       	andi	r18, 0x07	; 7
     66e:	24 0f       	add	r18, r20
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
     674:	82 ef       	ldi	r24, 0xF2	; 242
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	29 85       	ldd	r18, Y+9	; 0x09
     67a:	3a 85       	ldd	r19, Y+10	; 0x0a
     67c:	2e 5f       	subi	r18, 0xFE	; 254
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	2e 5f       	subi	r18, 0xFE	; 254
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	42 2f       	mov	r20, r18
     68a:	44 0f       	add	r20, r20
     68c:	44 0f       	add	r20, r20
     68e:	44 0f       	add	r20, r20
     690:	29 85       	ldd	r18, Y+9	; 0x09
     692:	3a 85       	ldd	r19, Y+10	; 0x0a
     694:	2e 5f       	subi	r18, 0xFE	; 254
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	f9 01       	movw	r30, r18
     69e:	20 81       	ld	r18, Z
     6a0:	22 95       	swap	r18
     6a2:	26 95       	lsr	r18
     6a4:	27 70       	andi	r18, 0x07	; 7
     6a6:	24 0f       	add	r18, r20
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
     6ac:	81 ef       	ldi	r24, 0xF1	; 241
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	29 85       	ldd	r18, Y+9	; 0x09
     6b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b4:	2e 5f       	subi	r18, 0xFE	; 254
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	42 2f       	mov	r20, r18
     6c2:	44 0f       	add	r20, r20
     6c4:	44 0f       	add	r20, r20
     6c6:	44 0f       	add	r20, r20
     6c8:	29 85       	ldd	r18, Y+9	; 0x09
     6ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     6cc:	2e 5f       	subi	r18, 0xFE	; 254
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	22 95       	swap	r18
     6d6:	26 95       	lsr	r18
     6d8:	27 70       	andi	r18, 0x07	; 7
     6da:	24 0f       	add	r18, r20
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
     6e0:	80 ef       	ldi	r24, 0xF0	; 240
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	29 85       	ldd	r18, Y+9	; 0x09
     6e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e8:	2e 5f       	subi	r18, 0xFE	; 254
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	22 0f       	add	r18, r18
     6f2:	22 0f       	add	r18, r18
     6f4:	22 0f       	add	r18, r18
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
     6fa:	8f ee       	ldi	r24, 0xEF	; 239
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	2f ee       	ldi	r18, 0xEF	; 239
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	20 61       	ori	r18, 0x10	; 16
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
     70c:	30 c0       	rjmp	.+96     	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
          else              { Can_set_std_id(cmd->id.std);}
     70e:	83 ef       	ldi	r24, 0xF3	; 243
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	29 85       	ldd	r18, Y+9	; 0x09
     714:	3a 85       	ldd	r19, Y+10	; 0x0a
     716:	2e 5f       	subi	r18, 0xFE	; 254
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	42 2f       	mov	r20, r18
     724:	42 95       	swap	r20
     726:	44 0f       	add	r20, r20
     728:	40 7e       	andi	r20, 0xE0	; 224
     72a:	29 85       	ldd	r18, Y+9	; 0x09
     72c:	3a 85       	ldd	r19, Y+10	; 0x0a
     72e:	2e 5f       	subi	r18, 0xFE	; 254
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	26 95       	lsr	r18
     738:	26 95       	lsr	r18
     73a:	26 95       	lsr	r18
     73c:	24 0f       	add	r18, r20
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
     742:	82 ef       	ldi	r24, 0xF2	; 242
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	29 85       	ldd	r18, Y+9	; 0x09
     748:	3a 85       	ldd	r19, Y+10	; 0x0a
     74a:	2e 5f       	subi	r18, 0xFE	; 254
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	22 95       	swap	r18
     754:	22 0f       	add	r18, r18
     756:	20 7e       	andi	r18, 0xE0	; 224
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
     75c:	8f ee       	ldi	r24, 0xEF	; 239
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	2f ee       	ldi	r18, 0xEF	; 239
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	f9 01       	movw	r30, r18
     766:	20 81       	ld	r18, Z
     768:	2f 7e       	andi	r18, 0xEF	; 239
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     76e:	19 82       	std	Y+1, r1	; 0x01
     770:	13 c0       	rjmp	.+38     	; 0x798 <__EEPROM_REGION_LENGTH__+0x398>
     772:	8a ef       	ldi	r24, 0xFA	; 250
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	29 85       	ldd	r18, Y+9	; 0x09
     778:	3a 85       	ldd	r19, Y+10	; 0x0a
     77a:	f9 01       	movw	r30, r18
     77c:	47 81       	ldd	r20, Z+7	; 0x07
     77e:	50 85       	ldd	r21, Z+8	; 0x08
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	22 2f       	mov	r18, r18
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	24 0f       	add	r18, r20
     788:	35 1f       	adc	r19, r21
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	89 85       	ldd	r24, Y+9	; 0x09
     79a:	9a 85       	ldd	r25, Y+10	; 0x0a
     79c:	fc 01       	movw	r30, r24
     79e:	96 81       	ldd	r25, Z+6	; 0x06
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	89 17       	cp	r24, r25
     7a4:	30 f3       	brcs	.-52     	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7a6:	89 85       	ldd	r24, Y+9	; 0x09
     7a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7aa:	fc 01       	movw	r30, r24
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	80 ef       	ldi	r24, 0xF0	; 240
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	20 ef       	ldi	r18, 0xF0	; 240
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	2b 7f       	andi	r18, 0xFB	; 251
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     7c0:	8f ee       	ldi	r24, 0xEF	; 239
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2f ee       	ldi	r18, 0xEF	; 239
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	40 81       	ld	r20, Z
     7cc:	29 85       	ldd	r18, Y+9	; 0x09
     7ce:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d0:	f9 01       	movw	r30, r18
     7d2:	26 81       	ldd	r18, Z+6	; 0x06
     7d4:	24 2b       	or	r18, r20
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
          Can_config_tx();
     7da:	8f ee       	ldi	r24, 0xEF	; 239
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2f ee       	ldi	r18, 0xEF	; 239
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	2f 73       	andi	r18, 0x3F	; 63
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
     7ec:	8f ee       	ldi	r24, 0xEF	; 239
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2f ee       	ldi	r18, 0xEF	; 239
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	20 64       	ori	r18, 0x40	; 64
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
          break;
     7fe:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	9a 85       	ldd	r25, Y+10	; 0x0a
     806:	fc 01       	movw	r30, r24
     808:	83 85       	ldd	r24, Z+11	; 0x0b
     80a:	88 23       	and	r24, r24
     80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	69 c0       	rjmp	.+210    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     810:	83 ef       	ldi	r24, 0xF3	; 243
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	29 85       	ldd	r18, Y+9	; 0x09
     816:	3a 85       	ldd	r19, Y+10	; 0x0a
     818:	2e 5f       	subi	r18, 0xFE	; 254
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	2d 5f       	subi	r18, 0xFD	; 253
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	42 2f       	mov	r20, r18
     826:	44 0f       	add	r20, r20
     828:	44 0f       	add	r20, r20
     82a:	44 0f       	add	r20, r20
     82c:	29 85       	ldd	r18, Y+9	; 0x09
     82e:	3a 85       	ldd	r19, Y+10	; 0x0a
     830:	2e 5f       	subi	r18, 0xFE	; 254
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	2e 5f       	subi	r18, 0xFE	; 254
     836:	3f 4f       	sbci	r19, 0xFF	; 255
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	22 95       	swap	r18
     83e:	26 95       	lsr	r18
     840:	27 70       	andi	r18, 0x07	; 7
     842:	24 0f       	add	r18, r20
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	82 ef       	ldi	r24, 0xF2	; 242
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	29 85       	ldd	r18, Y+9	; 0x09
     84e:	3a 85       	ldd	r19, Y+10	; 0x0a
     850:	2e 5f       	subi	r18, 0xFE	; 254
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	2e 5f       	subi	r18, 0xFE	; 254
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	42 2f       	mov	r20, r18
     85e:	44 0f       	add	r20, r20
     860:	44 0f       	add	r20, r20
     862:	44 0f       	add	r20, r20
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	2e 5f       	subi	r18, 0xFE	; 254
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	22 95       	swap	r18
     876:	26 95       	lsr	r18
     878:	27 70       	andi	r18, 0x07	; 7
     87a:	24 0f       	add	r18, r20
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
     880:	81 ef       	ldi	r24, 0xF1	; 241
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	29 85       	ldd	r18, Y+9	; 0x09
     886:	3a 85       	ldd	r19, Y+10	; 0x0a
     888:	2e 5f       	subi	r18, 0xFE	; 254
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	42 2f       	mov	r20, r18
     896:	44 0f       	add	r20, r20
     898:	44 0f       	add	r20, r20
     89a:	44 0f       	add	r20, r20
     89c:	29 85       	ldd	r18, Y+9	; 0x09
     89e:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a0:	2e 5f       	subi	r18, 0xFE	; 254
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	22 95       	swap	r18
     8aa:	26 95       	lsr	r18
     8ac:	27 70       	andi	r18, 0x07	; 7
     8ae:	24 0f       	add	r18, r20
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	80 ef       	ldi	r24, 0xF0	; 240
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	29 85       	ldd	r18, Y+9	; 0x09
     8ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     8bc:	2e 5f       	subi	r18, 0xFE	; 254
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	22 0f       	add	r18, r18
     8c6:	22 0f       	add	r18, r18
     8c8:	22 0f       	add	r18, r18
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
     8ce:	8f ee       	ldi	r24, 0xEF	; 239
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2f ee       	ldi	r18, 0xEF	; 239
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	20 61       	ori	r18, 0x10	; 16
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
     8e0:	30 c0       	rjmp	.+96     	; 0x942 <__stack+0x43>
          else              { Can_set_std_id(cmd->id.std);}
     8e2:	83 ef       	ldi	r24, 0xF3	; 243
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	29 85       	ldd	r18, Y+9	; 0x09
     8e8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ea:	2e 5f       	subi	r18, 0xFE	; 254
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	f9 01       	movw	r30, r18
     8f4:	20 81       	ld	r18, Z
     8f6:	42 2f       	mov	r20, r18
     8f8:	42 95       	swap	r20
     8fa:	44 0f       	add	r20, r20
     8fc:	40 7e       	andi	r20, 0xE0	; 224
     8fe:	29 85       	ldd	r18, Y+9	; 0x09
     900:	3a 85       	ldd	r19, Y+10	; 0x0a
     902:	2e 5f       	subi	r18, 0xFE	; 254
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	26 95       	lsr	r18
     90c:	26 95       	lsr	r18
     90e:	26 95       	lsr	r18
     910:	24 0f       	add	r18, r20
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
     916:	82 ef       	ldi	r24, 0xF2	; 242
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	29 85       	ldd	r18, Y+9	; 0x09
     91c:	3a 85       	ldd	r19, Y+10	; 0x0a
     91e:	2e 5f       	subi	r18, 0xFE	; 254
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	f9 01       	movw	r30, r18
     924:	20 81       	ld	r18, Z
     926:	22 95       	swap	r18
     928:	22 0f       	add	r18, r18
     92a:	20 7e       	andi	r18, 0xE0	; 224
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	8f ee       	ldi	r24, 0xEF	; 239
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2f ee       	ldi	r18, 0xEF	; 239
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	2f 7e       	andi	r18, 0xEF	; 239
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	21 e0       	ldi	r18, 0x01	; 1
     948:	fc 01       	movw	r30, r24
     94a:	22 87       	std	Z+10, r18	; 0x0a
     94c:	80 ef       	ldi	r24, 0xF0	; 240
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	20 ef       	ldi	r18, 0xF0	; 240
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	24 60       	ori	r18, 0x04	; 4
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     95e:	8f ee       	ldi	r24, 0xEF	; 239
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2f ee       	ldi	r18, 0xEF	; 239
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	40 81       	ld	r20, Z
     96a:	29 85       	ldd	r18, Y+9	; 0x09
     96c:	3a 85       	ldd	r19, Y+10	; 0x0a
     96e:	f9 01       	movw	r30, r18
     970:	26 81       	ldd	r18, Z+6	; 0x06
     972:	24 2b       	or	r18, r20
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
          Can_config_tx();
     978:	8f ee       	ldi	r24, 0xEF	; 239
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	2f ee       	ldi	r18, 0xEF	; 239
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	f9 01       	movw	r30, r18
     982:	20 81       	ld	r18, Z
     984:	2f 73       	andi	r18, 0x3F	; 63
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	8f ee       	ldi	r24, 0xEF	; 239
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2f ee       	ldi	r18, 0xEF	; 239
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	20 64       	ori	r18, 0x40	; 64
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
          break;
     99c:	5f c7       	rjmp	.+3774   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     99e:	1d 82       	std	Y+5, r1	; 0x05
     9a0:	1e 82       	std	Y+6, r1	; 0x06
     9a2:	1f 82       	std	Y+7, r1	; 0x07
     9a4:	18 86       	std	Y+8, r1	; 0x08
     9a6:	27 ef       	ldi	r18, 0xF7	; 247
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	ce 01       	movw	r24, r28
     9ac:	05 96       	adiw	r24, 0x05	; 5
     9ae:	03 96       	adiw	r24, 0x03	; 3
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	48 2f       	mov	r20, r24
     9b6:	44 0f       	add	r20, r20
     9b8:	44 0f       	add	r20, r20
     9ba:	44 0f       	add	r20, r20
     9bc:	ce 01       	movw	r24, r28
     9be:	05 96       	adiw	r24, 0x05	; 5
     9c0:	02 96       	adiw	r24, 0x02	; 2
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	82 95       	swap	r24
     9c8:	86 95       	lsr	r24
     9ca:	87 70       	andi	r24, 0x07	; 7
     9cc:	84 0f       	add	r24, r20
     9ce:	f9 01       	movw	r30, r18
     9d0:	80 83       	st	Z, r24
     9d2:	26 ef       	ldi	r18, 0xF6	; 246
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	ce 01       	movw	r24, r28
     9d8:	05 96       	adiw	r24, 0x05	; 5
     9da:	02 96       	adiw	r24, 0x02	; 2
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	48 2f       	mov	r20, r24
     9e2:	44 0f       	add	r20, r20
     9e4:	44 0f       	add	r20, r20
     9e6:	44 0f       	add	r20, r20
     9e8:	ce 01       	movw	r24, r28
     9ea:	05 96       	adiw	r24, 0x05	; 5
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	82 95       	swap	r24
     9f4:	86 95       	lsr	r24
     9f6:	87 70       	andi	r24, 0x07	; 7
     9f8:	84 0f       	add	r24, r20
     9fa:	f9 01       	movw	r30, r18
     9fc:	80 83       	st	Z, r24
     9fe:	25 ef       	ldi	r18, 0xF5	; 245
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	ce 01       	movw	r24, r28
     a04:	05 96       	adiw	r24, 0x05	; 5
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	48 2f       	mov	r20, r24
     a0e:	44 0f       	add	r20, r20
     a10:	44 0f       	add	r20, r20
     a12:	44 0f       	add	r20, r20
     a14:	ce 01       	movw	r24, r28
     a16:	05 96       	adiw	r24, 0x05	; 5
     a18:	fc 01       	movw	r30, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	82 95       	swap	r24
     a1e:	86 95       	lsr	r24
     a20:	87 70       	andi	r24, 0x07	; 7
     a22:	84 0f       	add	r24, r20
     a24:	f9 01       	movw	r30, r18
     a26:	80 83       	st	Z, r24
     a28:	84 ef       	ldi	r24, 0xF4	; 244
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9e 01       	movw	r18, r28
     a2e:	2b 5f       	subi	r18, 0xFB	; 251
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	22 0f       	add	r18, r18
     a38:	22 0f       	add	r18, r18
     a3a:	22 0f       	add	r18, r18
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a40:	8f ee       	ldi	r24, 0xEF	; 239
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	2f ee       	ldi	r18, 0xEF	; 239
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	40 81       	ld	r20, Z
     a4c:	29 85       	ldd	r18, Y+9	; 0x09
     a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a50:	f9 01       	movw	r30, r18
     a52:	26 81       	ldd	r18, Z+6	; 0x06
     a54:	24 2b       	or	r18, r20
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     a5a:	84 ef       	ldi	r24, 0xF4	; 244
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	24 ef       	ldi	r18, 0xF4	; 244
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	f9 01       	movw	r30, r18
     a64:	20 81       	ld	r18, Z
     a66:	2b 7f       	andi	r18, 0xFB	; 251
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a6c:	84 ef       	ldi	r24, 0xF4	; 244
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	24 ef       	ldi	r18, 0xF4	; 244
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	2e 7f       	andi	r18, 0xFE	; 254
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
          Can_config_rx();       
     a7e:	8f ee       	ldi	r24, 0xEF	; 239
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2f ee       	ldi	r18, 0xEF	; 239
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	2f 73       	andi	r18, 0x3F	; 63
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	8f ee       	ldi	r24, 0xEF	; 239
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	2f ee       	ldi	r18, 0xEF	; 239
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	f9 01       	movw	r30, r18
     a9a:	20 81       	ld	r18, Z
     a9c:	20 68       	ori	r18, 0x80	; 128
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
          break;
     aa2:	dc c6       	rjmp	.+3512   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     aa4:	1d 82       	std	Y+5, r1	; 0x05
     aa6:	1e 82       	std	Y+6, r1	; 0x06
     aa8:	1f 82       	std	Y+7, r1	; 0x07
     aaa:	18 86       	std	Y+8, r1	; 0x08
     aac:	27 ef       	ldi	r18, 0xF7	; 247
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	ce 01       	movw	r24, r28
     ab2:	05 96       	adiw	r24, 0x05	; 5
     ab4:	03 96       	adiw	r24, 0x03	; 3
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	48 2f       	mov	r20, r24
     abc:	44 0f       	add	r20, r20
     abe:	44 0f       	add	r20, r20
     ac0:	44 0f       	add	r20, r20
     ac2:	ce 01       	movw	r24, r28
     ac4:	05 96       	adiw	r24, 0x05	; 5
     ac6:	02 96       	adiw	r24, 0x02	; 2
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	82 95       	swap	r24
     ace:	86 95       	lsr	r24
     ad0:	87 70       	andi	r24, 0x07	; 7
     ad2:	84 0f       	add	r24, r20
     ad4:	f9 01       	movw	r30, r18
     ad6:	80 83       	st	Z, r24
     ad8:	26 ef       	ldi	r18, 0xF6	; 246
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	ce 01       	movw	r24, r28
     ade:	05 96       	adiw	r24, 0x05	; 5
     ae0:	02 96       	adiw	r24, 0x02	; 2
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	48 2f       	mov	r20, r24
     ae8:	44 0f       	add	r20, r20
     aea:	44 0f       	add	r20, r20
     aec:	44 0f       	add	r20, r20
     aee:	ce 01       	movw	r24, r28
     af0:	05 96       	adiw	r24, 0x05	; 5
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	82 95       	swap	r24
     afa:	86 95       	lsr	r24
     afc:	87 70       	andi	r24, 0x07	; 7
     afe:	84 0f       	add	r24, r20
     b00:	f9 01       	movw	r30, r18
     b02:	80 83       	st	Z, r24
     b04:	25 ef       	ldi	r18, 0xF5	; 245
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	ce 01       	movw	r24, r28
     b0a:	05 96       	adiw	r24, 0x05	; 5
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	fc 01       	movw	r30, r24
     b10:	80 81       	ld	r24, Z
     b12:	48 2f       	mov	r20, r24
     b14:	44 0f       	add	r20, r20
     b16:	44 0f       	add	r20, r20
     b18:	44 0f       	add	r20, r20
     b1a:	ce 01       	movw	r24, r28
     b1c:	05 96       	adiw	r24, 0x05	; 5
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	82 95       	swap	r24
     b24:	86 95       	lsr	r24
     b26:	87 70       	andi	r24, 0x07	; 7
     b28:	84 0f       	add	r24, r20
     b2a:	f9 01       	movw	r30, r18
     b2c:	80 83       	st	Z, r24
     b2e:	84 ef       	ldi	r24, 0xF4	; 244
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9e 01       	movw	r18, r28
     b34:	2b 5f       	subi	r18, 0xFB	; 251
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	f9 01       	movw	r30, r18
     b3a:	20 81       	ld	r18, Z
     b3c:	22 0f       	add	r18, r18
     b3e:	22 0f       	add	r18, r18
     b40:	22 0f       	add	r18, r18
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b46:	8f ee       	ldi	r24, 0xEF	; 239
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	2f ee       	ldi	r18, 0xEF	; 239
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	40 81       	ld	r20, Z
     b52:	29 85       	ldd	r18, Y+9	; 0x09
     b54:	3a 85       	ldd	r19, Y+10	; 0x0a
     b56:	f9 01       	movw	r30, r18
     b58:	26 81       	ldd	r18, Z+6	; 0x06
     b5a:	24 2b       	or	r18, r20
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	fc 01       	movw	r30, r24
     b66:	12 86       	std	Z+10, r1	; 0x0a
     b68:	84 ef       	ldi	r24, 0xF4	; 244
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	24 ef       	ldi	r18, 0xF4	; 244
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	24 60       	ori	r18, 0x04	; 4
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
     b7a:	80 ef       	ldi	r24, 0xF0	; 240
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	20 ef       	ldi	r18, 0xF0	; 240
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	2b 7f       	andi	r18, 0xFB	; 251
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b8c:	84 ef       	ldi	r24, 0xF4	; 244
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	24 ef       	ldi	r18, 0xF4	; 244
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	2e 7f       	andi	r18, 0xFE	; 254
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
          Can_config_rx();       
     b9e:	8f ee       	ldi	r24, 0xEF	; 239
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	2f ee       	ldi	r18, 0xEF	; 239
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	2f 73       	andi	r18, 0x3F	; 63
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
     bb0:	8f ee       	ldi	r24, 0xEF	; 239
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2f ee       	ldi	r18, 0xEF	; 239
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	20 68       	ori	r18, 0x80	; 128
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
          break;
     bc2:	4c c6       	rjmp	.+3224   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	1e 82       	std	Y+6, r1	; 0x06
     bc8:	1f 82       	std	Y+7, r1	; 0x07
     bca:	18 86       	std	Y+8, r1	; 0x08
     bcc:	27 ef       	ldi	r18, 0xF7	; 247
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	ce 01       	movw	r24, r28
     bd2:	05 96       	adiw	r24, 0x05	; 5
     bd4:	03 96       	adiw	r24, 0x03	; 3
     bd6:	fc 01       	movw	r30, r24
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	44 0f       	add	r20, r20
     bde:	44 0f       	add	r20, r20
     be0:	44 0f       	add	r20, r20
     be2:	ce 01       	movw	r24, r28
     be4:	05 96       	adiw	r24, 0x05	; 5
     be6:	02 96       	adiw	r24, 0x02	; 2
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	82 95       	swap	r24
     bee:	86 95       	lsr	r24
     bf0:	87 70       	andi	r24, 0x07	; 7
     bf2:	84 0f       	add	r24, r20
     bf4:	f9 01       	movw	r30, r18
     bf6:	80 83       	st	Z, r24
     bf8:	26 ef       	ldi	r18, 0xF6	; 246
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	ce 01       	movw	r24, r28
     bfe:	05 96       	adiw	r24, 0x05	; 5
     c00:	02 96       	adiw	r24, 0x02	; 2
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	44 0f       	add	r20, r20
     c0a:	44 0f       	add	r20, r20
     c0c:	44 0f       	add	r20, r20
     c0e:	ce 01       	movw	r24, r28
     c10:	05 96       	adiw	r24, 0x05	; 5
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	82 95       	swap	r24
     c1a:	86 95       	lsr	r24
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	84 0f       	add	r24, r20
     c20:	f9 01       	movw	r30, r18
     c22:	80 83       	st	Z, r24
     c24:	25 ef       	ldi	r18, 0xF5	; 245
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	ce 01       	movw	r24, r28
     c2a:	05 96       	adiw	r24, 0x05	; 5
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	44 0f       	add	r20, r20
     c36:	44 0f       	add	r20, r20
     c38:	44 0f       	add	r20, r20
     c3a:	ce 01       	movw	r24, r28
     c3c:	05 96       	adiw	r24, 0x05	; 5
     c3e:	fc 01       	movw	r30, r24
     c40:	80 81       	ld	r24, Z
     c42:	82 95       	swap	r24
     c44:	86 95       	lsr	r24
     c46:	87 70       	andi	r24, 0x07	; 7
     c48:	84 0f       	add	r24, r20
     c4a:	f9 01       	movw	r30, r18
     c4c:	80 83       	st	Z, r24
     c4e:	84 ef       	ldi	r24, 0xF4	; 244
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	9e 01       	movw	r18, r28
     c54:	2b 5f       	subi	r18, 0xFB	; 251
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	f9 01       	movw	r30, r18
     c5a:	20 81       	ld	r18, Z
     c5c:	22 0f       	add	r18, r18
     c5e:	22 0f       	add	r18, r18
     c60:	22 0f       	add	r18, r18
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c66:	8f ee       	ldi	r24, 0xEF	; 239
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2f ee       	ldi	r18, 0xEF	; 239
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	40 81       	ld	r20, Z
     c72:	29 85       	ldd	r18, Y+9	; 0x09
     c74:	3a 85       	ldd	r19, Y+10	; 0x0a
     c76:	f9 01       	movw	r30, r18
     c78:	26 81       	ldd	r18, Z+6	; 0x06
     c7a:	24 2b       	or	r18, r20
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	fc 01       	movw	r30, r24
     c88:	22 87       	std	Z+10, r18	; 0x0a
     c8a:	84 ef       	ldi	r24, 0xF4	; 244
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	24 ef       	ldi	r18, 0xF4	; 244
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	24 60       	ori	r18, 0x04	; 4
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	80 ef       	ldi	r24, 0xF0	; 240
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	20 ef       	ldi	r18, 0xF0	; 240
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	24 60       	ori	r18, 0x04	; 4
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
          Can_clear_rplv();
     cae:	8f ee       	ldi	r24, 0xEF	; 239
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2f ee       	ldi	r18, 0xEF	; 239
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	2f 7d       	andi	r18, 0xDF	; 223
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
          Can_clear_idemsk();
     cc0:	84 ef       	ldi	r24, 0xF4	; 244
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	24 ef       	ldi	r18, 0xF4	; 244
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	f9 01       	movw	r30, r18
     cca:	20 81       	ld	r18, Z
     ccc:	2e 7f       	andi	r18, 0xFE	; 254
     cce:	fc 01       	movw	r30, r24
     cd0:	20 83       	st	Z, r18
          Can_config_rx();       
     cd2:	8f ee       	ldi	r24, 0xEF	; 239
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	2f ee       	ldi	r18, 0xEF	; 239
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	f9 01       	movw	r30, r18
     cdc:	20 81       	ld	r18, Z
     cde:	2f 73       	andi	r18, 0x3F	; 63
     ce0:	fc 01       	movw	r30, r24
     ce2:	20 83       	st	Z, r18
     ce4:	8f ee       	ldi	r24, 0xEF	; 239
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2f ee       	ldi	r18, 0xEF	; 239
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	20 68       	ori	r18, 0x80	; 128
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
          break;
     cf6:	b2 c5       	rjmp	.+2916   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	fc 01       	movw	r30, r24
     cfe:	83 85       	ldd	r24, Z+11	; 0x0b
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <__stack+0x407>
     d04:	69 c0       	rjmp	.+210    	; 0xdd8 <__stack+0x4d9>
     d06:	83 ef       	ldi	r24, 0xF3	; 243
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	29 85       	ldd	r18, Y+9	; 0x09
     d0c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d0e:	2e 5f       	subi	r18, 0xFE	; 254
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	2d 5f       	subi	r18, 0xFD	; 253
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	42 2f       	mov	r20, r18
     d1c:	44 0f       	add	r20, r20
     d1e:	44 0f       	add	r20, r20
     d20:	44 0f       	add	r20, r20
     d22:	29 85       	ldd	r18, Y+9	; 0x09
     d24:	3a 85       	ldd	r19, Y+10	; 0x0a
     d26:	2e 5f       	subi	r18, 0xFE	; 254
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	2e 5f       	subi	r18, 0xFE	; 254
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	f9 01       	movw	r30, r18
     d30:	20 81       	ld	r18, Z
     d32:	22 95       	swap	r18
     d34:	26 95       	lsr	r18
     d36:	27 70       	andi	r18, 0x07	; 7
     d38:	24 0f       	add	r18, r20
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	82 ef       	ldi	r24, 0xF2	; 242
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	29 85       	ldd	r18, Y+9	; 0x09
     d44:	3a 85       	ldd	r19, Y+10	; 0x0a
     d46:	2e 5f       	subi	r18, 0xFE	; 254
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	2e 5f       	subi	r18, 0xFE	; 254
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	f9 01       	movw	r30, r18
     d50:	20 81       	ld	r18, Z
     d52:	42 2f       	mov	r20, r18
     d54:	44 0f       	add	r20, r20
     d56:	44 0f       	add	r20, r20
     d58:	44 0f       	add	r20, r20
     d5a:	29 85       	ldd	r18, Y+9	; 0x09
     d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d5e:	2e 5f       	subi	r18, 0xFE	; 254
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	f9 01       	movw	r30, r18
     d68:	20 81       	ld	r18, Z
     d6a:	22 95       	swap	r18
     d6c:	26 95       	lsr	r18
     d6e:	27 70       	andi	r18, 0x07	; 7
     d70:	24 0f       	add	r18, r20
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
     d76:	81 ef       	ldi	r24, 0xF1	; 241
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	29 85       	ldd	r18, Y+9	; 0x09
     d7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7e:	2e 5f       	subi	r18, 0xFE	; 254
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	42 2f       	mov	r20, r18
     d8c:	44 0f       	add	r20, r20
     d8e:	44 0f       	add	r20, r20
     d90:	44 0f       	add	r20, r20
     d92:	29 85       	ldd	r18, Y+9	; 0x09
     d94:	3a 85       	ldd	r19, Y+10	; 0x0a
     d96:	2e 5f       	subi	r18, 0xFE	; 254
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	22 95       	swap	r18
     da0:	26 95       	lsr	r18
     da2:	27 70       	andi	r18, 0x07	; 7
     da4:	24 0f       	add	r18, r20
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
     daa:	80 ef       	ldi	r24, 0xF0	; 240
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	29 85       	ldd	r18, Y+9	; 0x09
     db0:	3a 85       	ldd	r19, Y+10	; 0x0a
     db2:	2e 5f       	subi	r18, 0xFE	; 254
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	22 0f       	add	r18, r18
     dbc:	22 0f       	add	r18, r18
     dbe:	22 0f       	add	r18, r18
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
     dc4:	8f ee       	ldi	r24, 0xEF	; 239
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	2f ee       	ldi	r18, 0xEF	; 239
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	20 61       	ori	r18, 0x10	; 16
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18
     dd6:	30 c0       	rjmp	.+96     	; 0xe38 <__stack+0x539>
          else              { Can_set_std_id(cmd->id.std);}
     dd8:	83 ef       	ldi	r24, 0xF3	; 243
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	29 85       	ldd	r18, Y+9	; 0x09
     dde:	3a 85       	ldd	r19, Y+10	; 0x0a
     de0:	2e 5f       	subi	r18, 0xFE	; 254
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	2f 5f       	subi	r18, 0xFF	; 255
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	f9 01       	movw	r30, r18
     dea:	20 81       	ld	r18, Z
     dec:	42 2f       	mov	r20, r18
     dee:	42 95       	swap	r20
     df0:	44 0f       	add	r20, r20
     df2:	40 7e       	andi	r20, 0xE0	; 224
     df4:	29 85       	ldd	r18, Y+9	; 0x09
     df6:	3a 85       	ldd	r19, Y+10	; 0x0a
     df8:	2e 5f       	subi	r18, 0xFE	; 254
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	f9 01       	movw	r30, r18
     dfe:	20 81       	ld	r18, Z
     e00:	26 95       	lsr	r18
     e02:	26 95       	lsr	r18
     e04:	26 95       	lsr	r18
     e06:	24 0f       	add	r18, r20
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	82 ef       	ldi	r24, 0xF2	; 242
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	29 85       	ldd	r18, Y+9	; 0x09
     e12:	3a 85       	ldd	r19, Y+10	; 0x0a
     e14:	2e 5f       	subi	r18, 0xFE	; 254
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	22 95       	swap	r18
     e1e:	22 0f       	add	r18, r18
     e20:	20 7e       	andi	r18, 0xE0	; 224
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	8f ee       	ldi	r24, 0xEF	; 239
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2f ee       	ldi	r18, 0xEF	; 239
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	2f 7e       	andi	r18, 0xEF	; 239
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	9f ef       	ldi	r25, 0xFF	; 255
     e3c:	dc 01       	movw	r26, r24
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	af 83       	std	Y+7, r26	; 0x07
     e44:	b8 87       	std	Y+8, r27	; 0x08
     e46:	27 ef       	ldi	r18, 0xF7	; 247
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	ce 01       	movw	r24, r28
     e4c:	05 96       	adiw	r24, 0x05	; 5
     e4e:	03 96       	adiw	r24, 0x03	; 3
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	44 0f       	add	r20, r20
     e58:	44 0f       	add	r20, r20
     e5a:	44 0f       	add	r20, r20
     e5c:	ce 01       	movw	r24, r28
     e5e:	05 96       	adiw	r24, 0x05	; 5
     e60:	02 96       	adiw	r24, 0x02	; 2
     e62:	fc 01       	movw	r30, r24
     e64:	80 81       	ld	r24, Z
     e66:	82 95       	swap	r24
     e68:	86 95       	lsr	r24
     e6a:	87 70       	andi	r24, 0x07	; 7
     e6c:	84 0f       	add	r24, r20
     e6e:	f9 01       	movw	r30, r18
     e70:	80 83       	st	Z, r24
     e72:	26 ef       	ldi	r18, 0xF6	; 246
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	ce 01       	movw	r24, r28
     e78:	05 96       	adiw	r24, 0x05	; 5
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	44 0f       	add	r20, r20
     e84:	44 0f       	add	r20, r20
     e86:	44 0f       	add	r20, r20
     e88:	ce 01       	movw	r24, r28
     e8a:	05 96       	adiw	r24, 0x05	; 5
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	82 95       	swap	r24
     e94:	86 95       	lsr	r24
     e96:	87 70       	andi	r24, 0x07	; 7
     e98:	84 0f       	add	r24, r20
     e9a:	f9 01       	movw	r30, r18
     e9c:	80 83       	st	Z, r24
     e9e:	25 ef       	ldi	r18, 0xF5	; 245
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	05 96       	adiw	r24, 0x05	; 5
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	44 0f       	add	r20, r20
     eb0:	44 0f       	add	r20, r20
     eb2:	44 0f       	add	r20, r20
     eb4:	ce 01       	movw	r24, r28
     eb6:	05 96       	adiw	r24, 0x05	; 5
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	82 95       	swap	r24
     ebe:	86 95       	lsr	r24
     ec0:	87 70       	andi	r24, 0x07	; 7
     ec2:	84 0f       	add	r24, r20
     ec4:	f9 01       	movw	r30, r18
     ec6:	80 83       	st	Z, r24
     ec8:	84 ef       	ldi	r24, 0xF4	; 244
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9e 01       	movw	r18, r28
     ece:	2b 5f       	subi	r18, 0xFB	; 251
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	22 0f       	add	r18, r18
     ed8:	22 0f       	add	r18, r18
     eda:	22 0f       	add	r18, r18
     edc:	fc 01       	movw	r30, r24
     ede:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ee0:	8f ee       	ldi	r24, 0xEF	; 239
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2f ee       	ldi	r18, 0xEF	; 239
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	f9 01       	movw	r30, r18
     eea:	40 81       	ld	r20, Z
     eec:	29 85       	ldd	r18, Y+9	; 0x09
     eee:	3a 85       	ldd	r19, Y+10	; 0x0a
     ef0:	f9 01       	movw	r30, r18
     ef2:	26 81       	ldd	r18, Z+6	; 0x06
     ef4:	24 2b       	or	r18, r20
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     efa:	84 ef       	ldi	r24, 0xF4	; 244
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	24 ef       	ldi	r18, 0xF4	; 244
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	2b 7f       	andi	r18, 0xFB	; 251
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
          Can_set_idemsk();
     f0c:	84 ef       	ldi	r24, 0xF4	; 244
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	24 ef       	ldi	r18, 0xF4	; 244
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	21 60       	ori	r18, 0x01	; 1
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
          Can_config_rx();       
     f1e:	8f ee       	ldi	r24, 0xEF	; 239
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2f ee       	ldi	r18, 0xEF	; 239
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	f9 01       	movw	r30, r18
     f28:	20 81       	ld	r18, Z
     f2a:	2f 73       	andi	r18, 0x3F	; 63
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
     f30:	8f ee       	ldi	r24, 0xEF	; 239
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	2f ee       	ldi	r18, 0xEF	; 239
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	20 68       	ori	r18, 0x80	; 128
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
          break;
     f42:	8c c4       	rjmp	.+2328   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	fc 01       	movw	r30, r24
     f4a:	83 85       	ldd	r24, Z+11	; 0x0b
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__stack+0x653>
     f50:	69 c0       	rjmp	.+210    	; 0x1024 <__stack+0x725>
     f52:	83 ef       	ldi	r24, 0xF3	; 243
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	29 85       	ldd	r18, Y+9	; 0x09
     f58:	3a 85       	ldd	r19, Y+10	; 0x0a
     f5a:	2e 5f       	subi	r18, 0xFE	; 254
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	2d 5f       	subi	r18, 0xFD	; 253
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	42 2f       	mov	r20, r18
     f68:	44 0f       	add	r20, r20
     f6a:	44 0f       	add	r20, r20
     f6c:	44 0f       	add	r20, r20
     f6e:	29 85       	ldd	r18, Y+9	; 0x09
     f70:	3a 85       	ldd	r19, Y+10	; 0x0a
     f72:	2e 5f       	subi	r18, 0xFE	; 254
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	2e 5f       	subi	r18, 0xFE	; 254
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	22 95       	swap	r18
     f80:	26 95       	lsr	r18
     f82:	27 70       	andi	r18, 0x07	; 7
     f84:	24 0f       	add	r18, r20
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
     f8a:	82 ef       	ldi	r24, 0xF2	; 242
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	29 85       	ldd	r18, Y+9	; 0x09
     f90:	3a 85       	ldd	r19, Y+10	; 0x0a
     f92:	2e 5f       	subi	r18, 0xFE	; 254
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	2e 5f       	subi	r18, 0xFE	; 254
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	f9 01       	movw	r30, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	42 2f       	mov	r20, r18
     fa0:	44 0f       	add	r20, r20
     fa2:	44 0f       	add	r20, r20
     fa4:	44 0f       	add	r20, r20
     fa6:	29 85       	ldd	r18, Y+9	; 0x09
     fa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     faa:	2e 5f       	subi	r18, 0xFE	; 254
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	2f 5f       	subi	r18, 0xFF	; 255
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	22 95       	swap	r18
     fb8:	26 95       	lsr	r18
     fba:	27 70       	andi	r18, 0x07	; 7
     fbc:	24 0f       	add	r18, r20
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
     fc2:	81 ef       	ldi	r24, 0xF1	; 241
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	29 85       	ldd	r18, Y+9	; 0x09
     fc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fca:	2e 5f       	subi	r18, 0xFE	; 254
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	2f 5f       	subi	r18, 0xFF	; 255
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	42 2f       	mov	r20, r18
     fd8:	44 0f       	add	r20, r20
     fda:	44 0f       	add	r20, r20
     fdc:	44 0f       	add	r20, r20
     fde:	29 85       	ldd	r18, Y+9	; 0x09
     fe0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe2:	2e 5f       	subi	r18, 0xFE	; 254
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	f9 01       	movw	r30, r18
     fe8:	20 81       	ld	r18, Z
     fea:	22 95       	swap	r18
     fec:	26 95       	lsr	r18
     fee:	27 70       	andi	r18, 0x07	; 7
     ff0:	24 0f       	add	r18, r20
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
     ff6:	80 ef       	ldi	r24, 0xF0	; 240
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	29 85       	ldd	r18, Y+9	; 0x09
     ffc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffe:	2e 5f       	subi	r18, 0xFE	; 254
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	f9 01       	movw	r30, r18
    1004:	20 81       	ld	r18, Z
    1006:	22 0f       	add	r18, r18
    1008:	22 0f       	add	r18, r18
    100a:	22 0f       	add	r18, r18
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    1010:	8f ee       	ldi	r24, 0xEF	; 239
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2f ee       	ldi	r18, 0xEF	; 239
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	20 61       	ori	r18, 0x10	; 16
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
    1022:	30 c0       	rjmp	.+96     	; 0x1084 <__stack+0x785>
          else              { Can_set_std_id(cmd->id.std);}
    1024:	83 ef       	ldi	r24, 0xF3	; 243
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	29 85       	ldd	r18, Y+9	; 0x09
    102a:	3a 85       	ldd	r19, Y+10	; 0x0a
    102c:	2e 5f       	subi	r18, 0xFE	; 254
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	42 2f       	mov	r20, r18
    103a:	42 95       	swap	r20
    103c:	44 0f       	add	r20, r20
    103e:	40 7e       	andi	r20, 0xE0	; 224
    1040:	29 85       	ldd	r18, Y+9	; 0x09
    1042:	3a 85       	ldd	r19, Y+10	; 0x0a
    1044:	2e 5f       	subi	r18, 0xFE	; 254
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	f9 01       	movw	r30, r18
    104a:	20 81       	ld	r18, Z
    104c:	26 95       	lsr	r18
    104e:	26 95       	lsr	r18
    1050:	26 95       	lsr	r18
    1052:	24 0f       	add	r18, r20
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	82 ef       	ldi	r24, 0xF2	; 242
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	29 85       	ldd	r18, Y+9	; 0x09
    105e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1060:	2e 5f       	subi	r18, 0xFE	; 254
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	22 95       	swap	r18
    106a:	22 0f       	add	r18, r18
    106c:	20 7e       	andi	r18, 0xE0	; 224
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
    1072:	8f ee       	ldi	r24, 0xEF	; 239
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	2f ee       	ldi	r18, 0xEF	; 239
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	2f 7e       	andi	r18, 0xEF	; 239
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	dc 01       	movw	r26, r24
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	af 83       	std	Y+7, r26	; 0x07
    1090:	b8 87       	std	Y+8, r27	; 0x08
    1092:	27 ef       	ldi	r18, 0xF7	; 247
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	ce 01       	movw	r24, r28
    1098:	05 96       	adiw	r24, 0x05	; 5
    109a:	03 96       	adiw	r24, 0x03	; 3
    109c:	fc 01       	movw	r30, r24
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	44 0f       	add	r20, r20
    10a4:	44 0f       	add	r20, r20
    10a6:	44 0f       	add	r20, r20
    10a8:	ce 01       	movw	r24, r28
    10aa:	05 96       	adiw	r24, 0x05	; 5
    10ac:	02 96       	adiw	r24, 0x02	; 2
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	82 95       	swap	r24
    10b4:	86 95       	lsr	r24
    10b6:	87 70       	andi	r24, 0x07	; 7
    10b8:	84 0f       	add	r24, r20
    10ba:	f9 01       	movw	r30, r18
    10bc:	80 83       	st	Z, r24
    10be:	26 ef       	ldi	r18, 0xF6	; 246
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	ce 01       	movw	r24, r28
    10c4:	05 96       	adiw	r24, 0x05	; 5
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	44 0f       	add	r20, r20
    10d0:	44 0f       	add	r20, r20
    10d2:	44 0f       	add	r20, r20
    10d4:	ce 01       	movw	r24, r28
    10d6:	05 96       	adiw	r24, 0x05	; 5
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	fc 01       	movw	r30, r24
    10dc:	80 81       	ld	r24, Z
    10de:	82 95       	swap	r24
    10e0:	86 95       	lsr	r24
    10e2:	87 70       	andi	r24, 0x07	; 7
    10e4:	84 0f       	add	r24, r20
    10e6:	f9 01       	movw	r30, r18
    10e8:	80 83       	st	Z, r24
    10ea:	25 ef       	ldi	r18, 0xF5	; 245
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	ce 01       	movw	r24, r28
    10f0:	05 96       	adiw	r24, 0x05	; 5
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	fc 01       	movw	r30, r24
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	44 0f       	add	r20, r20
    10fc:	44 0f       	add	r20, r20
    10fe:	44 0f       	add	r20, r20
    1100:	ce 01       	movw	r24, r28
    1102:	05 96       	adiw	r24, 0x05	; 5
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	82 95       	swap	r24
    110a:	86 95       	lsr	r24
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	84 0f       	add	r24, r20
    1110:	f9 01       	movw	r30, r18
    1112:	80 83       	st	Z, r24
    1114:	84 ef       	ldi	r24, 0xF4	; 244
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9e 01       	movw	r18, r28
    111a:	2b 5f       	subi	r18, 0xFB	; 251
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	f9 01       	movw	r30, r18
    1120:	20 81       	ld	r18, Z
    1122:	22 0f       	add	r18, r18
    1124:	22 0f       	add	r18, r18
    1126:	22 0f       	add	r18, r18
    1128:	fc 01       	movw	r30, r24
    112a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    112c:	8f ee       	ldi	r24, 0xEF	; 239
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	2f ee       	ldi	r18, 0xEF	; 239
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	f9 01       	movw	r30, r18
    1136:	40 81       	ld	r20, Z
    1138:	29 85       	ldd	r18, Y+9	; 0x09
    113a:	3a 85       	ldd	r19, Y+10	; 0x0a
    113c:	f9 01       	movw	r30, r18
    113e:	26 81       	ldd	r18, Z+6	; 0x06
    1140:	24 2b       	or	r18, r20
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	fc 01       	movw	r30, r24
    114c:	12 86       	std	Z+10, r1	; 0x0a
    114e:	84 ef       	ldi	r24, 0xF4	; 244
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	24 ef       	ldi	r18, 0xF4	; 244
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	f9 01       	movw	r30, r18
    1158:	20 81       	ld	r18, Z
    115a:	24 60       	ori	r18, 0x04	; 4
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
    1160:	80 ef       	ldi	r24, 0xF0	; 240
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	20 ef       	ldi	r18, 0xF0	; 240
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	f9 01       	movw	r30, r18
    116a:	20 81       	ld	r18, Z
    116c:	2b 7f       	andi	r18, 0xFB	; 251
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
          Can_set_idemsk();
    1172:	84 ef       	ldi	r24, 0xF4	; 244
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	24 ef       	ldi	r18, 0xF4	; 244
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	f9 01       	movw	r30, r18
    117c:	20 81       	ld	r18, Z
    117e:	21 60       	ori	r18, 0x01	; 1
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18
          Can_config_rx();       
    1184:	8f ee       	ldi	r24, 0xEF	; 239
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	2f ee       	ldi	r18, 0xEF	; 239
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	f9 01       	movw	r30, r18
    118e:	20 81       	ld	r18, Z
    1190:	2f 73       	andi	r18, 0x3F	; 63
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
    1196:	8f ee       	ldi	r24, 0xEF	; 239
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2f ee       	ldi	r18, 0xEF	; 239
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	20 68       	ori	r18, 0x80	; 128
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
          break;
    11a8:	59 c3       	rjmp	.+1714   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	fc 01       	movw	r30, r24
    11b0:	83 85       	ldd	r24, Z+11	; 0x0b
    11b2:	88 23       	and	r24, r24
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__stack+0x8b9>
    11b6:	69 c0       	rjmp	.+210    	; 0x128a <__stack+0x98b>
    11b8:	83 ef       	ldi	r24, 0xF3	; 243
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	29 85       	ldd	r18, Y+9	; 0x09
    11be:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c0:	2e 5f       	subi	r18, 0xFE	; 254
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	2d 5f       	subi	r18, 0xFD	; 253
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	42 2f       	mov	r20, r18
    11ce:	44 0f       	add	r20, r20
    11d0:	44 0f       	add	r20, r20
    11d2:	44 0f       	add	r20, r20
    11d4:	29 85       	ldd	r18, Y+9	; 0x09
    11d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d8:	2e 5f       	subi	r18, 0xFE	; 254
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	2e 5f       	subi	r18, 0xFE	; 254
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	f9 01       	movw	r30, r18
    11e2:	20 81       	ld	r18, Z
    11e4:	22 95       	swap	r18
    11e6:	26 95       	lsr	r18
    11e8:	27 70       	andi	r18, 0x07	; 7
    11ea:	24 0f       	add	r18, r20
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	82 ef       	ldi	r24, 0xF2	; 242
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	29 85       	ldd	r18, Y+9	; 0x09
    11f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f8:	2e 5f       	subi	r18, 0xFE	; 254
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	2e 5f       	subi	r18, 0xFE	; 254
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	42 2f       	mov	r20, r18
    1206:	44 0f       	add	r20, r20
    1208:	44 0f       	add	r20, r20
    120a:	44 0f       	add	r20, r20
    120c:	29 85       	ldd	r18, Y+9	; 0x09
    120e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1210:	2e 5f       	subi	r18, 0xFE	; 254
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	2f 5f       	subi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	f9 01       	movw	r30, r18
    121a:	20 81       	ld	r18, Z
    121c:	22 95       	swap	r18
    121e:	26 95       	lsr	r18
    1220:	27 70       	andi	r18, 0x07	; 7
    1222:	24 0f       	add	r18, r20
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	81 ef       	ldi	r24, 0xF1	; 241
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	29 85       	ldd	r18, Y+9	; 0x09
    122e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1230:	2e 5f       	subi	r18, 0xFE	; 254
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	f9 01       	movw	r30, r18
    123a:	20 81       	ld	r18, Z
    123c:	42 2f       	mov	r20, r18
    123e:	44 0f       	add	r20, r20
    1240:	44 0f       	add	r20, r20
    1242:	44 0f       	add	r20, r20
    1244:	29 85       	ldd	r18, Y+9	; 0x09
    1246:	3a 85       	ldd	r19, Y+10	; 0x0a
    1248:	2e 5f       	subi	r18, 0xFE	; 254
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	f9 01       	movw	r30, r18
    124e:	20 81       	ld	r18, Z
    1250:	22 95       	swap	r18
    1252:	26 95       	lsr	r18
    1254:	27 70       	andi	r18, 0x07	; 7
    1256:	24 0f       	add	r18, r20
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	80 ef       	ldi	r24, 0xF0	; 240
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	29 85       	ldd	r18, Y+9	; 0x09
    1262:	3a 85       	ldd	r19, Y+10	; 0x0a
    1264:	2e 5f       	subi	r18, 0xFE	; 254
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	f9 01       	movw	r30, r18
    126a:	20 81       	ld	r18, Z
    126c:	22 0f       	add	r18, r18
    126e:	22 0f       	add	r18, r18
    1270:	22 0f       	add	r18, r18
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	8f ee       	ldi	r24, 0xEF	; 239
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	2f ee       	ldi	r18, 0xEF	; 239
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	20 61       	ori	r18, 0x10	; 16
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
    1288:	30 c0       	rjmp	.+96     	; 0x12ea <__stack+0x9eb>
          else              { Can_set_std_id(cmd->id.std);}
    128a:	83 ef       	ldi	r24, 0xF3	; 243
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	29 85       	ldd	r18, Y+9	; 0x09
    1290:	3a 85       	ldd	r19, Y+10	; 0x0a
    1292:	2e 5f       	subi	r18, 0xFE	; 254
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	f9 01       	movw	r30, r18
    129c:	20 81       	ld	r18, Z
    129e:	42 2f       	mov	r20, r18
    12a0:	42 95       	swap	r20
    12a2:	44 0f       	add	r20, r20
    12a4:	40 7e       	andi	r20, 0xE0	; 224
    12a6:	29 85       	ldd	r18, Y+9	; 0x09
    12a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12aa:	2e 5f       	subi	r18, 0xFE	; 254
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	26 95       	lsr	r18
    12b4:	26 95       	lsr	r18
    12b6:	26 95       	lsr	r18
    12b8:	24 0f       	add	r18, r20
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
    12be:	82 ef       	ldi	r24, 0xF2	; 242
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	29 85       	ldd	r18, Y+9	; 0x09
    12c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c6:	2e 5f       	subi	r18, 0xFE	; 254
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ca:	f9 01       	movw	r30, r18
    12cc:	20 81       	ld	r18, Z
    12ce:	22 95       	swap	r18
    12d0:	22 0f       	add	r18, r18
    12d2:	20 7e       	andi	r18, 0xE0	; 224
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
    12d8:	8f ee       	ldi	r24, 0xEF	; 239
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	2f ee       	ldi	r18, 0xEF	; 239
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	f9 01       	movw	r30, r18
    12e2:	20 81       	ld	r18, Z
    12e4:	2f 7e       	andi	r18, 0xEF	; 239
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	dc 01       	movw	r26, r24
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	af 83       	std	Y+7, r26	; 0x07
    12f6:	b8 87       	std	Y+8, r27	; 0x08
    12f8:	27 ef       	ldi	r18, 0xF7	; 247
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	ce 01       	movw	r24, r28
    12fe:	05 96       	adiw	r24, 0x05	; 5
    1300:	03 96       	adiw	r24, 0x03	; 3
    1302:	fc 01       	movw	r30, r24
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	44 0f       	add	r20, r20
    130a:	44 0f       	add	r20, r20
    130c:	44 0f       	add	r20, r20
    130e:	ce 01       	movw	r24, r28
    1310:	05 96       	adiw	r24, 0x05	; 5
    1312:	02 96       	adiw	r24, 0x02	; 2
    1314:	fc 01       	movw	r30, r24
    1316:	80 81       	ld	r24, Z
    1318:	82 95       	swap	r24
    131a:	86 95       	lsr	r24
    131c:	87 70       	andi	r24, 0x07	; 7
    131e:	84 0f       	add	r24, r20
    1320:	f9 01       	movw	r30, r18
    1322:	80 83       	st	Z, r24
    1324:	26 ef       	ldi	r18, 0xF6	; 246
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	05 96       	adiw	r24, 0x05	; 5
    132c:	02 96       	adiw	r24, 0x02	; 2
    132e:	fc 01       	movw	r30, r24
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	44 0f       	add	r20, r20
    1336:	44 0f       	add	r20, r20
    1338:	44 0f       	add	r20, r20
    133a:	ce 01       	movw	r24, r28
    133c:	05 96       	adiw	r24, 0x05	; 5
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	fc 01       	movw	r30, r24
    1342:	80 81       	ld	r24, Z
    1344:	82 95       	swap	r24
    1346:	86 95       	lsr	r24
    1348:	87 70       	andi	r24, 0x07	; 7
    134a:	84 0f       	add	r24, r20
    134c:	f9 01       	movw	r30, r18
    134e:	80 83       	st	Z, r24
    1350:	25 ef       	ldi	r18, 0xF5	; 245
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	ce 01       	movw	r24, r28
    1356:	05 96       	adiw	r24, 0x05	; 5
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	44 0f       	add	r20, r20
    1362:	44 0f       	add	r20, r20
    1364:	44 0f       	add	r20, r20
    1366:	ce 01       	movw	r24, r28
    1368:	05 96       	adiw	r24, 0x05	; 5
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	82 95       	swap	r24
    1370:	86 95       	lsr	r24
    1372:	87 70       	andi	r24, 0x07	; 7
    1374:	84 0f       	add	r24, r20
    1376:	f9 01       	movw	r30, r18
    1378:	80 83       	st	Z, r24
    137a:	84 ef       	ldi	r24, 0xF4	; 244
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 01       	movw	r18, r28
    1380:	2b 5f       	subi	r18, 0xFB	; 251
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	f9 01       	movw	r30, r18
    1386:	20 81       	ld	r18, Z
    1388:	22 0f       	add	r18, r18
    138a:	22 0f       	add	r18, r18
    138c:	22 0f       	add	r18, r18
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1392:	8f ee       	ldi	r24, 0xEF	; 239
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2f ee       	ldi	r18, 0xEF	; 239
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	f9 01       	movw	r30, r18
    139c:	40 81       	ld	r20, Z
    139e:	29 85       	ldd	r18, Y+9	; 0x09
    13a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a2:	f9 01       	movw	r30, r18
    13a4:	26 81       	ldd	r18, Z+6	; 0x06
    13a6:	24 2b       	or	r18, r20
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	21 e0       	ldi	r18, 0x01	; 1
    13b2:	fc 01       	movw	r30, r24
    13b4:	22 87       	std	Z+10, r18	; 0x0a
    13b6:	84 ef       	ldi	r24, 0xF4	; 244
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	24 ef       	ldi	r18, 0xF4	; 244
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	24 60       	ori	r18, 0x04	; 4
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
    13c8:	80 ef       	ldi	r24, 0xF0	; 240
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	20 ef       	ldi	r18, 0xF0	; 240
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	f9 01       	movw	r30, r18
    13d2:	20 81       	ld	r18, Z
    13d4:	24 60       	ori	r18, 0x04	; 4
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
          Can_clear_rplv();
    13da:	8f ee       	ldi	r24, 0xEF	; 239
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	2f ee       	ldi	r18, 0xEF	; 239
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	f9 01       	movw	r30, r18
    13e4:	20 81       	ld	r18, Z
    13e6:	2f 7d       	andi	r18, 0xDF	; 223
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18
          Can_set_idemsk();
    13ec:	84 ef       	ldi	r24, 0xF4	; 244
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	24 ef       	ldi	r18, 0xF4	; 244
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	f9 01       	movw	r30, r18
    13f6:	20 81       	ld	r18, Z
    13f8:	21 60       	ori	r18, 0x01	; 1
    13fa:	fc 01       	movw	r30, r24
    13fc:	20 83       	st	Z, r18
          Can_config_rx();       
    13fe:	8f ee       	ldi	r24, 0xEF	; 239
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	2f ee       	ldi	r18, 0xEF	; 239
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	2f 73       	andi	r18, 0x3F	; 63
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
    1410:	8f ee       	ldi	r24, 0xEF	; 239
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	2f ee       	ldi	r18, 0xEF	; 239
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	20 68       	ori	r18, 0x80	; 128
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
          break;
    1422:	1c c2       	rjmp	.+1080   	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	13 c0       	rjmp	.+38     	; 0x144e <__stack+0xb4f>
    1428:	8a ef       	ldi	r24, 0xFA	; 250
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	29 85       	ldd	r18, Y+9	; 0x09
    142e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1430:	f9 01       	movw	r30, r18
    1432:	47 81       	ldd	r20, Z+7	; 0x07
    1434:	50 85       	ldd	r21, Z+8	; 0x08
    1436:	29 81       	ldd	r18, Y+1	; 0x01
    1438:	22 2f       	mov	r18, r18
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	24 0f       	add	r18, r20
    143e:	35 1f       	adc	r19, r21
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	fc 01       	movw	r30, r24
    1454:	96 81       	ldd	r25, Z+6	; 0x06
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	89 17       	cp	r24, r25
    145a:	30 f3       	brcs	.-52     	; 0x1428 <__stack+0xb29>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    145c:	1d 82       	std	Y+5, r1	; 0x05
    145e:	1e 82       	std	Y+6, r1	; 0x06
    1460:	1f 82       	std	Y+7, r1	; 0x07
    1462:	18 86       	std	Y+8, r1	; 0x08
    1464:	27 ef       	ldi	r18, 0xF7	; 247
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	ce 01       	movw	r24, r28
    146a:	05 96       	adiw	r24, 0x05	; 5
    146c:	03 96       	adiw	r24, 0x03	; 3
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	44 0f       	add	r20, r20
    1476:	44 0f       	add	r20, r20
    1478:	44 0f       	add	r20, r20
    147a:	ce 01       	movw	r24, r28
    147c:	05 96       	adiw	r24, 0x05	; 5
    147e:	02 96       	adiw	r24, 0x02	; 2
    1480:	fc 01       	movw	r30, r24
    1482:	80 81       	ld	r24, Z
    1484:	82 95       	swap	r24
    1486:	86 95       	lsr	r24
    1488:	87 70       	andi	r24, 0x07	; 7
    148a:	84 0f       	add	r24, r20
    148c:	f9 01       	movw	r30, r18
    148e:	80 83       	st	Z, r24
    1490:	26 ef       	ldi	r18, 0xF6	; 246
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	ce 01       	movw	r24, r28
    1496:	05 96       	adiw	r24, 0x05	; 5
    1498:	02 96       	adiw	r24, 0x02	; 2
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	44 0f       	add	r20, r20
    14a2:	44 0f       	add	r20, r20
    14a4:	44 0f       	add	r20, r20
    14a6:	ce 01       	movw	r24, r28
    14a8:	05 96       	adiw	r24, 0x05	; 5
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
    14b0:	82 95       	swap	r24
    14b2:	86 95       	lsr	r24
    14b4:	87 70       	andi	r24, 0x07	; 7
    14b6:	84 0f       	add	r24, r20
    14b8:	f9 01       	movw	r30, r18
    14ba:	80 83       	st	Z, r24
    14bc:	25 ef       	ldi	r18, 0xF5	; 245
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	ce 01       	movw	r24, r28
    14c2:	05 96       	adiw	r24, 0x05	; 5
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	fc 01       	movw	r30, r24
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	44 0f       	add	r20, r20
    14ce:	44 0f       	add	r20, r20
    14d0:	44 0f       	add	r20, r20
    14d2:	ce 01       	movw	r24, r28
    14d4:	05 96       	adiw	r24, 0x05	; 5
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	82 95       	swap	r24
    14dc:	86 95       	lsr	r24
    14de:	87 70       	andi	r24, 0x07	; 7
    14e0:	84 0f       	add	r24, r20
    14e2:	f9 01       	movw	r30, r18
    14e4:	80 83       	st	Z, r24
    14e6:	84 ef       	ldi	r24, 0xF4	; 244
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9e 01       	movw	r18, r28
    14ec:	2b 5f       	subi	r18, 0xFB	; 251
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	22 0f       	add	r18, r18
    14f6:	22 0f       	add	r18, r18
    14f8:	22 0f       	add	r18, r18
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    14fe:	8f ee       	ldi	r24, 0xEF	; 239
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	2f ee       	ldi	r18, 0xEF	; 239
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	f9 01       	movw	r30, r18
    1508:	40 81       	ld	r20, Z
    150a:	29 85       	ldd	r18, Y+9	; 0x09
    150c:	3a 85       	ldd	r19, Y+10	; 0x0a
    150e:	f9 01       	movw	r30, r18
    1510:	26 81       	ldd	r18, Z+6	; 0x06
    1512:	24 2b       	or	r18, r20
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	fc 01       	movw	r30, r24
    1520:	22 87       	std	Z+10, r18	; 0x0a
    1522:	84 ef       	ldi	r24, 0xF4	; 244
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	24 ef       	ldi	r18, 0xF4	; 244
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	f9 01       	movw	r30, r18
    152c:	20 81       	ld	r18, Z
    152e:	24 60       	ori	r18, 0x04	; 4
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	80 ef       	ldi	r24, 0xF0	; 240
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	20 ef       	ldi	r18, 0xF0	; 240
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	f9 01       	movw	r30, r18
    153e:	20 81       	ld	r18, Z
    1540:	24 60       	ori	r18, 0x04	; 4
    1542:	fc 01       	movw	r30, r24
    1544:	20 83       	st	Z, r18
          Can_set_rplv();
    1546:	8f ee       	ldi	r24, 0xEF	; 239
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	2f ee       	ldi	r18, 0xEF	; 239
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	f9 01       	movw	r30, r18
    1550:	20 81       	ld	r18, Z
    1552:	20 62       	ori	r18, 0x20	; 32
    1554:	fc 01       	movw	r30, r24
    1556:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1558:	84 ef       	ldi	r24, 0xF4	; 244
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	24 ef       	ldi	r18, 0xF4	; 244
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	2e 7f       	andi	r18, 0xFE	; 254
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
          Can_config_rx();       
    156a:	8f ee       	ldi	r24, 0xEF	; 239
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	2f ee       	ldi	r18, 0xEF	; 239
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	2f 73       	andi	r18, 0x3F	; 63
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
    157c:	8f ee       	ldi	r24, 0xEF	; 239
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	2f ee       	ldi	r18, 0xEF	; 239
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	20 68       	ori	r18, 0x80	; 128
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18
          break;
    158e:	66 c1       	rjmp	.+716    	; 0x185c <__stack+0xf5d>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	fc 01       	movw	r30, r24
    1596:	83 85       	ldd	r24, Z+11	; 0x0b
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <__stack+0xc9f>
    159c:	69 c0       	rjmp	.+210    	; 0x1670 <__stack+0xd71>
    159e:	83 ef       	ldi	r24, 0xF3	; 243
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	29 85       	ldd	r18, Y+9	; 0x09
    15a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    15a6:	2e 5f       	subi	r18, 0xFE	; 254
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	2d 5f       	subi	r18, 0xFD	; 253
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	f9 01       	movw	r30, r18
    15b0:	20 81       	ld	r18, Z
    15b2:	42 2f       	mov	r20, r18
    15b4:	44 0f       	add	r20, r20
    15b6:	44 0f       	add	r20, r20
    15b8:	44 0f       	add	r20, r20
    15ba:	29 85       	ldd	r18, Y+9	; 0x09
    15bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    15be:	2e 5f       	subi	r18, 0xFE	; 254
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	2e 5f       	subi	r18, 0xFE	; 254
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	f9 01       	movw	r30, r18
    15c8:	20 81       	ld	r18, Z
    15ca:	22 95       	swap	r18
    15cc:	26 95       	lsr	r18
    15ce:	27 70       	andi	r18, 0x07	; 7
    15d0:	24 0f       	add	r18, r20
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
    15d6:	82 ef       	ldi	r24, 0xF2	; 242
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	29 85       	ldd	r18, Y+9	; 0x09
    15dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    15de:	2e 5f       	subi	r18, 0xFE	; 254
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	2e 5f       	subi	r18, 0xFE	; 254
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	f9 01       	movw	r30, r18
    15e8:	20 81       	ld	r18, Z
    15ea:	42 2f       	mov	r20, r18
    15ec:	44 0f       	add	r20, r20
    15ee:	44 0f       	add	r20, r20
    15f0:	44 0f       	add	r20, r20
    15f2:	29 85       	ldd	r18, Y+9	; 0x09
    15f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f6:	2e 5f       	subi	r18, 0xFE	; 254
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	f9 01       	movw	r30, r18
    1600:	20 81       	ld	r18, Z
    1602:	22 95       	swap	r18
    1604:	26 95       	lsr	r18
    1606:	27 70       	andi	r18, 0x07	; 7
    1608:	24 0f       	add	r18, r20
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
    160e:	81 ef       	ldi	r24, 0xF1	; 241
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	29 85       	ldd	r18, Y+9	; 0x09
    1614:	3a 85       	ldd	r19, Y+10	; 0x0a
    1616:	2e 5f       	subi	r18, 0xFE	; 254
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	f9 01       	movw	r30, r18
    1620:	20 81       	ld	r18, Z
    1622:	42 2f       	mov	r20, r18
    1624:	44 0f       	add	r20, r20
    1626:	44 0f       	add	r20, r20
    1628:	44 0f       	add	r20, r20
    162a:	29 85       	ldd	r18, Y+9	; 0x09
    162c:	3a 85       	ldd	r19, Y+10	; 0x0a
    162e:	2e 5f       	subi	r18, 0xFE	; 254
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	f9 01       	movw	r30, r18
    1634:	20 81       	ld	r18, Z
    1636:	22 95       	swap	r18
    1638:	26 95       	lsr	r18
    163a:	27 70       	andi	r18, 0x07	; 7
    163c:	24 0f       	add	r18, r20
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
    1642:	80 ef       	ldi	r24, 0xF0	; 240
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	29 85       	ldd	r18, Y+9	; 0x09
    1648:	3a 85       	ldd	r19, Y+10	; 0x0a
    164a:	2e 5f       	subi	r18, 0xFE	; 254
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	f9 01       	movw	r30, r18
    1650:	20 81       	ld	r18, Z
    1652:	22 0f       	add	r18, r18
    1654:	22 0f       	add	r18, r18
    1656:	22 0f       	add	r18, r18
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
    165c:	8f ee       	ldi	r24, 0xEF	; 239
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	2f ee       	ldi	r18, 0xEF	; 239
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	20 61       	ori	r18, 0x10	; 16
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
    166e:	30 c0       	rjmp	.+96     	; 0x16d0 <__stack+0xdd1>
          else              { Can_set_std_id(cmd->id.std);}
    1670:	83 ef       	ldi	r24, 0xF3	; 243
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	29 85       	ldd	r18, Y+9	; 0x09
    1676:	3a 85       	ldd	r19, Y+10	; 0x0a
    1678:	2e 5f       	subi	r18, 0xFE	; 254
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	2f 5f       	subi	r18, 0xFF	; 255
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	f9 01       	movw	r30, r18
    1682:	20 81       	ld	r18, Z
    1684:	42 2f       	mov	r20, r18
    1686:	42 95       	swap	r20
    1688:	44 0f       	add	r20, r20
    168a:	40 7e       	andi	r20, 0xE0	; 224
    168c:	29 85       	ldd	r18, Y+9	; 0x09
    168e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1690:	2e 5f       	subi	r18, 0xFE	; 254
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	f9 01       	movw	r30, r18
    1696:	20 81       	ld	r18, Z
    1698:	26 95       	lsr	r18
    169a:	26 95       	lsr	r18
    169c:	26 95       	lsr	r18
    169e:	24 0f       	add	r18, r20
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
    16a4:	82 ef       	ldi	r24, 0xF2	; 242
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	29 85       	ldd	r18, Y+9	; 0x09
    16aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ac:	2e 5f       	subi	r18, 0xFE	; 254
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	22 95       	swap	r18
    16b6:	22 0f       	add	r18, r18
    16b8:	20 7e       	andi	r18, 0xE0	; 224
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 83       	st	Z, r18
    16be:	8f ee       	ldi	r24, 0xEF	; 239
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2f ee       	ldi	r18, 0xEF	; 239
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	f9 01       	movw	r30, r18
    16c8:	20 81       	ld	r18, Z
    16ca:	2f 7e       	andi	r18, 0xEF	; 239
    16cc:	fc 01       	movw	r30, r24
    16ce:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	13 c0       	rjmp	.+38     	; 0x16fa <__stack+0xdfb>
    16d4:	8a ef       	ldi	r24, 0xFA	; 250
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	29 85       	ldd	r18, Y+9	; 0x09
    16da:	3a 85       	ldd	r19, Y+10	; 0x0a
    16dc:	f9 01       	movw	r30, r18
    16de:	47 81       	ldd	r20, Z+7	; 0x07
    16e0:	50 85       	ldd	r21, Z+8	; 0x08
    16e2:	29 81       	ldd	r18, Y+1	; 0x01
    16e4:	22 2f       	mov	r18, r18
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	24 0f       	add	r18, r20
    16ea:	35 1f       	adc	r19, r21
    16ec:	f9 01       	movw	r30, r18
    16ee:	20 81       	ld	r18, Z
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	fc 01       	movw	r30, r24
    1700:	96 81       	ldd	r25, Z+6	; 0x06
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	89 17       	cp	r24, r25
    1706:	30 f3       	brcs	.-52     	; 0x16d4 <__stack+0xdd5>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	dc 01       	movw	r26, r24
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	af 83       	std	Y+7, r26	; 0x07
    1714:	b8 87       	std	Y+8, r27	; 0x08
    1716:	27 ef       	ldi	r18, 0xF7	; 247
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ce 01       	movw	r24, r28
    171c:	05 96       	adiw	r24, 0x05	; 5
    171e:	03 96       	adiw	r24, 0x03	; 3
    1720:	fc 01       	movw	r30, r24
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	44 0f       	add	r20, r20
    1728:	44 0f       	add	r20, r20
    172a:	44 0f       	add	r20, r20
    172c:	ce 01       	movw	r24, r28
    172e:	05 96       	adiw	r24, 0x05	; 5
    1730:	02 96       	adiw	r24, 0x02	; 2
    1732:	fc 01       	movw	r30, r24
    1734:	80 81       	ld	r24, Z
    1736:	82 95       	swap	r24
    1738:	86 95       	lsr	r24
    173a:	87 70       	andi	r24, 0x07	; 7
    173c:	84 0f       	add	r24, r20
    173e:	f9 01       	movw	r30, r18
    1740:	80 83       	st	Z, r24
    1742:	26 ef       	ldi	r18, 0xF6	; 246
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	05 96       	adiw	r24, 0x05	; 5
    174a:	02 96       	adiw	r24, 0x02	; 2
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	44 0f       	add	r20, r20
    1754:	44 0f       	add	r20, r20
    1756:	44 0f       	add	r20, r20
    1758:	ce 01       	movw	r24, r28
    175a:	05 96       	adiw	r24, 0x05	; 5
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	82 95       	swap	r24
    1764:	86 95       	lsr	r24
    1766:	87 70       	andi	r24, 0x07	; 7
    1768:	84 0f       	add	r24, r20
    176a:	f9 01       	movw	r30, r18
    176c:	80 83       	st	Z, r24
    176e:	25 ef       	ldi	r18, 0xF5	; 245
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	ce 01       	movw	r24, r28
    1774:	05 96       	adiw	r24, 0x05	; 5
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	fc 01       	movw	r30, r24
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	44 0f       	add	r20, r20
    1780:	44 0f       	add	r20, r20
    1782:	44 0f       	add	r20, r20
    1784:	ce 01       	movw	r24, r28
    1786:	05 96       	adiw	r24, 0x05	; 5
    1788:	fc 01       	movw	r30, r24
    178a:	80 81       	ld	r24, Z
    178c:	82 95       	swap	r24
    178e:	86 95       	lsr	r24
    1790:	87 70       	andi	r24, 0x07	; 7
    1792:	84 0f       	add	r24, r20
    1794:	f9 01       	movw	r30, r18
    1796:	80 83       	st	Z, r24
    1798:	84 ef       	ldi	r24, 0xF4	; 244
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9e 01       	movw	r18, r28
    179e:	2b 5f       	subi	r18, 0xFB	; 251
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	f9 01       	movw	r30, r18
    17a4:	20 81       	ld	r18, Z
    17a6:	22 0f       	add	r18, r18
    17a8:	22 0f       	add	r18, r18
    17aa:	22 0f       	add	r18, r18
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17b0:	8f ee       	ldi	r24, 0xEF	; 239
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	2f ee       	ldi	r18, 0xEF	; 239
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	f9 01       	movw	r30, r18
    17ba:	40 81       	ld	r20, Z
    17bc:	29 85       	ldd	r18, Y+9	; 0x09
    17be:	3a 85       	ldd	r19, Y+10	; 0x0a
    17c0:	f9 01       	movw	r30, r18
    17c2:	26 81       	ldd	r18, Z+6	; 0x06
    17c4:	24 2b       	or	r18, r20
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	fc 01       	movw	r30, r24
    17d2:	22 87       	std	Z+10, r18	; 0x0a
    17d4:	84 ef       	ldi	r24, 0xF4	; 244
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	24 ef       	ldi	r18, 0xF4	; 244
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	f9 01       	movw	r30, r18
    17de:	20 81       	ld	r18, Z
    17e0:	24 60       	ori	r18, 0x04	; 4
    17e2:	fc 01       	movw	r30, r24
    17e4:	20 83       	st	Z, r18
    17e6:	80 ef       	ldi	r24, 0xF0	; 240
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	20 ef       	ldi	r18, 0xF0	; 240
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	24 60       	ori	r18, 0x04	; 4
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
          Can_set_rplv();
    17f8:	8f ee       	ldi	r24, 0xEF	; 239
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	2f ee       	ldi	r18, 0xEF	; 239
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	f9 01       	movw	r30, r18
    1802:	20 81       	ld	r18, Z
    1804:	20 62       	ori	r18, 0x20	; 32
    1806:	fc 01       	movw	r30, r24
    1808:	20 83       	st	Z, r18
          Can_set_idemsk();
    180a:	84 ef       	ldi	r24, 0xF4	; 244
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	24 ef       	ldi	r18, 0xF4	; 244
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	f9 01       	movw	r30, r18
    1814:	20 81       	ld	r18, Z
    1816:	21 60       	ori	r18, 0x01	; 1
    1818:	fc 01       	movw	r30, r24
    181a:	20 83       	st	Z, r18
          Can_config_rx();       
    181c:	8f ee       	ldi	r24, 0xEF	; 239
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	2f ee       	ldi	r18, 0xEF	; 239
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	f9 01       	movw	r30, r18
    1826:	20 81       	ld	r18, Z
    1828:	2f 73       	andi	r18, 0x3F	; 63
    182a:	fc 01       	movw	r30, r24
    182c:	20 83       	st	Z, r18
    182e:	8f ee       	ldi	r24, 0xEF	; 239
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	2f ee       	ldi	r18, 0xEF	; 239
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	20 81       	ld	r18, Z
    183a:	20 68       	ori	r18, 0x80	; 128
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
          break;
    1840:	0d c0       	rjmp	.+26     	; 0x185c <__stack+0xf5d>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1842:	89 85       	ldd	r24, Y+9	; 0x09
    1844:	9a 85       	ldd	r25, Y+10	; 0x0a
    1846:	fc 01       	movw	r30, r24
    1848:	11 86       	std	Z+9, r1	; 0x09
          break;
    184a:	00 00       	nop
    184c:	07 c0       	rjmp	.+14     	; 0x185c <__stack+0xf5d>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	2f e1       	ldi	r18, 0x1F	; 31
    1854:	fc 01       	movw	r30, r24
    1856:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	01 c0       	rjmp	.+2      	; 0x185e <__stack+0xf5f>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    185c:	80 e0       	ldi	r24, 0x00	; 0
}
    185e:	2a 96       	adiw	r28, 0x0a	; 10
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	00 d0       	rcall	.+0      	; 0x1876 <can_get_status+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <can_get_status+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	fc 01       	movw	r30, r24
    1886:	81 85       	ldd	r24, Z+9	; 0x09
    1888:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	88 23       	and	r24, r24
    188e:	31 f0       	breq	.+12     	; 0x189c <can_get_status+0x2c>
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	8f 31       	cpi	r24, 0x1F	; 31
    1894:	19 f0       	breq	.+6      	; 0x189c <can_get_status+0x2c>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	8f 3f       	cpi	r24, 0xFF	; 255
    189a:	11 f4       	brne	.+4      	; 0x18a0 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	14 c1       	rjmp	.+552    	; 0x1ac8 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    18a0:	8d ee       	ldi	r24, 0xED	; 237
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	2b 81       	ldd	r18, Y+3	; 0x03
    18a6:	3c 81       	ldd	r19, Y+4	; 0x04
    18a8:	f9 01       	movw	r30, r18
    18aa:	20 81       	ld	r18, Z
    18ac:	22 95       	swap	r18
    18ae:	20 7f       	andi	r18, 0xF0	; 240
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    18b4:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	80 32       	cpi	r24, 0x20	; 32
    18c2:	91 05       	cpc	r25, r1
    18c4:	89 f0       	breq	.+34     	; 0x18e8 <can_get_status+0x78>
    18c6:	81 32       	cpi	r24, 0x21	; 33
    18c8:	91 05       	cpc	r25, r1
    18ca:	1c f4       	brge	.+6      	; 0x18d2 <can_get_status+0x62>
    18cc:	89 2b       	or	r24, r25
    18ce:	49 f0       	breq	.+18     	; 0x18e2 <can_get_status+0x72>
    18d0:	e5 c0       	rjmp	.+458    	; 0x1a9c <can_get_status+0x22c>
    18d2:	80 34       	cpi	r24, 0x40	; 64
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <can_get_status+0x6a>
    18d8:	cd c0       	rjmp	.+410    	; 0x1a74 <can_get_status+0x204>
    18da:	80 3a       	cpi	r24, 0xA0	; 160
    18dc:	91 05       	cpc	r25, r1
    18de:	21 f0       	breq	.+8      	; 0x18e8 <can_get_status+0x78>
    18e0:	dd c0       	rjmp	.+442    	; 0x1a9c <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
            break;
    18e6:	ef c0       	rjmp	.+478    	; 0x1ac6 <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    18e8:	8f ee       	ldi	r24, 0xEF	; 239
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	2f 70       	andi	r18, 0x0F	; 15
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	fc 01       	movw	r30, r24
    18fa:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	fc 01       	movw	r30, r24
    1902:	87 81       	ldd	r24, Z+7	; 0x07
    1904:	90 85       	ldd	r25, Z+8	; 0x08
    1906:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    190a:	80 ef       	ldi	r24, 0xF0	; 240
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	80 81       	ld	r24, Z
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	84 70       	andi	r24, 0x04	; 4
    1918:	99 27       	eor	r25, r25
    191a:	95 95       	asr	r25
    191c:	87 95       	ror	r24
    191e:	95 95       	asr	r25
    1920:	87 95       	ror	r24
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	89 2b       	or	r24, r25
    1926:	09 f4       	brne	.+2      	; 0x192a <can_get_status+0xba>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	fc 01       	movw	r30, r24
    1930:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1932:	8f ee       	ldi	r24, 0xEF	; 239
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	80 81       	ld	r24, Z
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	80 71       	andi	r24, 0x10	; 16
    1940:	99 27       	eor	r25, r25
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	95 95       	asr	r25
    1948:	87 95       	ror	r24
    194a:	95 95       	asr	r25
    194c:	87 95       	ror	r24
    194e:	95 95       	asr	r25
    1950:	87 95       	ror	r24
    1952:	89 2b       	or	r24, r25
    1954:	09 f4       	brne	.+2      	; 0x1958 <can_get_status+0xe8>
    1956:	54 c0       	rjmp	.+168    	; 0x1a00 <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	fc 01       	movw	r30, r24
    1960:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	02 96       	adiw	r24, 0x02	; 2
    1968:	03 96       	adiw	r24, 0x03	; 3
    196a:	23 ef       	ldi	r18, 0xF3	; 243
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	26 95       	lsr	r18
    1974:	26 95       	lsr	r18
    1976:	26 95       	lsr	r18
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	02 96       	adiw	r24, 0x02	; 2
    1982:	02 96       	adiw	r24, 0x02	; 2
    1984:	22 ef       	ldi	r18, 0xF2	; 242
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	f9 01       	movw	r30, r18
    198a:	20 81       	ld	r18, Z
    198c:	42 2f       	mov	r20, r18
    198e:	46 95       	lsr	r20
    1990:	46 95       	lsr	r20
    1992:	46 95       	lsr	r20
    1994:	23 ef       	ldi	r18, 0xF3	; 243
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	f9 01       	movw	r30, r18
    199a:	20 81       	ld	r18, Z
    199c:	22 95       	swap	r18
    199e:	22 0f       	add	r18, r18
    19a0:	20 7e       	andi	r18, 0xE0	; 224
    19a2:	24 0f       	add	r18, r20
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	02 96       	adiw	r24, 0x02	; 2
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	21 ef       	ldi	r18, 0xF1	; 241
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	42 2f       	mov	r20, r18
    19ba:	46 95       	lsr	r20
    19bc:	46 95       	lsr	r20
    19be:	46 95       	lsr	r20
    19c0:	22 ef       	ldi	r18, 0xF2	; 242
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	22 95       	swap	r18
    19ca:	22 0f       	add	r18, r18
    19cc:	20 7e       	andi	r18, 0xE0	; 224
    19ce:	24 0f       	add	r18, r20
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	02 96       	adiw	r24, 0x02	; 2
    19da:	20 ef       	ldi	r18, 0xF0	; 240
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	42 2f       	mov	r20, r18
    19e4:	46 95       	lsr	r20
    19e6:	46 95       	lsr	r20
    19e8:	46 95       	lsr	r20
    19ea:	21 ef       	ldi	r18, 0xF1	; 241
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 81       	ld	r18, Z
    19f2:	22 95       	swap	r18
    19f4:	22 0f       	add	r18, r18
    19f6:	20 7e       	andi	r18, 0xE0	; 224
    19f8:	24 0f       	add	r18, r20
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
    19fe:	26 c0       	rjmp	.+76     	; 0x1a4c <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	23 ef       	ldi	r18, 0xF3	; 243
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	22 95       	swap	r18
    1a1a:	26 95       	lsr	r18
    1a1c:	27 70       	andi	r18, 0x07	; 7
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	02 96       	adiw	r24, 0x02	; 2
    1a28:	22 ef       	ldi	r18, 0xF2	; 242
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	20 81       	ld	r18, Z
    1a30:	42 2f       	mov	r20, r18
    1a32:	42 95       	swap	r20
    1a34:	46 95       	lsr	r20
    1a36:	47 70       	andi	r20, 0x07	; 7
    1a38:	23 ef       	ldi	r18, 0xF3	; 243
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	f9 01       	movw	r30, r18
    1a3e:	20 81       	ld	r18, Z
    1a40:	22 0f       	add	r18, r18
    1a42:	22 0f       	add	r18, r18
    1a44:	22 0f       	add	r18, r18
    1a46:	24 0f       	add	r18, r20
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	2a 81       	ldd	r18, Y+2	; 0x02
    1a52:	fc 01       	movw	r30, r24
    1a54:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a56:	8f ee       	ldi	r24, 0xEF	; 239
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	2f ee       	ldi	r18, 0xEF	; 239
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	f9 01       	movw	r30, r18
    1a60:	20 81       	ld	r18, Z
    1a62:	2f 73       	andi	r18, 0x3F	; 63
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a68:	8e ee       	ldi	r24, 0xEE	; 238
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a70:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a72:	29 c0       	rjmp	.+82     	; 0x1ac6 <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	2a 81       	ldd	r18, Y+2	; 0x02
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a7e:	8f ee       	ldi	r24, 0xEF	; 239
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	2f ee       	ldi	r18, 0xEF	; 239
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	2f 73       	andi	r18, 0x3F	; 63
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a90:	8e ee       	ldi	r24, 0xEE	; 238
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a98:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a9a:	15 c0       	rjmp	.+42     	; 0x1ac6 <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1aa6:	8f ee       	ldi	r24, 0xEF	; 239
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	2f ee       	ldi	r18, 0xEF	; 239
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	f9 01       	movw	r30, r18
    1ab0:	20 81       	ld	r18, Z
    1ab2:	2f 73       	andi	r18, 0x3F	; 63
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ab8:	8e ee       	ldi	r24, 0xEE	; 238
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	fc 01       	movw	r30, r24
    1abe:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	89 83       	std	Y+1, r24	; 0x01
            break;
    1ac4:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <__vector_18>:

ISR (CAN_INT_vect)
{
    1ad6:	1f 92       	push	r1
    1ad8:	0f 92       	push	r0
    1ada:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	1f 92       	push	r1
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	uint8_t tmpPage = 0;
    1b08:	19 82       	std	Y+1, r1	; 0x01
	
	tmpPage = CANPAGE;				/* save current mob */
    1b0a:	8d ee       	ldi	r24, 0xED	; 237
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	fc 01       	movw	r30, r24
    1b10:	80 81       	ld	r24, Z
    1b12:	89 83       	std	Y+1, r24	; 0x01
	CANPAGE = CANHPMOB & 0xF0;		/* selects MOB with highest priority interrupt */
    1b14:	8d ee       	ldi	r24, 0xED	; 237
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	2c ee       	ldi	r18, 0xEC	; 236
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	20 81       	ld	r18, Z
    1b20:	20 7f       	andi	r18, 0xF0	; 240
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 83       	st	Z, r18

	if (CANSTMOB & (1 << RXOK))
    1b26:	8e ee       	ldi	r24, 0xEE	; 238
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	80 72       	andi	r24, 0x20	; 32
    1b34:	99 27       	eor	r25, r25
    1b36:	89 2b       	or	r24, r25
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <__vector_18+0x66>
    1b3a:	65 c1       	rjmp	.+714    	; 0x1e06 <__vector_18+0x330>
	{
		if (Can_get_ide()) // if extended frame
    1b3c:	8f ee       	ldi	r24, 0xEF	; 239
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	80 71       	andi	r24, 0x10	; 16
    1b4a:	99 27       	eor	r25, r25
    1b4c:	95 95       	asr	r25
    1b4e:	87 95       	ror	r24
    1b50:	95 95       	asr	r25
    1b52:	87 95       	ror	r24
    1b54:	95 95       	asr	r25
    1b56:	87 95       	ror	r24
    1b58:	95 95       	asr	r25
    1b5a:	87 95       	ror	r24
    1b5c:	89 2b       	or	r24, r25
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <__vector_18+0x8c>
    1b60:	95 c0       	rjmp	.+298    	; 0x1c8c <__vector_18+0x1b6>
		{
			can_receive_buffer[iPtr].ctrl.ide = 1;
    1b62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	82 0f       	add	r24, r18
    1b72:	93 1f       	adc	r25, r19
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	82 5f       	subi	r24, 0xF2	; 242
    1b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18
			Can_get_ext_id(can_receive_buffer[iPtr].id.ext);
    1b86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	c9 01       	movw	r24, r18
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	02 96       	adiw	r24, 0x02	; 2
    1ba2:	8d 5f       	subi	r24, 0xFD	; 253
    1ba4:	9e 4f       	sbci	r25, 0xFE	; 254
    1ba6:	03 96       	adiw	r24, 0x03	; 3
    1ba8:	23 ef       	ldi	r18, 0xF3	; 243
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	f9 01       	movw	r30, r18
    1bae:	20 81       	ld	r18, Z
    1bb0:	26 95       	lsr	r18
    1bb2:	26 95       	lsr	r18
    1bb4:	26 95       	lsr	r18
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 83       	st	Z, r18
    1bba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	02 96       	adiw	r24, 0x02	; 2
    1bd6:	8d 5f       	subi	r24, 0xFD	; 253
    1bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bda:	02 96       	adiw	r24, 0x02	; 2
    1bdc:	22 ef       	ldi	r18, 0xF2	; 242
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	f9 01       	movw	r30, r18
    1be2:	20 81       	ld	r18, Z
    1be4:	42 2f       	mov	r20, r18
    1be6:	46 95       	lsr	r20
    1be8:	46 95       	lsr	r20
    1bea:	46 95       	lsr	r20
    1bec:	23 ef       	ldi	r18, 0xF3	; 243
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	20 81       	ld	r18, Z
    1bf4:	22 95       	swap	r18
    1bf6:	22 0f       	add	r18, r18
    1bf8:	20 7e       	andi	r18, 0xE0	; 224
    1bfa:	24 0f       	add	r18, r20
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
    1c00:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	c9 01       	movw	r24, r18
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	02 96       	adiw	r24, 0x02	; 2
    1c1c:	8d 5f       	subi	r24, 0xFD	; 253
    1c1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	21 ef       	ldi	r18, 0xF1	; 241
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	f9 01       	movw	r30, r18
    1c28:	20 81       	ld	r18, Z
    1c2a:	42 2f       	mov	r20, r18
    1c2c:	46 95       	lsr	r20
    1c2e:	46 95       	lsr	r20
    1c30:	46 95       	lsr	r20
    1c32:	22 ef       	ldi	r18, 0xF2	; 242
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	f9 01       	movw	r30, r18
    1c38:	20 81       	ld	r18, Z
    1c3a:	22 95       	swap	r18
    1c3c:	22 0f       	add	r18, r18
    1c3e:	20 7e       	andi	r18, 0xE0	; 224
    1c40:	24 0f       	add	r18, r20
    1c42:	fc 01       	movw	r30, r24
    1c44:	20 83       	st	Z, r18
    1c46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	c9 01       	movw	r24, r18
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	02 96       	adiw	r24, 0x02	; 2
    1c62:	8d 5f       	subi	r24, 0xFD	; 253
    1c64:	9e 4f       	sbci	r25, 0xFE	; 254
    1c66:	20 ef       	ldi	r18, 0xF0	; 240
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	20 81       	ld	r18, Z
    1c6e:	42 2f       	mov	r20, r18
    1c70:	46 95       	lsr	r20
    1c72:	46 95       	lsr	r20
    1c74:	46 95       	lsr	r20
    1c76:	21 ef       	ldi	r18, 0xF1	; 241
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	20 81       	ld	r18, Z
    1c7e:	22 95       	swap	r18
    1c80:	22 0f       	add	r18, r18
    1c82:	20 7e       	andi	r18, 0xE0	; 224
    1c84:	24 0f       	add	r18, r20
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
    1c8a:	4d c0       	rjmp	.+154    	; 0x1d26 <__vector_18+0x250>
		}
		else // else standard frame
		{
			can_receive_buffer[iPtr].ctrl.ide = 0;
    1c8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	c9 01       	movw	r24, r18
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	82 5f       	subi	r24, 0xF2	; 242
    1ca8:	9e 4f       	sbci	r25, 0xFE	; 254
    1caa:	fc 01       	movw	r30, r24
    1cac:	10 82       	st	Z, r1
			Can_get_std_id(can_receive_buffer[iPtr].id.std);
    1cae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	82 0f       	add	r24, r18
    1cbe:	93 1f       	adc	r25, r19
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	02 96       	adiw	r24, 0x02	; 2
    1cca:	8d 5f       	subi	r24, 0xFD	; 253
    1ccc:	9e 4f       	sbci	r25, 0xFE	; 254
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	23 ef       	ldi	r18, 0xF3	; 243
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	20 81       	ld	r18, Z
    1cd8:	22 95       	swap	r18
    1cda:	26 95       	lsr	r18
    1cdc:	27 70       	andi	r18, 0x07	; 7
    1cde:	fc 01       	movw	r30, r24
    1ce0:	20 83       	st	Z, r18
    1ce2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	c9 01       	movw	r24, r18
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	02 96       	adiw	r24, 0x02	; 2
    1cfe:	8d 5f       	subi	r24, 0xFD	; 253
    1d00:	9e 4f       	sbci	r25, 0xFE	; 254
    1d02:	22 ef       	ldi	r18, 0xF2	; 242
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	f9 01       	movw	r30, r18
    1d08:	20 81       	ld	r18, Z
    1d0a:	42 2f       	mov	r20, r18
    1d0c:	42 95       	swap	r20
    1d0e:	46 95       	lsr	r20
    1d10:	47 70       	andi	r20, 0x07	; 7
    1d12:	23 ef       	ldi	r18, 0xF3	; 243
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	f9 01       	movw	r30, r18
    1d18:	20 81       	ld	r18, Z
    1d1a:	22 0f       	add	r18, r18
    1d1c:	22 0f       	add	r18, r18
    1d1e:	22 0f       	add	r18, r18
    1d20:	24 0f       	add	r18, r20
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 83       	st	Z, r18
		}
		
		can_receive_buffer[iPtr].status = can_get_mob_status();
    1d26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d2a:	08 2f       	mov	r16, r24
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	0e 94 c1 00 	call	0x182	; 0x182 <can_get_mob_status>
    1d32:	28 2f       	mov	r18, r24
    1d34:	c8 01       	movw	r24, r16
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	80 0f       	add	r24, r16
    1d3c:	91 1f       	adc	r25, r17
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	84 5f       	subi	r24, 0xF4	; 244
    1d48:	9e 4f       	sbci	r25, 0xFE	; 254
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
		can_receive_buffer[iPtr].dlc = Can_get_dlc();
    1d4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8f ee       	ldi	r24, 0xEF	; 239
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	4f 70       	andi	r20, 0x0F	; 15
    1d62:	c9 01       	movw	r24, r18
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	82 0f       	add	r24, r18
    1d6a:	93 1f       	adc	r25, r19
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	87 5f       	subi	r24, 0xF7	; 247
    1d76:	9e 4f       	sbci	r25, 0xFE	; 254
    1d78:	fc 01       	movw	r30, r24
    1d7a:	40 83       	st	Z, r20
		can_receive_buffer[iPtr].ctrl.rtr = Can_get_rtr();
    1d7c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	80 ef       	ldi	r24, 0xF0	; 240
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	84 70       	andi	r24, 0x04	; 4
    1d92:	99 27       	eor	r25, r25
    1d94:	95 95       	asr	r25
    1d96:	87 95       	ror	r24
    1d98:	95 95       	asr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	89 2b       	or	r24, r25
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <__vector_18+0x2ce>
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	c9 01       	movw	r24, r18
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	82 0f       	add	r24, r18
    1dac:	93 1f       	adc	r25, r19
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	83 5f       	subi	r24, 0xF3	; 243
    1db8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dba:	fc 01       	movw	r30, r24
    1dbc:	40 83       	st	Z, r20
		can_get_data(can_receive_buffer[iPtr].pt_data);
    1dbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	86 5f       	subi	r24, 0xF6	; 246
    1dda:	9e 4f       	sbci	r25, 0xFE	; 254
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <can_get_data>
		
		iPtr++;
    1de6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dea:	8f 5f       	subi	r24, 0xFF	; 255
    1dec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (iPtr == CAN_RECEIVED_BUFFER_SIZE)
    1df0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <__vector_18+0x326>
		{
			iPtr = 0;
    1df8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		CANCDMOB = (1 << CONMOB1);
    1dfc:	8f ee       	ldi	r24, 0xEF	; 239
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	20 e8       	ldi	r18, 0x80	; 128
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
	}
	
	CANSTMOB = 0x00;
    1e06:	8e ee       	ldi	r24, 0xEE	; 238
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	10 82       	st	Z, r1
	CANPAGE = tmpPage;
    1e0e:	8d ee       	ldi	r24, 0xED	; 237
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	29 81       	ldd	r18, Y+1	; 0x01
    1e14:	fc 01       	movw	r30, r24
    1e16:	20 83       	st	Z, r18
}
    1e18:	00 00       	nop
    1e1a:	0f 90       	pop	r0
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	0f 90       	pop	r0
    1e3e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <__vector_19>:

    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e50:	0f 92       	push	r0
    1e52:	11 24       	eor	r1, r1
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	00 00       	nop
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	0f 90       	pop	r0
    1e64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <can_network_init>:
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	1f 92       	push	r1
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
	can_init(mode);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	0e 94 41 01 	call	0x282	; 0x282 <can_init>
}
    1e80:	00 00       	nop
    1e82:	0f 90       	pop	r0
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <can_send_message>:

void can_send_message (void)
{
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	60 97       	sbiw	r28, 0x10	; 16
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
	pt_data[1] = 0xFF;
	message.pt_data = &pt_data[0];
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1ea6:	0d b7       	in	r16, 0x3d	; 61
    1ea8:	1e b7       	in	r17, 0x3e	; 62
{
	can_init(mode);
}

void can_send_message (void)
{
    1eaa:	8d b7       	in	r24, 0x3d	; 61
    1eac:	9e b7       	in	r25, 0x3e	; 62
    1eae:	7c 01       	movw	r14, r24
	st_cmd_t message;
	message.id.ext = 0x1AC;
    1eb0:	8c ea       	ldi	r24, 0xAC	; 172
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	8f 83       	std	Y+7, r24	; 0x07
    1eba:	98 87       	std	Y+8, r25	; 0x08
    1ebc:	a9 87       	std	Y+9, r26	; 0x09
    1ebe:	ba 87       	std	Y+10, r27	; 0x0a
	message.ctrl.ide = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	88 8b       	std	Y+16, r24	; 0x10
	message.ctrl.rtr = 0;
    1ec4:	1f 86       	std	Y+15, r1	; 0x0f
	message.dlc = 2;
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	8b 87       	std	Y+11, r24	; 0x0b
	message.cmd = CMD_TX_DATA;
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pt_data[message.dlc];
    1ece:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ed0:	82 2f       	mov	r24, r18
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	82 2f       	mov	r24, r18
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	2d b7       	in	r18, 0x3d	; 61
    1ee0:	3e b7       	in	r19, 0x3e	; 62
    1ee2:	28 1b       	sub	r18, r24
    1ee4:	39 0b       	sbc	r19, r25
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	3e bf       	out	0x3e, r19	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	2d bf       	out	0x3d, r18	; 61
    1ef0:	8d b7       	in	r24, 0x3d	; 61
    1ef2:	9e b7       	in	r25, 0x3e	; 62
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
	pt_data[0] = 0xEE;
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	2e ee       	ldi	r18, 0xEE	; 238
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
	pt_data[1] = 0xFF;
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	2f ef       	ldi	r18, 0xFF	; 255
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	21 83       	std	Z+1, r18	; 0x01
	message.pt_data = &pt_data[0];
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	9d 87       	std	Y+13, r25	; 0x0d
    1f14:	8c 87       	std	Y+12, r24	; 0x0c
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1f16:	00 00       	nop
    1f18:	ce 01       	movw	r24, r28
    1f1a:	05 96       	adiw	r24, 0x05	; 5
    1f1c:	0e 94 a2 01 	call	0x344	; 0x344 <can_cmd>
    1f20:	88 23       	and	r24, r24
    1f22:	d1 f7       	brne	.-12     	; 0x1f18 <can_send_message+0x8e>
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response	
    1f24:	00 00       	nop
    1f26:	ce 01       	movw	r24, r28
    1f28:	05 96       	adiw	r24, 0x05	; 5
    1f2a:	0e 94 38 0c 	call	0x1870	; 0x1870 <can_get_status>
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	d1 f3       	breq	.-12     	; 0x1f26 <can_send_message+0x9c>
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	fe be       	out	0x3e, r15	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	ed be       	out	0x3d, r14	; 61
    1f3c:	00 00       	nop
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	1e bf       	out	0x3e, r17	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0d bf       	out	0x3d, r16	; 61
    1f48:	60 96       	adiw	r28, 0x10	; 16
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	08 95       	ret

00001f62 <main>:
#include "can/can_network.h"
#include "timer/timer.h"
#include "helpers.h"

int main(void)
{
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
	
	can_network_init(1);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <can_network_init>
	init_1ms_timer();
    1f70:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <init_1ms_timer>
	sei();
    1f74:	78 94       	sei
	
	
    /* Replace with your application code */
    while (1) 
    {
		if (bit_check(TIMER_TASKS, BIT_TIMER_250ms))
    1f76:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	80 71       	andi	r24, 0x10	; 16
    1f80:	99 27       	eor	r25, r25
    1f82:	89 2b       	or	r24, r25
    1f84:	c1 f3       	breq	.-16     	; 0x1f76 <main+0x14>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_250ms);
    1f86:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    1f8a:	8f 7e       	andi	r24, 0xEF	; 239
    1f8c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
			can_send_message();
    1f90:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <can_send_message>
		}
    }
    1f94:	f0 cf       	rjmp	.-32     	; 0x1f76 <main+0x14>

00001f96 <init_1ms_timer>:
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
		while ((TIFR1 & (1 << OCF1A)) == 0);
		TIFR1 |= (1 << OCF1A);
		millis--;
	} while (millis > 0);
}
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ms_counter>
    1fa2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ms_counter+0x1>
    1fa6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ms_counter+0x2>
    1faa:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <ms_counter+0x3>
    1fae:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <timer_10ms>
    1fb2:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_20ms>
    1fb6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_50ms>
    1fba:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_100ms>
    1fbe:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <timer_250ms>
    1fc2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_500ms+0x1>
    1fc6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_500ms>
    1fca:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_1000ms+0x1>
    1fce:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_1000ms>
    1fd2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <TIMER_TASKS>
    1fd6:	87 e4       	ldi	r24, 0x47	; 71
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	29 ef       	ldi	r18, 0xF9	; 249
    1fdc:	fc 01       	movw	r30, r24
    1fde:	20 83       	st	Z, r18
    1fe0:	8e e6       	ldi	r24, 0x6E	; 110
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	2e e6       	ldi	r18, 0x6E	; 110
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	f9 01       	movw	r30, r18
    1fea:	20 81       	ld	r18, Z
    1fec:	22 60       	ori	r18, 0x02	; 2
    1fee:	fc 01       	movw	r30, r24
    1ff0:	20 83       	st	Z, r18
    1ff2:	84 e4       	ldi	r24, 0x44	; 68
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	24 e4       	ldi	r18, 0x44	; 68
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	20 81       	ld	r18, Z
    1ffe:	22 60       	ori	r18, 0x02	; 2
    2000:	fc 01       	movw	r30, r24
    2002:	20 83       	st	Z, r18
    2004:	85 e4       	ldi	r24, 0x45	; 69
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	25 e4       	ldi	r18, 0x45	; 69
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	f9 01       	movw	r30, r18
    200e:	20 81       	ld	r18, Z
    2010:	23 60       	ori	r18, 0x03	; 3
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
    2016:	00 00       	nop
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	2f 93       	push	r18
    202c:	8f 93       	push	r24
    202e:	9f 93       	push	r25
    2030:	af 93       	push	r26
    2032:	bf 93       	push	r27
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	ms_counter++;
    203c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ms_counter>
    2040:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ms_counter+0x1>
    2044:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <ms_counter+0x2>
    2048:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <ms_counter+0x3>
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	a1 1d       	adc	r26, r1
    2050:	b1 1d       	adc	r27, r1
    2052:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ms_counter>
    2056:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ms_counter+0x1>
    205a:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <ms_counter+0x2>
    205e:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <ms_counter+0x3>
	timer_10ms++;
    2062:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer_10ms>
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <timer_10ms>
	timer_20ms++;
    206c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_20ms>
    2070:	8f 5f       	subi	r24, 0xFF	; 255
    2072:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timer_20ms>
	timer_50ms++;
    2076:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_50ms>
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timer_50ms>
	timer_100ms++;
    2080:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_100ms>
    2084:	8f 5f       	subi	r24, 0xFF	; 255
    2086:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <timer_100ms>
	timer_250ms++;
    208a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <timer_250ms>
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <timer_250ms>
	timer_500ms++;
    2094:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_500ms>
    2098:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_500ms+0x1>
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer_500ms+0x1>
    20a2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer_500ms>
	timer_1000ms++;
    20a6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_1000ms>
    20aa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <timer_1000ms+0x1>
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <timer_1000ms+0x1>
    20b4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <timer_1000ms>
	
	if (timer_10ms == 10)
    20b8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer_10ms>
    20bc:	8a 30       	cpi	r24, 0x0A	; 10
    20be:	39 f4       	brne	.+14     	; 0x20ce <__vector_15+0xb0>
	{
		timer_10ms = 0;
    20c0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <timer_10ms>
		bit_set(TIMER_TASKS, BIT_TIMER_10ms);
    20c4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    20c8:	81 60       	ori	r24, 0x01	; 1
    20ca:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
    20ce:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timer_20ms>
    20d2:	84 31       	cpi	r24, 0x14	; 20
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <__vector_15+0xc6>
	{
		timer_20ms = 0;
    20d6:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <timer_20ms>
		bit_set(TIMER_TASKS, BIT_TIMER_20ms);
    20da:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
    20e4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer_50ms>
    20e8:	82 33       	cpi	r24, 0x32	; 50
    20ea:	39 f4       	brne	.+14     	; 0x20fa <__vector_15+0xdc>
	{
		timer_50ms = 0;
    20ec:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <timer_50ms>
		bit_set(TIMER_TASKS, BIT_TIMER_50ms);
    20f0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
    20fa:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer_100ms>
    20fe:	84 36       	cpi	r24, 0x64	; 100
    2100:	39 f4       	brne	.+14     	; 0x2110 <__vector_15+0xf2>
	{
		timer_100ms = 0;
    2102:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <timer_100ms>
		bit_set(TIMER_TASKS, BIT_TIMER_100ms);
    2106:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    210a:	88 60       	ori	r24, 0x08	; 8
    210c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
    2110:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <timer_250ms>
    2114:	8a 3f       	cpi	r24, 0xFA	; 250
    2116:	39 f4       	brne	.+14     	; 0x2126 <__vector_15+0x108>
	{
		timer_250ms = 0;
    2118:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <timer_250ms>
		bit_set(TIMER_TASKS, BIT_TIMER_250ms);
    211c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2120:	80 61       	ori	r24, 0x10	; 16
    2122:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
    2126:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_500ms>
    212a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_500ms+0x1>
    212e:	84 3f       	cpi	r24, 0xF4	; 244
    2130:	91 40       	sbci	r25, 0x01	; 1
    2132:	49 f4       	brne	.+18     	; 0x2146 <__vector_15+0x128>
	{
		timer_500ms = 0;
    2134:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_500ms+0x1>
    2138:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_500ms>
		bit_set(TIMER_TASKS, BIT_TIMER_500ms);
    213c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
    2146:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timer_1000ms>
    214a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <timer_1000ms+0x1>
    214e:	88 3e       	cpi	r24, 0xE8	; 232
    2150:	93 40       	sbci	r25, 0x03	; 3
    2152:	49 f4       	brne	.+18     	; 0x2166 <__vector_15+0x148>
	{
		timer_1000ms = 0;
    2154:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timer_1000ms+0x1>
    2158:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timer_1000ms>
		bit_set(TIMER_TASKS, BIT_TIMER_1000ms);
    215c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <TIMER_TASKS>
    2160:	80 64       	ori	r24, 0x40	; 64
    2162:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <TIMER_TASKS>
	}
    2166:	00 00       	nop
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	bf 91       	pop	r27
    216e:	af 91       	pop	r26
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	2f 91       	pop	r18
    2176:	0f 90       	pop	r0
    2178:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    217c:	0f 90       	pop	r0
    217e:	1f 90       	pop	r1
    2180:	18 95       	reti

00002182 <__tablejump2__>:
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	05 90       	lpm	r0, Z+
    2188:	f4 91       	lpm	r31, Z
    218a:	e0 2d       	mov	r30, r0
    218c:	09 94       	ijmp

0000218e <_exit>:
    218e:	f8 94       	cli

00002190 <__stop_program>:
    2190:	ff cf       	rjmp	.-2      	; 0x2190 <__stop_program>
